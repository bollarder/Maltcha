{"file_contents":{"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\n\n// Conversation message structure\nexport const messageSchema = z.object({\n  timestamp: z.string(),\n  participant: z.string(),\n  content: z.string(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\n\n// Analysis result structure\nexport const analysisResultSchema = z.object({\n  id: z.string(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  uploadedAt: z.string(),\n  status: z.enum([\"processing\", \"completed\", \"failed\"]),\n  messages: z.array(messageSchema),\n  userPurpose: z.string().optional(),\n  stats: z\n    .object({\n      totalMessages: z.number(),\n      participants: z.number(),\n      avgResponseTime: z.string(),\n      sentimentScore: z.number(),\n    })\n    .optional(),\n  charts: z\n    .object({\n      messageFrequency: z.array(\n        z.object({\n          date: z.string(),\n          count: z.number(),\n        }),\n      ),\n      participantActivity: z.array(\n        z.object({\n          name: z.string(),\n          count: z.number(),\n        }),\n      ),\n      hourlyActivity: z.array(\n        z.object({\n          hour: z.number(),\n          count: z.number(),\n        }),\n      ),\n      sentimentDistribution: z.array(\n        z.object({\n          name: z.string(),\n          value: z.number(),\n        }),\n      ),\n    })\n    .optional(),\n  insights: z\n    .array(\n      z.object({\n        title: z.string(),\n        description: z.string(),\n      }),\n    )\n    .optional(),\n  // Stage 1 데이터 추가\n  stage1Data: z\n    .object({\n      basicStats: z.any().optional(),\n      keyInfo: z.any().optional(),\n    })\n    .optional(),\n  // Stage 2 데이터 추가\n  stage2Data: z\n    .object({\n      communicationStyle: z.any().optional(),\n      languagePattern: z.any().optional(),\n      emotionalExpression: z.any().optional(),\n      relationshipDynamics: z.any().optional(),\n      specialPatterns: z.any().optional(),\n      partnerStatus: z.any().optional(),\n    })\n    .optional(),\n  // Claude 심층 분석 결과\n  claudeAnalysis: z\n    .object({\n      relationshipOverview: z.string(),\n      communicationPatterns: z.object({\n        tikitakaAnalysis: z.string(),\n        conversationFlow: z.string(),\n        responsePatterns: z.string(),\n      }),\n      emotionalDynamics: z.object({\n        sentimentTrends: z.string(),\n        emotionalMoments: z.array(\n          z.object({\n            type: z.string(),\n            description: z.string(),\n            context: z.string(),\n          })\n        ),\n        emotionalBalance: z.string(),\n      }),\n      psychologicalInsights: z.object({\n        attachmentStyle: z.string(),\n        conflictResolution: z.string(),\n        intimacyPatterns: z.string(),\n        communicationBarriers: z.string(),\n      }),\n      relationshipHealth: z.object({\n        currentState: z.string(),\n        strengths: z.array(z.string()),\n        concerns: z.array(z.string()),\n        trajectory: z.string(),\n      }),\n      practicalAdvice: z.object({\n        immediateActions: z.array(z.string()),\n        longTermStrategies: z.array(z.string()),\n        communicationTips: z.array(z.string()),\n      }),\n      conclusion: z.string(),\n    })\n    .optional(),\n  // 심층 분석 결과 (Claude 또는 Multi-turn)\n  deepAnalysis: z.any().optional(),\n  // Stage 5: Tea Coach 보고서\n  teaCoachReport: z.any().optional(),\n  error: z.string().optional(),\n});\n\nexport const insertAnalysisSchema = z.object({\n  fileName: z.string(),\n  fileSize: z.number(),\n});\n\nexport type InsertAnalysis = z.infer<typeof insertAnalysisSchema>;\nexport type AnalysisResult = z.infer<typeof analysisResultSchema>;\n\n// Shared results table for shareable links\nexport const sharedResults = pgTable(\"shared_results\", {\n  id: varchar(\"id\", { length: 10 }).primaryKey(),\n  analysisId: varchar(\"analysis_id\", { length: 255 }).notNull(),\n  analysisData: text(\"analysis_data\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  viewCount: integer(\"view_count\").notNull().default(0),\n});\n\nexport const insertSharedResultSchema = createInsertSchema(sharedResults).omit({\n  createdAt: true,\n  viewCount: true,\n});\n\nexport const selectSharedResultSchema = createSelectSchema(sharedResults);\n\nexport type InsertSharedResult = z.infer<typeof insertSharedResultSchema>;\nexport type SharedResult = typeof sharedResults.$inferSelect;\n","size_bytes":4520},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/lib/device.ts":{"content":"export const isMobile = (): boolean => {\n  if (typeof navigator === 'undefined') return false;\n  \n  return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n};\n","size_bytes":165},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2159},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Upload from \"@/pages/upload\";\nimport Loading from \"@/pages/loading\";\nimport Results from \"@/pages/results\";\nimport SharedResult from \"@/pages/shared-result\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/upload\" component={Upload} />\n      <Route path=\"/loading/:id\" component={Loading} />\n      <Route path=\"/results/:id\" component={Results} />\n      <Route path=\"/result/:shareId\" component={SharedResult} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1100},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/services/gemini-summarizer.ts":{"content":"import { GoogleGenerativeAI } from '@google/generative-ai';\nimport type { FilteredMessage, FilterResult } from './gemini-filter';\n\nexport interface TimelineEvent {\n  date: string;\n  description: string;\n  significance: string;\n}\n\nexport interface TurningPoint {\n  index: number;\n  date: string;\n  description: string;\n  impact: string;\n}\n\nexport interface MediumSample {\n  index: number;\n  date: string;\n  category: string;\n}\n\nexport interface SummaryResult {\n  timeline: TimelineEvent[];\n  turning_points: TurningPoint[];\n  high_indices: number[];\n  medium_sample: MediumSample[];\n  statistics: {\n    total_analyzed: number;\n    high_count: number;\n    medium_count: number;\n    relationship_health: string;\n    key_themes: string[];\n  };\n}\n\n/**\n * Gemini 요약 프롬프트 생성 (FBI 프로파일러 버전 - Stage 3)\n */\nfunction createSummaryPrompt(\n  highMessages: FilteredMessage[],\n  mediumMessages: FilteredMessage[],\n  relationshipType: string,\n  userGoal: string = '관계 분석',\n  batchSummaries?: any[]\n): string {\n  // 사용자 이름 추출 (첫 번째 메시지부터)\n  const userSet = new Set([...highMessages, ...mediumMessages].map(m => m.user));\n  const users = Array.from(userSet);\n  const userName = users[0] || 'User1';\n  const partnerName = users[1] || 'User2';\n  \n  const criticalCount = highMessages.length;\n  const mediumCount = mediumMessages.length;\n  const totalMessages = criticalCount + mediumCount;\n\n  const batchSummarySection = batchSummaries && batchSummaries.length > 0 ? `\n\n## 📦 Stage 2 배치 요약 (증거 정리관 보고서)\n\n증거 정리 전문가가 이미 각 배치를 500토큰 이내로 압축했습니다.\n아래는 **전체 ${batchSummaries.length}개 배치의 핵심 패턴 요약**입니다.\n\n${batchSummaries.map(batch => `\n### Batch ${batch.batch_id} (${batch.period})\n- **Message Range**: ${batch.message_range}\n- **특징**: ${batch.batch_characteristics}\n- **주요 패턴**: ${batch.critical_summary.pattern_groups.map((p: any) => p.pattern).join(', ')}\n- **핵심 이벤트**: ${batch.critical_summary.top_events.map((e: any) => `[${e.index}] ${e.brief}`).join('; ')}\n- **주요 테마**: ${batch.medium_summary.themes.join(', ')}\n`).join('\\n')}\n\n**이 배치 요약을 참고하여 전체 프로파일을 작성하세요.**\n` : '';\n\n  return `# 🕵️ FBI 프로파일링 프로토콜 (Stage 3)\n\n당신은 FBI 행동분석팀(BAU) 프로파일러입니다.\n경력 15년, 200건 이상 복잡한 사건 프로파일링.\n\n## 임무\n\n증거 수집관이 분류한 증거를 분석하여\n관계의 프로파일을 작성하세요.\n\n---\n\n## 입력 데이터\n${batchSummarySection}\n\n### 증거 메타데이터 (원문 제외)\n\n**CRITICAL 증거: ${criticalCount}개**\n${highMessages.map(m => `[${m.index}] ${m.date} | ${m.user} | 이유: ${m.reason}`).join('\\n')}\n\n**MEDIUM 증거: ${mediumCount}개 (샘플 500개)**\n${mediumMessages.slice(0, 500).map(m => `[${m.index}] ${m.date} | ${m.user} | 이유: ${m.reason}`).join('\\n')}\n${mediumMessages.length > 500 ? `\\n... 외 ${mediumMessages.length - 500}개` : ''}\n\n**통계:**\n- 총 메시지: ${totalMessages}\n- 관계: ${relationshipType}\n- 목적: ${userGoal}\n- 참여자: ${userName}, ${partnerName}\n\n**중요: 원문 없이 메타데이터만으로 분석**\n\n---\n\n## FBI 프로파일링 6단계\n\n### Stage 1: 증거 검토\n- CRITICAL ${criticalCount}개 전체 검토\n- MEDIUM 중 대표 샘플 500개 선별\n- 시간순 정렬\n\n### Stage 2: 범죄 분류\n**MO (Modus Operandi) - 소통 방식**: 어떻게 대화하는가?\n**Signature - 고유 패턴**: 왜 그렇게 하는가? 변하지 않는 것\n\n### Stage 3: 타임라인 재구성\n**Phase 1 (초기)**: 첫 1/3 기간 분석\n**Phase 2 (중기)**: 중간 1/3 기간, 전환점 파악\n**Phase 3 (최근)**: 마지막 1/3 기간, 현재 상태\n\n### Stage 4: 피해자학\n${partnerName} 분석: 니즈, 트리거, 회피 패턴\n\n### Stage 5: 행동 증거 분석\n패턴 발견 (최소 5개, 3회 이상 출현)\n\n### Stage 6: 프로파일 생성\n관계 유형, 건강도 점수, 전환점, 심층 분석 대상\n\n---\n\n## 출력 형식 (간소화)\n\n\\`\\`\\`json\n{\n  \"timeline\": [\n    {\n      \"date\": \"2024-01\",\n      \"description\": \"관계 시작기\",\n      \"significance\": \"설렘과 호기심\"\n    }\n  ],\n  \"turning_points\": [\n    {\n      \"index\": 145,\n      \"date\": \"2024-03-15\",\n      \"description\": \"첫 갈등 발생\",\n      \"impact\": \"관계 재정립\"\n    }\n  ],\n  \"high_indices\": [${highMessages.map(m => m.index).join(', ')}],\n  \"medium_sample\": [\n    {\n      \"index\": 67,\n      \"date\": \"2024-02-10\",\n      \"category\": \"일상 공유\"\n    }\n  ],\n  \"statistics\": {\n    \"total_analyzed\": ${totalMessages},\n    \"high_count\": ${criticalCount},\n    \"medium_count\": ${mediumCount},\n    \"relationship_health\": \"건강함/보통/주의/위험\",\n    \"key_themes\": [\"주제1\", \"주제2\", \"주제3\"]\n  }\n}\n\\`\\`\\`\n\n---\n\n## FBI 프로파일링 원칙\n\n**1. 증거만 말한다**\n- 메타데이터에 없으면 추측 금지\n- 인덱스와 이유가 전부\n\n**2. 패턴 = 3회 이상**\n- 1-2회는 \"가능성\"\n- 3회 이상만 확정 패턴\n\n**3. 타임라인이 핵심**\n- 시간 흐름이 진실\n- 초기-중기-최근 비교 필수\n\n**4. 수치로 증명**\n- 추상적 표현 금지\n- 구체적 숫자 제시\n\n---\n\n## 체크리스트\n\n- [ ] timeline: 전체 타임라인 5-8개 이벤트\n- [ ] turning_points: 관계 전환점 5-10개 (인덱스 포함)\n- [ ] high_indices: 모든 CRITICAL 인덱스 배열\n- [ ] medium_sample: MEDIUM 대표 샘플 500개\n- [ ] statistics: 건강도, 핵심 주제\n\n---\n\n이제 프로파일링을 시작하세요. 정확한 JSON으로 출력하세요.`;\n}\n\n/**\n * Gemini API로 최종 요약 생성 (Stage 3)\n */\nexport async function summarizeWithGemini(\n  filterResult: FilterResult,\n  relationshipType: string,\n  userGoal: string = '관계 분석',\n  batchSummaries?: any[]\n): Promise<SummaryResult> {\n  const apiKey = process.env.GEMINI_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('GEMINI_API_KEY not found in environment variables');\n  }\n\n  const genAI = new GoogleGenerativeAI(apiKey);\n  const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });\n\n  const prompt = createSummaryPrompt(\n    filterResult.high,\n    filterResult.medium,\n    relationshipType,\n    userGoal,\n    batchSummaries\n  );\n\n  let lastError: Error | null = null;\n\n  // 3회 재시도\n  for (let attempt = 1; attempt <= 3; attempt++) {\n    try {\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      // JSON 추출\n      let jsonText = text.trim();\n      if (jsonText.startsWith('```json')) {\n        jsonText = jsonText.replace(/```json\\n?/g, '').replace(/```\\n?$/g, '');\n      } else if (jsonText.startsWith('```')) {\n        jsonText = jsonText.replace(/```\\n?/g, '');\n      }\n\n      const parsed = JSON.parse(jsonText);\n\n      // 원문 제거 함수 (message, content 필드 제거)\n      const sanitizeObject = (obj: any): any => {\n        if (Array.isArray(obj)) {\n          return obj.map(item => sanitizeObject(item));\n        } else if (obj !== null && typeof obj === 'object') {\n          const sanitized: any = {};\n          for (const [key, value] of Object.entries(obj)) {\n            // message, content 필드 제거\n            if (key !== 'message' && key !== 'content' && key !== 'text') {\n              sanitized[key] = sanitizeObject(value);\n            }\n          }\n          return sanitized;\n        }\n        return obj;\n      };\n\n      // 결과 검증 및 정화\n      const sanitized = sanitizeObject(parsed);\n\n      // 메모리 해제를 위해 필터 결과 참조 제거\n      // (함수가 끝나면 자동으로 가비지 컬렉션됨)\n\n      const summary: SummaryResult = {\n        timeline: sanitized.timeline || [],\n        turning_points: sanitized.turning_points || [],\n        high_indices: sanitized.high_indices || [],\n        medium_sample: sanitized.medium_sample || [],\n        statistics: sanitized.statistics || {\n          total_analyzed: filterResult.high.length + filterResult.medium.length,\n          high_count: filterResult.high.length,\n          medium_count: filterResult.medium.length,\n          relationship_health: '알 수 없음',\n          key_themes: [],\n        },\n      };\n\n      // 최종 검증: 인덱스만 포함되어 있는지 확인\n      console.log(`Summary generated: ${summary.high_indices.length} high indices, ${summary.medium_sample.length} medium samples`);\n\n      return summary;\n    } catch (error: any) {\n      lastError = error;\n      console.error(`Summarize attempt ${attempt} failed:`, error.message);\n\n      // Rate Limit 에러면 5초 대기\n      if (error.message?.includes('RESOURCE_EXHAUSTED') || error.message?.includes('429')) {\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      } else {\n        // 일반 에러면 1초 대기\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  // 모든 재시도 실패\n  console.error('All summarize attempts failed:', lastError);\n  throw new Error('Failed to generate summary after 3 attempts');\n}\n\n/**\n * 브라우저에서 필터링 결과를 받아 요약 생성\n * 서버 메모리에서만 처리, 디스크 저장 없음\n */\nexport async function processSummaryRequest(\n  filterResult: FilterResult,\n  relationshipType: string,\n  userGoal: string = '관계 분석'\n): Promise<SummaryResult> {\n  console.log(`Processing summary for ${filterResult.stats.total} filtered messages...`);\n  \n  // Gemini API 1회 호출\n  const summary = await summarizeWithGemini(filterResult, relationshipType, userGoal);\n  \n  console.log(`Summary generated: ${summary.timeline.length} timeline events, ${summary.turning_points.length} turning points`);\n  \n  // 서버 메모리 자동 해제 (함수 종료 시)\n  return summary;\n}\n","size_bytes":9898},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/services/claude-deep-analysis.ts":{"content":"// Claude 심층 분석 서비스\n// Gemini 요약 + HIGH 원문 + MEDIUM 샘플을 받아 전문 분석 보고서 생성\n\nimport Anthropic from \"@anthropic-ai/sdk\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY || \"\",\n});\n\nconst CLAUDE_MODEL = \"claude-sonnet-4-20250514\";\n\nexport interface ClaudeInputPackage {\n  systemPrompt: string;\n  geminiSummary: any;\n  highMessages: Array<{\n    index: number;\n    date: string;\n    user: string;\n    message: string;\n  }>;\n  mediumSamples: Array<{\n    index: number;\n    date: string;\n    user: string;\n    message: string;\n  }>;\n  relationshipContext: {\n    type: string;\n    purpose: string;\n    participants: string[];\n    period: {\n      start: string;\n      end: string;\n      duration: string;\n    };\n    statistics: {\n      totalMessages: number;\n      filteredHigh: number;\n      filteredMedium: number;\n      averagePerDay: number;\n    };\n    background: string;\n  };\n  tokenEstimate: {\n    systemPrompt: number;\n    geminiSummary: number;\n    highMessages: number;\n    mediumSamples: number;\n    relationshipContext: number;\n    total: number;\n  };\n}\n\nexport interface ClaudeAnalysisResult {\n  analysis: {\n    relationshipOverview: string;\n    communicationPatterns: {\n      tikitakaAnalysis: string;\n      conversationFlow: string;\n      responsePatterns: string;\n    };\n    emotionalDynamics: {\n      sentimentTrends: string;\n      emotionalMoments: Array<{\n        type: string;\n        description: string;\n        context: string;\n      }>;\n      emotionalBalance: string;\n    };\n    psychologicalInsights: {\n      attachmentStyle: string;\n      conflictResolution: string;\n      intimacyPatterns: string;\n      communicationBarriers: string;\n    };\n    relationshipHealth: {\n      currentState: string;\n      strengths: string[];\n      concerns: string[];\n      trajectory: string;\n    };\n    practicalAdvice: {\n      immediateActions: string[];\n      longTermStrategies: string[];\n      communicationTips: string[];\n    };\n    conclusion: string;\n  };\n  metadata: {\n    analyzedMessages: number;\n    highPriorityCount: number;\n    mediumSampleCount: number;\n    analysisDepth: string;\n    processingTime: number;\n  };\n}\n\n/**\n * Claude 심층 분석 수행 (재시도 로직 포함)\n */\nexport async function performClaudeDeepAnalysis(\n  input: ClaudeInputPackage,\n  maxRetries: number = 3\n): Promise<ClaudeAnalysisResult> {\n  const startTime = Date.now();\n\n  // 안전한 값 추출\n  const totalTokens = input.tokenEstimate?.total || 0;\n  const highCount = Array.isArray(input.highMessages) ? input.highMessages.length : 0;\n  const mediumCount = Array.isArray(input.mediumSamples) ? input.mediumSamples.length : 0;\n\n  console.log('\\n=== Claude 심층 분석 시작 ===');\n  console.log(`토큰 추정: ${totalTokens.toLocaleString()}개`);\n  console.log(`HIGH 메시지: ${highCount}개`);\n  console.log(`MEDIUM 샘플: ${mediumCount}개\\n`);\n\n  // Claude API용 메시지 형식으로 변환\n  const userContent = formatUserContent(input);\n\n  // 재시도 로직\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      // Claude API 호출 (단일 호출로 전체 분석)\n      if (attempt > 1) {\n        console.log(`🔄 재시도 ${attempt}/${maxRetries}...`);\n      } else {\n        console.log('🤖 Claude API 호출 중...');\n      }\n      \n      const response = await anthropic.messages.create({\n        model: CLAUDE_MODEL,\n        max_tokens: 16000, // 9,500 토큰 목표, 여유있게 16K 설정\n        temperature: 0.7,\n        system: input.systemPrompt,\n        messages: [\n          {\n            role: 'user',\n            content: userContent,\n          },\n        ],\n      });\n\n      console.log('✅ Claude 응답 수신');\n\n      // 응답 안전하게 추출\n      const content = response.content;\n      if (!Array.isArray(content) || content.length === 0) {\n        console.warn('⚠️  Claude 응답에 content가 없음');\n        const analysis = createFallbackAnalysis('Claude 응답을 받지 못했습니다.');\n        const processingTime = Date.now() - startTime;\n        const analyzedMessages = input.relationshipContext?.statistics?.totalMessages || 0;\n\n        return {\n          analysis,\n          metadata: {\n            analyzedMessages,\n            highPriorityCount: highCount,\n            mediumSampleCount: mediumCount,\n            analysisDepth: 'failed',\n            processingTime,\n          },\n        };\n      }\n\n      // 모든 text 세그먼트 수집\n      const textSegments = content\n        .filter(block => block.type === 'text')\n        .map(block => block.text)\n        .filter(text => text && text.length > 0);\n\n      if (textSegments.length === 0) {\n        console.warn('⚠️  Claude 응답에 text 세그먼트가 없음');\n        const analysis = createFallbackAnalysis('Claude 응답에 텍스트가 포함되지 않았습니다.');\n        const processingTime = Date.now() - startTime;\n        const analyzedMessages = input.relationshipContext?.statistics?.totalMessages || 0;\n\n        return {\n          analysis,\n          metadata: {\n            analyzedMessages,\n            highPriorityCount: highCount,\n            mediumSampleCount: mediumCount,\n            analysisDepth: 'partial',\n            processingTime,\n          },\n        };\n      }\n\n      // 모든 텍스트 세그먼트 결합\n      const analysisText = textSegments.join('\\n\\n');\n\n      const analysis = parseClaudeResponse(analysisText);\n\n      const processingTime = Date.now() - startTime;\n\n      console.log(`⏱️  처리 시간: ${(processingTime / 1000).toFixed(1)}초`);\n      console.log('=== Claude 심층 분석 완료 ===\\n');\n\n      // 안전한 메타데이터 생성\n      const analyzedMessages = input.relationshipContext?.statistics?.totalMessages || 0;\n\n      return {\n        analysis,\n        metadata: {\n          analyzedMessages,\n          highPriorityCount: highCount,\n          mediumSampleCount: mediumCount,\n          analysisDepth: 'comprehensive',\n          processingTime,\n        },\n      };\n    } catch (error: any) {\n      // Rate limit 에러 처리\n      if (error.status === 429 && attempt < maxRetries) {\n        const retryAfter = parseInt(error.headers?.['retry-after'] || '5');\n        console.log(`⚠️  Rate limit 도달. ${retryAfter}초 후 재시도 (${attempt}/${maxRetries})...`);\n        await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n        continue;\n      }\n      \n      // 마지막 시도이거나 다른 에러인 경우\n      if (attempt === maxRetries) {\n        console.error('❌ Claude 분석 실패 (모든 재시도 소진):', error);\n        throw new Error(\n          `Claude 분석 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`\n        );\n      }\n      \n      // 일반 에러 - 짧은 대기 후 재시도\n      console.log(`⚠️  에러 발생. 3초 후 재시도 (${attempt}/${maxRetries})...`);\n      await new Promise(resolve => setTimeout(resolve, 3000));\n    }\n  }\n\n  // 여기 도달하면 모든 재시도 실패\n  throw new Error('Claude 분석 실패: 모든 재시도 소진');\n}\n\n/**\n * 사용자 메시지 내용 포맷팅\n */\nfunction formatUserContent(input: ClaudeInputPackage): string {\n  // 안전한 기본값 설정\n  const context = input.relationshipContext || {};\n  const type = context.type || '관계';\n  const purpose = context.purpose || '분석';\n  const participants = Array.isArray(context.participants) ? context.participants : [];\n  const participantsText = participants.length > 0 ? participants.join(' 과 ') : '참여자';\n  \n  const period = context.period || {};\n  const periodStart = period.start || '시작일';\n  const periodEnd = period.end || '종료일';\n  const duration = period.duration || '기간';\n  \n  const stats = context.statistics || {};\n  const totalMessages = stats.totalMessages || 0;\n  const filteredHigh = stats.filteredHigh || 0;\n  const filteredMedium = stats.filteredMedium || 0;\n  const averagePerDay = stats.averagePerDay || 0;\n\n  return `# 분석 개요\n\n**관계 유형**: ${type}\n**분석 목적**: ${purpose}\n**참여자**: ${participantsText}\n**분석 기간**: ${periodStart} ~ ${periodEnd} (${duration})\n\n## 데이터 규모\n- 전체 메시지: ${totalMessages.toLocaleString()}개\n- HIGH 중요 메시지: ${filteredHigh.toLocaleString()}개 (전체 분석)\n- MEDIUM 의미있는 메시지: ${filteredMedium.toLocaleString()}개 (샘플 분석)\n- 일평균 메시지: ${averagePerDay}개\n\n---\n\n# Gemini AI 거시적 분석 요약\n\nGemini가 ${totalMessages.toLocaleString()}개의 전체 메시지를 분석한 결과입니다:\n\n${JSON.stringify(input.geminiSummary, null, 2)}\n\n---\n\n# HIGH 중요 메시지 원문 (${input.highMessages?.length || 0}개)\n\n다음은 관계의 전환점, 갈등, 중요 의사결정, 감정 변화를 포함하는 핵심 메시지들입니다:\n\n${Array.isArray(input.highMessages) \n  ? input.highMessages.map(m => {\n      const index = m?.index ?? '?';\n      const date = m?.date || '날짜미상';\n      const user = m?.user || '사용자';\n      const message = m?.message || '';\n      return `[${index}] ${date} ${user}: ${message}`;\n    }).join('\\n')\n  : '메시지 없음'}\n\n---\n\n# MEDIUM 의미있는 메시지 샘플 (${input.mediumSamples?.length || 0}개)\n\n일상적이지만 의미 있는 대화, 계획, 중요 일상의 대표 샘플입니다:\n\n${Array.isArray(input.mediumSamples)\n  ? input.mediumSamples.map(m => {\n      const index = m?.index ?? '?';\n      const date = m?.date || '날짜미상';\n      const user = m?.user || '사용자';\n      const message = m?.message || '';\n      return `[${index}] ${date} ${user}: ${message}`;\n    }).join('\\n')\n  : '샘플 없음'}\n\n---\n\n# 관계 맥락\n\n${context.background || '관계 맥락 정보가 제공되지 않았습니다.'}\n\n---\n\n# 분석 요청\n\n위의 모든 정보를 종합하여 다음과 같은 심층 분석을 제공해주세요:\n\n1. **관계 전체 개요**: Gemini의 거시적 패턴과 HIGH 메시지의 미시적 뉘앙스를 결합한 종합 분석\n2. **커뮤니케이션 패턴**: 티키타카 분석, 대화 흐름, 응답 패턴\n3. **감정 역동성**: 감정 트렌드, 감정적 순간들, 감정 균형\n4. **심리학적 통찰**: 애착 유형, 갈등 해결 방식, 친밀감 패턴, 소통 장벽\n5. **관계 건강도**: 현재 상태, 강점, 우려사항, 향후 방향\n6. **실질적 조언**: 즉각 실행 가능한 행동, 장기 전략, 소통 팁\n7. **종합 결론**: 관계의 본질과 미래 전망\n\n**중요**: 구체적인 대화 예시를 인용하며 분석하고, 심리학적 관점에서 깊이 있는 통찰을 제공하세요.\n\n다음 JSON 형식으로 응답해주세요:\n\n\\`\\`\\`json\n{\n  \"relationshipOverview\": \"전체 관계에 대한 종합적 개요 (500자 이상)\",\n  \"communicationPatterns\": {\n    \"tikitakaAnalysis\": \"대화 리듬과 티키타카 패턴 분석\",\n    \"conversationFlow\": \"대화 흐름과 전개 방식\",\n    \"responsePatterns\": \"응답 패턴과 상호작용 스타일\"\n  },\n  \"emotionalDynamics\": {\n    \"sentimentTrends\": \"시간에 따른 감정 변화 추이\",\n    \"emotionalMoments\": [\n      {\n        \"type\": \"감정 유형 (예: 갈등, 화해, 애정표현)\",\n        \"description\": \"순간에 대한 설명\",\n        \"context\": \"대화 인용 및 맥락\"\n      }\n    ],\n    \"emotionalBalance\": \"두 사람의 감정 균형 분석\"\n  },\n  \"psychologicalInsights\": {\n    \"attachmentStyle\": \"애착 유형 분석 (안정형/회피형/불안형 등)\",\n    \"conflictResolution\": \"갈등 해결 패턴과 방식\",\n    \"intimacyPatterns\": \"친밀감 표현과 발전 패턴\",\n    \"communicationBarriers\": \"소통 장벽과 오해의 원인\"\n  },\n  \"relationshipHealth\": {\n    \"currentState\": \"현재 관계 상태 진단\",\n    \"strengths\": [\"강점 1\", \"강점 2\", \"강점 3\"],\n    \"concerns\": [\"우려사항 1\", \"우려사항 2\"],\n    \"trajectory\": \"관계의 향후 방향성\"\n  },\n  \"practicalAdvice\": {\n    \"immediateActions\": [\"즉시 실행 가능한 조언 1\", \"조언 2\", \"조언 3\"],\n    \"longTermStrategies\": [\"장기적 전략 1\", \"전략 2\"],\n    \"communicationTips\": [\"소통 팁 1\", \"팁 2\", \"팁 3\"]\n  },\n  \"conclusion\": \"종합 결론 및 마무리 조언 (300자 이상)\"\n}\n\\`\\`\\``;\n}\n\n/**\n * Claude 응답 파싱\n */\nfunction parseClaudeResponse(responseText: string): any {\n  try {\n    // JSON 추출\n    const jsonMatch = responseText.match(/```json\\s*([\\s\\S]*?)\\s*```/) || \n                      responseText.match(/\\{[\\s\\S]*\\}/);\n    \n    if (!jsonMatch) {\n      console.warn('⚠️  JSON 형식을 찾을 수 없어 기본 응답 생성');\n      return createFallbackAnalysis(responseText);\n    }\n\n    const jsonText = jsonMatch[1] || jsonMatch[0];\n    const parsed = JSON.parse(jsonText);\n\n    // 필수 필드 검증\n    if (!parsed.relationshipOverview || !parsed.communicationPatterns) {\n      console.warn('⚠️  필수 필드 누락, 기본값으로 보완');\n      return {\n        ...createFallbackAnalysis(responseText),\n        ...parsed,\n      };\n    }\n\n    return parsed;\n  } catch (error) {\n    console.error('JSON 파싱 오류:', error);\n    return createFallbackAnalysis(responseText);\n  }\n}\n\n/**\n * Fallback 분석 생성\n */\nfunction createFallbackAnalysis(rawText: string): any {\n  return {\n    relationshipOverview: rawText.substring(0, 500) || '분석 결과를 처리하는 중 문제가 발생했습니다.',\n    communicationPatterns: {\n      tikitakaAnalysis: '대화 패턴 분석 중...',\n      conversationFlow: '대화 흐름 분석 중...',\n      responsePatterns: '응답 패턴 분석 중...',\n    },\n    emotionalDynamics: {\n      sentimentTrends: '감정 트렌드 분석 중...',\n      emotionalMoments: [],\n      emotionalBalance: '감정 균형 분석 중...',\n    },\n    psychologicalInsights: {\n      attachmentStyle: '애착 유형 분석 중...',\n      conflictResolution: '갈등 해결 분석 중...',\n      intimacyPatterns: '친밀감 패턴 분석 중...',\n      communicationBarriers: '소통 장벽 분석 중...',\n    },\n    relationshipHealth: {\n      currentState: '관계 상태 진단 중...',\n      strengths: [],\n      concerns: [],\n      trajectory: '방향성 분석 중...',\n    },\n    practicalAdvice: {\n      immediateActions: [],\n      longTermStrategies: [],\n      communicationTips: [],\n    },\n    conclusion: rawText.substring(0, 300) || '분석을 완료하지 못했습니다.',\n  };\n}\n","size_bytes":14530},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/mobile-GuideVideoDialog.tsx":{"content":"// client/src/components/MobileGuideVideoDialog.tsx\n// 새로 생성할 파일\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface MobileGuideVideoDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function MobileGuideVideoDialog({\n  open,\n  onOpenChange,\n}: MobileGuideVideoDialogProps) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl bg-white\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl text-gray-900\">\n            📱 모바일 업로드 가이드 (1분)\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"aspect-video bg-gray-100 rounded-lg overflow-hidden\">\n          {/* YouTube 임베드 - 실제 영상 ID로 교체하세요 */}\n          {/* \n          <iframe\n            width=\"100%\"\n            height=\"100%\"\n            src=\"https://www.youtube.com/embed/YOUR_VIDEO_ID\"\n            title=\"Maltcha 모바일 업로드 가이드\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            className=\"w-full h-full\"\n          />\n          */}\n\n          {/* 영상이 아직 없다면 임시 콘텐츠 */}\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center p-8\">\n              <div className=\"text-6xl mb-4\">🎬</div>\n              <p className=\"text-gray-600 mb-4\">가이드 영상 준비 중입니다</p>\n              <div className=\"text-left bg-white p-4 rounded-lg shadow-sm\">\n                <h4 className=\"font-semibold mb-2 text-gray-900\">\n                  간단 가이드:\n                </h4>\n                <ol className=\"space-y-2 text-sm text-gray-700\">\n                  <li className=\"flex items-start\">\n                    <span className=\"font-semibold mr-2\">1.</span>\n                    <span>카카오톡 → 대화방 → 우측 상단 메뉴(≡)</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"font-semibold mr-2\">2.</span>\n                    <span>설정(⚙️) → 대화 내보내기</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"font-semibold mr-2\">3.</span>\n                    <span>내 이메일로 전송 선택</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"font-semibold mr-2\">4.</span>\n                    <span>이메일 앱에서 ZIP 파일 다운로드</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"font-semibold mr-2\">5.</span>\n                    <span>여기로 돌아와서 파일 업로드!</span>\n                  </li>\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-sm text-gray-600 mt-4 bg-blue-50 p-4 rounded-lg\">\n          <p className=\"font-semibold mb-2 text-gray-900\">📝 빠른 요약:</p>\n          <ol className=\"list-decimal list-inside space-y-1 ml-2\">\n            <li>카카오톡 → 대화방 → 메뉴(≡) → 설정</li>\n            <li>대화 내보내기 → 내 이메일로 전송</li>\n            <li>이메일에서 ZIP 파일 다운로드</li>\n            <li>브라우저 돌아와서 파일 업로드</li>\n          </ol>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3638},"server/services/claude-coach-tea.ts":{"content":"// Stage 5: 관계 코치 \"Tea\" (Claude Sonnet 4.5)\n// FBI 프로파일 + 심리치료사 분석을 받아 실천 가능한 조언 생성\n\nimport Anthropic from \"@anthropic-ai/sdk\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY || \"\",\n});\n\nconst CLAUDE_MODEL = \"claude-sonnet-4-20250514\";\n\n/**\n * Tea 코치 시스템 프롬프트 생성\n */\nfunction createTeaCoachSystemPrompt(userName: string, partnerName: string): string {\n  return `# 🎯 관계 코치 보고서 작성 프로토콜\n\n## 당신의 이중 정체성\n\n### 1. 전문가: 실전 관계 코치\n- 10년 경력, 3,000명 코칭\n- \"분석은 많은데 실천은 없다\" 문제 해결 전문\n- 구체적 대화 스크립트 설계 능력\n- 실패 대비 전략까지 제공\n\n### 2. 캐릭터: Maltcha AI 비서 \"Tea\"\n- 따뜻한 차 한 잔처럼 편안한 친구\n- 솔직하지만 상처주지 않는 조언자\n- \"해봐\" 대신 \"해보는 건 어때?\"\n- 실패해도 괜찮다고 안심시킴\n\n---\n\n## 당신의 미션\n\nFBI 프로파일 + 심리치료사 분석을 받아서\n**${userName}님이 내일 당장 할 수 있는 조언** 만들기\n\n**성공 기준:**\n\"대박 예리한데! 이렇게 해봐야지!\" 반응 유도\n\n---\n\n## 보고서 구조: 6개 인사이트\n\n각 인사이트는 구체적이고 실천 가능해야 합니다.\n\n### 인사이트 1: 💬 티키타카 지수 (250자+)\n- 점수 칭찬 (FBI 건강도 기반)\n- 구체적 증거 (메시지 인용)\n- 잘 맞는 부분 강조\n- 진심 어린 격려\n\n### 인사이트 2: 🎭 ${partnerName}님의 진짜 마음 (350자+)\n- FBI 발견 (행동 패턴)\n- 치료사 해석 (진짜 의미)\n- 오해 방지\n- AS-IS/TO-BE 스크립트\n\n### 인사이트 3: 📝 ${partnerName}님의 취향 치트키 (400자+)\n- 좋아하는 것 3개 (증거)\n- 싫어하는 것 3개 (증거)\n- 실전 팁 2개\n- 구체적 활용법\n\n### 인사이트 4: ⏰ 골든 타임 활용법 (300자+)\n- 깊은 대화 시간대\n- 심리학적 이유\n- 활용 전략\n- 실패 사례 경고\n\n### 인사이트 5: ⚠️ 레드 플래그 3가지 & 대처법 (500자+)\n- 위험 패턴 3개\n- 구체적 대안 (AS-IS/TO-BE)\n- 예상 효과\n- 실행 계획\n\n### 인사이트 6: 💡 Tea의 종합 진단 & 3주 플랜 (600자+)\n- 현재 상태 솔직히\n- 상대방 진짜 마음\n- 3주 실천 플랜\n- 희망적 마무리\n\n---\n\n## 출력 형식\n\nJSON 형식으로 다음을 제공:\n\n\\`\\`\\`json\n{\n  \"report_id\": \"report-{timestamp}\",\n  \"user\": \"${userName}\",\n  \"partner\": \"${partnerName}\",\n  \"generation_date\": \"YYYY-MM-DD\",\n  \n  \"insights\": [\n    {\n      \"id\": 1,\n      \"title\": \"💬 티키타카 지수: {score}점\",\n      \"description\": \"...(250자 이상)\",\n      \"evidence_used\": [145, 234, 456],\n      \"word_count\": 287\n    },\n    {\n      \"id\": 2,\n      \"title\": \"🎭 ${partnerName}님의 진짜 마음\",\n      \"description\": \"...(350자 이상)\",\n      \"evidence_used\": [234, 345, 456],\n      \"word_count\": 412\n    },\n    {\n      \"id\": 3,\n      \"title\": \"📝 ${partnerName}님의 취향 치트키\",\n      \"description\": \"...(400자 이상)\",\n      \"evidence_used\": [234, 567, 789],\n      \"word_count\": 456\n    },\n    {\n      \"id\": 4,\n      \"title\": \"⏰ 골든 타임 활용법\",\n      \"description\": \"...(300자 이상)\",\n      \"evidence_used\": [145, 278, 445],\n      \"word_count\": 334\n    },\n    {\n      \"id\": 5,\n      \"title\": \"⚠️ 레드 플래그 3가지 & 대처법\",\n      \"description\": \"...(500자 이상)\",\n      \"evidence_used\": [145, 234, 278, 389, 445],\n      \"word_count\": 578\n    },\n    {\n      \"id\": 6,\n      \"title\": \"💡 Tea의 종합 진단 & 3주 플랜\",\n      \"description\": \"...(600자 이상)\",\n      \"evidence_used\": [],\n      \"word_count\": 667\n    }\n  ],\n  \n  \"metadata\": {\n    \"total_insights\": 6,\n    \"total_words\": 2734,\n    \"analysis_depth\": \"comprehensive\",\n    \"actionability\": \"high\",\n    \"tone\": \"warm_and_hopeful\",\n    \"evidence_citations\": 15\n  }\n}\n\\`\\`\\`\n\n---\n\n## Tea의 작성 철학\n\n**1. 설명보다 행동**\n- ❌ \"소통이 중요해요\"\n- ✅ \"이렇게 말해보세요: '...'\"\n\n**2. 판단보다 이해**\n- ❌ \"잘못했어요\"\n- ✅ \"이해할 만한 반응이에요\"\n\n**3. 완벽보다 시도**\n- ❌ \"꼭 이렇게 하세요\"\n- ✅ \"60점만 해도 충분해요\"\n\n**4. 두려움보다 희망**\n- ❌ \"이대로면 끝이에요\"\n- ✅ \"회복 가능해요\"\n\n**5. 추상보다 구체**\n- ❌ \"배려하세요\"\n- ✅ \"'밥 먹었어?' 같은 작은 관심\"\n\n**6. 일반론보다 맞춤**\n- ❌ \"연인은 소통해야 해요\"\n- ✅ \"${userName}님과 ${partnerName}님은...\"\n\n---\n\n## 필수 요구사항\n\n### 내용 품질\n- 모든 인사이트에 FBI 증거 인용\n- 심리치료사 분석 반영\n- AS-IS/TO-BE 스크립트 (최소 3개)\n- 예상 효과 + 실패 대비\n- 구체적 행동 (추상적 조언 금지)\n- 숫자/통계 포함 (신뢰도 ↑)\n\n### 톤 & 스타일\n- 따뜻하고 공감적\n- 솔직하되 상처 안 줌\n- 희망적 마무리\n- 이모지 적절히 사용\n- \"~하세요\" 보다 \"~해보는 건 어때요?\"\n\n### 글자 수\n- 인사이트 1: 250자+\n- 인사이트 2: 350자+\n- 인사이트 3: 400자+\n- 인사이트 4: 300자+\n- 인사이트 5: 500자+\n- 인사이트 6: 600자+\n- 총합: 2,400자+\n\n---\n\n## 금지 사항\n\n❌ 학술 용어 (\"애착 이론\", \"방어기제\")\n❌ 일반론 (\"소통이 중요\")\n❌ 막연한 조언 (\"노력하세요\")\n❌ 비난 (\"잘못했어요\")\n❌ 절망 (\"끝났어요\")\n❌ 과도한 긍정 (\"완벽해요\")\n\n✅ 구체적 스크립트 (AS-IS/TO-BE)\n✅ 실제 메시지 인용\n✅ 숫자와 통계\n✅ 예상 효과\n✅ 실패 대비\n✅ 따뜻한 격려\n✅ 실행 가능한 계획\n\n---\n\n이제 ${userName}님을 위한 보고서를 작성하세요.\n\n**Remember:**\n당신은 단순한 AI가 아니라\n따뜻한 관계 코치 \"Tea\"입니다.\n\n${userName}님이 이 보고서를 읽고\n\"진짜 도움이 되네!\"라고 느끼도록\n진심을 담아 작성하세요.\n\n화이팅! ☕`;\n}\n\nexport interface TeaCoachInput {\n  fbiProfile: any; // Gemini Stage 3 output\n  therapistAnalysis: any; // Claude Stage 4 output\n  messageSamples: Array<{\n    index: number;\n    date: string;\n    user: string;\n    message: string;\n  }>;\n  userName: string;\n  partnerName: string;\n  statistics: {\n    totalMessages: number;\n    criticalCount: number;\n    mediumCount: number;\n    greenFlagCount?: number;\n    redFlagCount?: number;\n    healthScore?: number;\n  };\n}\n\nexport interface TeaCoachInsight {\n  id: number;\n  title: string;\n  description: string;\n  evidence_used: number[];\n  word_count: number;\n}\n\nexport interface TeaCoachReport {\n  report_id: string;\n  user: string;\n  partner: string;\n  generation_date: string;\n  insights: TeaCoachInsight[];\n  metadata: {\n    total_insights: number;\n    total_words: number;\n    analysis_depth: string;\n    actionability: string;\n    tone: string;\n    evidence_citations: number;\n  };\n}\n\n/**\n * Tea 코치 보고서 생성\n */\nexport async function generateTeaCoachReport(\n  input: TeaCoachInput\n): Promise<TeaCoachReport> {\n  const startTime = Date.now();\n\n  console.log('\\n=== Tea 코치 보고서 생성 시작 ===');\n  console.log(`사용자: ${input.userName}, 상대방: ${input.partnerName}`);\n  console.log(`메시지 샘플: ${input.messageSamples.length}개\\n`);\n\n  const systemPrompt = createTeaCoachSystemPrompt(input.userName, input.partnerName);\n\n  // User content 구성\n  const userContent = `# FBI 프로파일 & 심리치료사 분석\n\n## FBI 프로파일 요약\n${JSON.stringify(input.fbiProfile, null, 2)}\n\n## 심리치료사 분석\n${JSON.stringify(input.therapistAnalysis, null, 2)}\n\n## 통계\n- 전체 메시지: ${input.statistics.totalMessages}개\n- CRITICAL: ${input.statistics.criticalCount}개\n- MEDIUM: ${input.statistics.mediumCount}개\n${input.statistics.greenFlagCount ? `- GREEN_FLAG: ${input.statistics.greenFlagCount}개` : ''}\n${input.statistics.redFlagCount ? `- RED_FLAG: ${input.statistics.redFlagCount}개` : ''}\n${input.statistics.healthScore ? `- 관계 건강도: ${input.statistics.healthScore}/10` : ''}\n\n## 참고 메시지 샘플 (최근 100개)\n${input.messageSamples.map(m => \n  `[${m.index}] ${m.date} | ${m.user}: ${m.message}`\n).join('\\n')}\n\n---\n\n이제 ${input.userName}님을 위한 Tea 코치 보고서를 작성해주세요.`;\n\n  try {\n    console.log('🤖 Claude API 호출 중 (Tea 코치)...');\n\n    const response = await anthropic.messages.create({\n      model: CLAUDE_MODEL,\n      max_tokens: 16000,\n      system: systemPrompt,\n      messages: [\n        {\n          role: \"user\",\n          content: userContent,\n        },\n      ],\n    });\n\n    const responseText = response.content[0].type === \"text\" \n      ? response.content[0].text \n      : \"\";\n\n    console.log('✅ Tea 코치 응답 수신 완료');\n\n    // JSON 추출\n    let jsonText = responseText.trim();\n    if (jsonText.startsWith('```json')) {\n      jsonText = jsonText.replace(/```json\\n?/g, '').replace(/```\\n?$/g, '');\n    } else if (jsonText.startsWith('```')) {\n      jsonText = jsonText.replace(/```\\n?/g, '');\n    }\n\n    const report: TeaCoachReport = JSON.parse(jsonText);\n\n    const processingTime = Date.now() - startTime;\n    console.log(`✅ Tea 코치 보고서 생성 완료 (${(processingTime / 1000).toFixed(1)}초)`);\n    console.log(`   - 인사이트 수: ${report.insights.length}개`);\n    console.log(`   - 총 단어 수: ${report.metadata.total_words}자`);\n    console.log(`   - 증거 인용: ${report.metadata.evidence_citations}개\\n`);\n\n    return report;\n  } catch (error: any) {\n    console.error('❌ Tea 코치 보고서 생성 실패:', error.message);\n    throw new Error(`Failed to generate Tea coach report: ${error.message}`);\n  }\n}\n","size_bytes":9676},"server/services/conversation-sampler.ts":{"content":"// server/services/conversation-sampler.ts\n// AI가 분석할 대표적인 메시지 샘플을 추출하는 유틸리티\n\nimport emojiRegex from \"emoji-regex\";\nimport type { Message } from \"./data-processor\";\n\nexport interface MessageSamples {\n  recent: Message[];\n  longestExchanges: Message[];\n  emotional: Message[];\n  preferences: Message[];\n  appointments: Message[];\n  questions: Message[];\n  random: Message[];\n  byTimeOfDay: Message[];\n}\n\nexport function getSamplesForAnalysis(messages: Message[]): MessageSamples {\n  return {\n    // 최근 대화 (가장 중요)\n    recent: messages.slice(-300),\n    \n    // 가장 긴 대화 교환 (깊은 소통)\n    longestExchanges: getLongestConversations(messages, 15),\n    \n    // 감정적 대화 (긍정 + 부정)\n    emotional: getMostEmotionalMessages(messages, 20),\n    \n    // 키워드 기반 샘플\n    preferences: getMessagesWithKeywords(messages, \n      [\"좋아\", \"싫어\", \"사랑\", \"미워\", \"최고\", \"별로\"], 5),\n    appointments: getMessagesWithKeywords(messages,\n      [\"약속\", \"만나\", \"갈래\", \"시간\", \"언제\", \"어디\"], 5),\n    questions: getQuestions(messages, 15),\n    \n    // 랜덤 샘플 (편향 방지)\n    random: getRandomSample(messages, 30),\n    \n    // 시간대별 샘플 (아침/점심/저녁/밤 각 5개)\n    byTimeOfDay: getByTimeOfDay(messages, 5)\n  };\n}\n\nfunction getLongestConversations(messages: Message[], count: number): Message[] {\n  // 연속된 대화를 찾아서 가장 긴 순으로 정렬\n  const conversations: Message[][] = [];\n  let currentConv: Message[] = [];\n  let lastTime: Date | null = null;\n  \n  for (const msg of messages) {\n    const msgTime = new Date(msg.timestamp);\n    const timeDiff = lastTime ? \n      (msgTime.getTime() - lastTime.getTime()) / 1000 / 60 : 0;\n    \n    if (timeDiff < 10) { // 10분 이내면 같은 대화\n      currentConv.push(msg);\n    } else {\n      if (currentConv.length > 0) {\n        conversations.push([...currentConv]);\n      }\n      currentConv = [msg];\n    }\n    lastTime = msgTime;\n  }\n  \n  // 마지막 대화 추가\n  if (currentConv.length > 0) {\n    conversations.push(currentConv);\n  }\n  \n  return conversations\n    .sort((a, b) => b.length - a.length)\n    .slice(0, count)\n    .flat();\n}\n\nfunction getMostEmotionalMessages(messages: Message[], count: number): Message[] {\n  // 이모티콘이 많거나, 감정 키워드가 있는 메시지\n  const emotionalKeywords = [\n    \"사랑\", \"행복\", \"슬프\", \"화나\", \"보고싶\", \"그리워\",\n    \"!!!\", \"ㅠㅠ\", \"ㅜㅜ\", \"ㅎㅎ\", \"ㅋㅋㅋ\", \"ㅋㅋ\",\n    \"좋아\", \"싫어\", \"미안\", \"고마워\", \"감사\", \"축하\"\n  ];\n  \n  const regex = emojiRegex();\n  \n  const scored = messages.map(m => {\n    let score = 0;\n    \n    // 감정 키워드 점수\n    emotionalKeywords.forEach(k => {\n      if (m.content.includes(k)) score += 2;\n    });\n    \n    // 이모티콘 점수 (emoji-regex로 정확한 검출)\n    const emojiMatches = m.content.match(regex) || [];\n    score += Math.min(emojiMatches.length * 3, 15); // 최대 15점\n    \n    // 느낌표/물음표 점수\n    score += (m.content.match(/[!?]/g) || []).length;\n    \n    return { message: m, score };\n  });\n  \n  return scored\n    .sort((a, b) => b.score - a.score)\n    .slice(0, count)\n    .map(item => item.message);\n}\n\nfunction getMessagesWithKeywords(\n  messages: Message[], \n  keywords: string[], \n  perKeyword: number\n): Message[] {\n  const result: Message[] = [];\n  \n  for (const keyword of keywords) {\n    const matching = messages.filter(m => \n      m.content.toLowerCase().includes(keyword.toLowerCase())\n    );\n    result.push(...matching.slice(-perKeyword));\n  }\n  \n  // 중복 제거\n  const unique = Array.from(new Map(\n    result.map(m => [m.timestamp + m.content, m])\n  ).values());\n  \n  return unique;\n}\n\nfunction getQuestions(messages: Message[], count: number): Message[] {\n  const questions = messages.filter(m => \n    m.content.includes(\"?\") || \n    m.content.includes(\"?\") ||\n    /\\b(뭐|왜|어디|언제|누가|어떻게|무엇)\\b/.test(m.content)\n  );\n  \n  return questions.slice(-count);\n}\n\nfunction getRandomSample(messages: Message[], count: number): Message[] {\n  if (messages.length <= count) return messages;\n  \n  const result: Message[] = [];\n  const indices = new Set<number>();\n  \n  while (indices.size < count) {\n    const randomIndex = Math.floor(Math.random() * messages.length);\n    if (!indices.has(randomIndex)) {\n      indices.add(randomIndex);\n      result.push(messages[randomIndex]);\n    }\n  }\n  \n  return result.sort((a, b) => \n    new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n  );\n}\n\nfunction getByTimeOfDay(messages: Message[], perPeriod: number): Message[] {\n  const periods = {\n    morning: [] as Message[],   // 6-12시\n    afternoon: [] as Message[],  // 12-18시\n    evening: [] as Message[],    // 18-22시\n    night: [] as Message[]       // 22-6시\n  };\n  \n  for (const msg of messages) {\n    const hour = new Date(msg.timestamp).getHours();\n    \n    if (hour >= 6 && hour < 12) {\n      periods.morning.push(msg);\n    } else if (hour >= 12 && hour < 18) {\n      periods.afternoon.push(msg);\n    } else if (hour >= 18 && hour < 22) {\n      periods.evening.push(msg);\n    } else {\n      periods.night.push(msg);\n    }\n  }\n  \n  const result: Message[] = [];\n  \n  Object.values(periods).forEach(periodMessages => {\n    result.push(...periodMessages.slice(-perPeriod));\n  });\n  \n  return result;\n}\n\n// 샘플을 텍스트로 포맷팅\nexport function formatSamplesForAI(samples: MessageSamples): string {\n  let formatted = \"\";\n  \n  if (samples.recent.length > 0) {\n    formatted += \"=== 최근 대화 (가장 중요) ===\\n\";\n    formatted += samples.recent.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.longestExchanges.length > 0) {\n    formatted += \"=== 깊은 대화 교환 ===\\n\";\n    formatted += samples.longestExchanges.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.emotional.length > 0) {\n    formatted += \"=== 감정적인 순간들 ===\\n\";\n    formatted += samples.emotional.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.preferences.length > 0) {\n    formatted += \"=== 선호도 언급 ===\\n\";\n    formatted += samples.preferences.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.appointments.length > 0) {\n    formatted += \"=== 약속/일정 ===\\n\";\n    formatted += samples.appointments.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.questions.length > 0) {\n    formatted += \"=== 질문들 ===\\n\";\n    formatted += samples.questions.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.byTimeOfDay.length > 0) {\n    formatted += \"=== 시간대별 샘플 ===\\n\";\n    formatted += samples.byTimeOfDay.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n    formatted += \"\\n\\n\";\n  }\n  \n  if (samples.random.length > 0) {\n    formatted += \"=== 랜덤 샘플 (편향 방지) ===\\n\";\n    formatted += samples.random.map(m => \n      `${m.participant}: ${m.content}`\n    ).join(\"\\n\");\n  }\n  \n  return formatted;\n}\n","size_bytes":7373},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/FeedbackPopup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface FeedbackPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit?: (data: any) => void;\n}\n\nexport default function FeedbackPopup({\n  isOpen,\n  onClose,\n  onSubmit,\n}: FeedbackPopupProps) {\n  // 상태 관리\n  const [satisfaction, setSatisfaction] = useState<number | null>(null);\n  const [willingness, setWillingness] = useState<string | null>(null);\n  const [nps, setNps] = useState<number | null>(null);\n  const [channel, setChannel] = useState<string | null>(null);\n\n  // 조건부 질문 표시 상태\n  const [showDissatisfaction, setShowDissatisfaction] = useState(false);\n  const [showFreeReasons, setShowFreeReasons] = useState(false);\n\n  // 상세 답변\n  const [dissatisfactionReasons, setDissatisfactionReasons] = useState<\n    string[]\n  >([]);\n  const [freeReasons, setFreeReasons] = useState<string[]>([]);\n  const [openFeedback, setOpenFeedback] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n\n  // 만족도 변경 시\n  useEffect(() => {\n    if (satisfaction !== null && satisfaction <= 2) {\n      setShowDissatisfaction(true);\n    } else {\n      setShowDissatisfaction(false);\n      setDissatisfactionReasons([]);\n    }\n  }, [satisfaction]);\n\n  // 가격 의향 변경 시\n  useEffect(() => {\n    if (willingness === \"free\") {\n      setShowFreeReasons(true);\n    } else {\n      setShowFreeReasons(false);\n      setFreeReasons([]);\n    }\n  }, [willingness]);\n\n  // 체크박스 토글\n  const toggleCheckbox = (\n    array: string[],\n    setArray: React.Dispatch<React.SetStateAction<string[]>>,\n    value: string,\n  ) => {\n    if (array.includes(value)) {\n      setArray(array.filter((item: string) => item !== value));\n    } else {\n      setArray([...array, value]);\n    }\n  };\n\n  // 제출\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const feedbackData = {\n      satisfaction,\n      willingness,\n      nps,\n      channel,\n      dissatisfactionReasons: showDissatisfaction\n        ? dissatisfactionReasons\n        : null,\n      freeReasons: showFreeReasons ? freeReasons : null,\n      openFeedback: openFeedback || null,\n      email: email || null,\n      timestamp: Date.now(),\n    };\n\n    // onSubmit 콜백 호출\n    if (onSubmit) {\n      onSubmit(feedbackData);\n    }\n\n    alert(\"🎉 피드백 감사합니다!\");\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"feedback-container\">\n      <form onSubmit={handleSubmit} className=\"feedback-form\">\n        {/* 헤더 */}\n        <div className=\"feedback-header\">\n          <h2>💬 소중한 의견을 들려주세요</h2>\n          <p className=\"subtitle\">\n            4가지 질문만 답하시면\n            <br />\n            베타 테스터 특별 혜택을 받으실 수 있어요 (30초 소요)\n          </p>\n        </div>\n\n        {/* Q1: 만족도 */}\n        <div className=\"question-section\">\n          <label className=\"question-label\">\n            Q1. 분석 결과가 도움 되셨나요?\n          </label>\n\n          <div className=\"emoji-buttons\">\n            {[\n              { value: 5, emoji: \"😊\", label: \"매우\\n유용\" },\n              { value: 4, emoji: \"🙂\", label: \"유용\" },\n              { value: 3, emoji: \"😐\", label: \"보통\" },\n              { value: 2, emoji: \"😕\", label: \"별로\" },\n              { value: 1, emoji: \"😞\", label: \"전혀\" },\n            ].map(({ value, emoji, label }) => (\n              <button\n                key={value}\n                type=\"button\"\n                className={`emoji-btn ${satisfaction === value ? \"selected\" : \"\"}`}\n                onClick={() => setSatisfaction(value)}\n              >\n                <span className=\"emoji\">{emoji}</span>\n                <span className=\"label\">{label}</span>\n              </button>\n            ))}\n          </div>\n\n          {/* 조건부: 불만족 이유 */}\n          <AnimatePresence>\n            {showDissatisfaction && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.3 }}\n                className=\"conditional-section\"\n              >\n                <p className=\"conditional-label\">\n                  😔 어떤 점이 아쉬웠나요? (복수 선택)\n                </p>\n\n                {[\n                  \"분석이 부정확했어요\",\n                  \"새로운 인사이트가 부족해요\",\n                  \"내용이 너무 뻔했어요\",\n                  \"표현이 차갑게 느껴졌어요\",\n                  \"사용이 불편했어요\",\n                  \"기타\",\n                ].map((reason, idx) => (\n                  <motion.label\n                    key={idx}\n                    className=\"checkbox-item\"\n                    initial={{ opacity: 0, x: -10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: idx * 0.05 }}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={dissatisfactionReasons.includes(reason)}\n                      onChange={() =>\n                        toggleCheckbox(\n                          dissatisfactionReasons,\n                          setDissatisfactionReasons,\n                          reason,\n                        )\n                      }\n                    />\n                    {reason}\n                  </motion.label>\n                ))}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Q2: 가격 의향 */}\n        <div className=\"question-section\">\n          <label className=\"question-label\">\n            Q2. 이 분석을 매월 무제한으로 이용할 수 있다면,\n            <br />월 얼마까지 낼 수 있나요?\n          </label>\n\n          <div className=\"radio-group\">\n            {[\n              { value: \"free\", label: \"무료만 사용 (0원)\" },\n              { value: \"under_1k\", label: \"1,000원 미만\" },\n              { value: \"1-3k\", label: \"1,000-3,000원\" },\n              { value: \"3-5k\", label: \"3,000-5,000원\" },\n              { value: \"over_5k\", label: \"5,000원 이상\" },\n            ].map(({ value, label }) => (\n              <label key={value} className=\"radio-item\">\n                <input\n                  type=\"radio\"\n                  name=\"willingness\"\n                  value={value}\n                  checked={willingness === value}\n                  onChange={(e) => setWillingness(e.target.value)}\n                />\n                {label}\n              </label>\n            ))}\n          </div>\n\n          <p className=\"pricing-hint\">\n            💡 정식 출시 예정가: Core 2,900원 / Insight 4,900원\n          </p>\n\n          {/* 조건부: 무료 이유 */}\n          <AnimatePresence>\n            {showFreeReasons && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.3 }}\n                className=\"conditional-section\"\n              >\n                <p className=\"conditional-label\">\n                  🤔 무료를 선호하시는 이유는? (복수 선택)\n                </p>\n\n                {[\n                  \"분석이 기대에 못 미쳤어요\",\n                  \"한 번 체험이면 충분해요\",\n                  \"정기 구독이 부담돼요\",\n                  \"가격 대비 가치가 부족해요\",\n                  \"신뢰가 아직 부족해요\",\n                  \"기타\",\n                ].map((reason, idx) => (\n                  <motion.label\n                    key={idx}\n                    className=\"checkbox-item\"\n                    initial={{ opacity: 0, x: -10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: idx * 0.05 }}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={freeReasons.includes(reason)}\n                      onChange={() =>\n                        toggleCheckbox(freeReasons, setFreeReasons, reason)\n                      }\n                    />\n                    {reason}\n                  </motion.label>\n                ))}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Q3: NPS */}\n        <div className=\"question-section\">\n          <label className=\"question-label\">\n            Q3. 친구에게 추천하고 싶으신가요?\n          </label>\n\n          <div className=\"nps-buttons\">\n            {[\n              { value: 4, label: \"매우 추천 (10점)\" },\n              { value: 3, label: \"추천함 (8-9점)\" },\n              { value: 2, label: \"보통 (7점)\" },\n              { value: 1, label: \"글쎄 (4-6점)\" },\n              { value: 0, label: \"비추천 (0-3점)\" },\n            ].map(({ value, label }) => (\n              <button\n                key={value}\n                type=\"button\"\n                className={`nps-btn ${nps === value ? \"selected\" : \"\"}`}\n                onClick={() => setNps(value)}\n              >\n                {label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Q4: 유입 채널 */}\n        <div className=\"question-section\">\n          <label className=\"question-label\">\n            Q4. 어떤 채널에서 Maltcha를 알게 되셨나요?\n          </label>\n\n          <div className=\"radio-group\">\n            {[\n              \"친구 추천\",\n              \"SNS (인스타/스레드)\",\n              \"커뮤니티\",\n              \"검색\",\n              \"기타\",\n            ].map((ch) => (\n              <label key={ch} className=\"radio-item\">\n                <input\n                  type=\"radio\"\n                  name=\"channel\"\n                  value={ch}\n                  checked={channel === ch}\n                  onChange={(e) => setChannel(e.target.value)}\n                />\n                {ch}\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* 자유 의견 */}\n        <div className=\"question-section\">\n          <label className=\"question-label\">💭 한 줄 의견 (선택)</label>\n          <textarea\n            className=\"feedback-textarea\"\n            placeholder=\"칭찬/아쉬운 점 자유롭게 남겨주세요\"\n            value={openFeedback}\n            onChange={(e) => setOpenFeedback(e.target.value)}\n            rows={3}\n          />\n        </div>\n\n        {/* 얼리버드 */}\n        <div className=\"earlybird-section\">\n          <div className=\"earlybird-box\">\n            <h3>🎁 베타 테스터 특전</h3>\n            <p>\n              정식 출시 시 Insight(4,900원)를\n              <br />\n              <strong>990원/월에 평생 이용!</strong>\n              <br />\n              (80% 할인, 선착순 70명)\n            </p>\n            <input\n              type=\"email\"\n              className=\"email-input\"\n              placeholder=\"이메일 주소\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n        </div>\n\n        {/* 제출 버튼 */}\n        <button\n          type=\"submit\"\n          className=\"submit-btn\"\n          disabled={!satisfaction || !willingness || !nps || !channel}\n        >\n          제출하기\n        </button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":11651},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/mobile-warning-dialog.tsx":{"content":"// client/src/components/MobileWarningDialog.tsx\n// 전체 파일 교체\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface MobileWarningDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function MobileWarningDialog({\n  open,\n  onOpenChange,\n}: MobileWarningDialogProps) {\n  const handleContinueOnMobile = () => {\n    localStorage.setItem(\"mobile-warning-closed\", \"true\");\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md bg-white\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-center mb-2\"></div>\n          <DialogTitle className=\"text-center text-2xl text-gray-900\">\n            📱 모바일이신가요?\n          </DialogTitle>\n          <DialogDescription className=\"text-center pt-2 text-gray-600\">\n            모바일도 가능하지만, PC에서 하면 훨씬 빠르고 편해요!\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"bg-gradient-to-r from-blue-50 to-green-50 rounded-lg p-6 my-4\">\n          <div className=\"grid grid-cols-2 gap-6 text-center\">\n            <div>\n              <div className=\"text-4xl mb-2\">💻</div>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">2분</div>\n              <div className=\"text-sm text-gray-600\">간편 업로드</div>\n            </div>\n            <div>\n              <div className=\"text-4xl mb-2\">📱</div>\n              <div className=\"text-2xl font-bold text-orange-600 mb-1\">\n                10분+\n              </div>\n              <div className=\"text-sm text-gray-600\">복잡한 과정</div>\n            </div>\n          </div>\n        </div>\n\n        <Button\n          onClick={handleContinueOnMobile}\n          className=\"w-full text-white hover:opacity-90\"\n          style={{ backgroundColor: \"#8ba888\" }}\n        >\n          그래도 모바일로 할래요\n        </Button>\n\n        <p className=\"text-xs text-center text-gray-400 mt-2\">\n          💡 가능하면 PC로 다시 접속하는 걸 추천드려요\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2290},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { BarChart3, Clock, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport matchaImage from \"@assets/sung-shin-RJPRzSPEE-c-unsplash_1759319361113.jpg\";\nimport maltchaIcon from \"@assets/Maltcha Icon_1759388201617.jpg\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"sticky top-0 z-50 bg-white/80 dark:bg-black/80 backdrop-blur-md border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <img\n                src={maltchaIcon}\n                alt=\"Maltcha\"\n                className=\"w-8 h-8 rounded-lg\"\n              />\n              <span className=\"text-xl font-bold text-foreground\">Maltcha</span>\n            </div>\n            <div className=\"hidden md:flex items-center gap-8\">\n              <a\n                href=\"#features\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              >\n                기능\n              </a>\n              <a\n                href=\"#how-it-works\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              >\n                사용 방법\n              </a>\n              <Link href=\"/upload\">\n                <Button className=\"bg-primary text-primary-foreground hover:bg-secondary text-sm\">\n                  시작하기\n                </Button>\n              </Link>\n            </div>\n            <button\n              className=\"md:hidden text-foreground\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <svg\n                className=\"w-6 h-6\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 6h16M4 12h16M4 18h16\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 opacity-5\">\n          <div\n            className=\"absolute inset-0\"\n            style={{\n              backgroundImage:\n                \"radial-gradient(circle at 25px 25px, hsl(var(--primary)) 2%, transparent 0%), radial-gradient(circle at 75px 75px, hsl(var(--primary)) 2%, transparent 0%)\",\n              backgroundSize: \"100px 100px\",\n            }}\n          ></div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 md:py-32 relative\">\n          <div className=\"text-center fade-in-up\">\n            <div className=\"inline-flex items-center px-4 py-2 bg-accent rounded-full text-sm font-medium text-accent-foreground mb-8\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              AI 기반 대화 분석\n            </div>\n\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-foreground mb-6 leading-tight\">\n              소중한 사람과의 대화를\n              <br />\n              <span className=\"bg-gradient-to-r from-[#5a9d70] to-[#4a8d60] dark:from-[#94c9a9] dark:to-[#a8d5ba] bg-clip-text text-transparent\">깊이 있게 분석</span>하세요\n            </h1>\n\n            <p className=\"text-lg md:text-xl text-muted-foreground mb-10 max-w-3xl mx-auto\">\n              Maltcha AI를 통해 대화 내역을 분석해서\n              <br />\n              소중한 사람과 티키타카가 잘 되도록 합니다.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/upload\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] hover:from-[#94c9a9] hover:to-[#7ab899] dark:hover:from-[#3d6a4d] dark:hover:to-[#2d5a3d] text-[#1a3a2a] dark:text-white transform hover:scale-105 transition-all shadow-lg hover:shadow-xl font-semibold\"\n                  data-testid=\"button-start\"\n                >\n                  무료로 시작하기\n                  <svg\n                    className=\"inline-block w-5 h-5 ml-2\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M13 7l5 5m0 0l-5 5m5-5H6\"\n                    />\n                  </svg>\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          <div className=\"mt-16 md:mt-24\">\n            <img\n              src={matchaImage}\n              alt=\"Matcha tea ceremony - peaceful conversation analysis\"\n              className=\"rounded-2xl shadow-2xl w-full\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              주요 기능\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Maltcha AI로 대화의 숨겨진 인사이트를 발견하세요\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-card dark:bg-card rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all hover:-translate-y-1\">\n              <div className=\"w-12 h-12 bg-accent dark:bg-accent rounded-xl flex items-center justify-center mb-6\">\n                <BarChart3 className=\"w-6 h-6 text-primary dark:text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-foreground mb-3\">\n                의미 있는 데이터 분석\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                관계 관리에 필요한 데이터를 뽑아서 정리해요.\n              </p>\n            </div>\n\n            <div className=\"bg-card dark:bg-card rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all hover:-translate-y-1\">\n              <div className=\"w-12 h-12 bg-accent dark:bg-accent rounded-xl flex items-center justify-center mb-6\">\n                <svg\n                  className=\"w-6 h-6 text-primary dark:text-primary\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-foreground mb-3\">\n                상황 맥락적 심층 분석\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                대화의 맥락과 분위기를 분석해서 관계를 진단해요.\n              </p>\n            </div>\n\n            <div className=\"bg-card dark:bg-card rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all hover:-translate-y-1\">\n              <div className=\"w-12 h-12 bg-accent dark:bg-accent rounded-xl flex items-center justify-center mb-6\">\n                <Clock className=\"w-6 h-6 text-primary dark:text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-foreground mb-3\">\n                실생활 대화 비서\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                난감한 상황을 피해 더 나은 관계를 맺도록 도와요.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              사용 방법\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              3단계로 간편하게 대화를 분석하세요\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-primary-foreground\">\n                  1\n                </span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">\n                파일 업로드\n              </h3>\n              <p className=\"text-muted-foreground\">\n                대화 내보내기로 생성된 txt 파일을 업로드하세요.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-primary-foreground\">\n                  2\n                </span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">\n                Maltcha AI 분석\n              </h3>\n              <p className=\"text-muted-foreground\">\n                3단계 프롬프팅으로 대화를 깊이 분석합니다.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-primary-foreground\">\n                  3\n                </span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">\n                결과 확인\n              </h3>\n              <p className=\"text-muted-foreground\">\n                시각화된 차트와 인사이트로 대화 패턴을 확인하세요.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary/10\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n            대화는 서버에 저장되지 않아요\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            안전하게 기기에서 대화를 분석하세요.\n          </p>\n          <Link href=\"/upload\">\n            <Button\n              size=\"lg\"\n              className=\"bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] hover:from-[#94c9a9] hover:to-[#7ab899] dark:hover:from-[#3d6a4d] dark:hover:to-[#2d5a3d] text-[#1a3a2a] dark:text-white transform hover:scale-105 transition-all shadow-lg hover:shadow-xl font-semibold\"\n              data-testid=\"button-cta-start\"\n            >\n              무료로 시작하기\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card dark:bg-card border-t border-border py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-sm text-muted-foreground\">\n            <p>&copy; 2025 Maltcha. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":12149},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { parseKakaoTalkFile, calculateStats, generateChartData } from \"./services/kakao-parser\";\nimport { analyzeConversation } from \"./services/anthropic\";\nimport { processSummaryRequest } from \"./services/gemini-summarizer\";\nimport { performClaudeDeepAnalysis, type ClaudeInputPackage } from \"./services/claude-deep-analysis\";\nimport { generateTeaCoachReport, type TeaCoachInput } from \"./services/claude-coach-tea\";\nimport { processBatches, mergeFilterResults, type Message as FilterMessage } from \"./services/gemini-filter\";\nimport { summarizeWithGemini } from \"./services/gemini-summarizer\";\nimport { nanoid } from \"nanoid\";\n\nfunction generateId(): string {\n  return nanoid();\n}\n\nexport function registerRoutes(app: Express): Server {\n  app.post(\"/api/analyze\", async (req, res) => {\n    try {\n      const { \n        content, \n        primaryRelationship = \"친구\", \n        secondaryRelationships = [],\n        userPurpose\n      } = req.body;\n\n      if (!content) {\n        return res.status(400).json({ message: \"No content provided\" });\n      }\n\n      if (!userPurpose || typeof userPurpose !== 'string' || !userPurpose.trim()) {\n        return res.status(400).json({ message: \"분석 목적을 입력해주세요\" });\n      }\n\n      const analysis = await storage.createAnalysis({\n        fileName: \"conversation.txt\",\n        fileSize: content.length,\n      });\n\n      res.json({ analysisId: analysis.id });\n\n      processAnalysis(\n        analysis.id, \n        content, \n        primaryRelationship, \n        secondaryRelationships,\n        userPurpose\n      ).catch((error) => {\n        console.error(\"Analysis error:\", error);\n        storage.updateAnalysis(analysis.id, {\n          status: \"failed\",\n          error: error.message,\n        });\n      });\n    } catch (error: any) {\n      console.error(\"API error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analysis/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const analysis = await storage.getAnalysis(id);\n\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n\n      res.json(analysis);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Gemini 최종 요약 API\n  app.post(\"/api/summarize\", async (req, res) => {\n    try {\n      const { filterResult, relationshipType = \"친구\", userGoal = \"관계 분석\" } = req.body;\n\n      if (!filterResult) {\n        return res.status(400).json({ message: \"No filter result provided\" });\n      }\n\n      console.log(`Received filter result: ${filterResult.stats?.total || 0} messages`);\n\n      // Gemini API로 요약 생성 (서버 메모리에서만 처리)\n      const summary = await processSummaryRequest(filterResult, relationshipType, userGoal);\n\n      // 결과 반환 후 서버 메모리 자동 해제\n      res.json(summary);\n    } catch (error: any) {\n      console.error(\"Summarize API error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Claude 심층 분석 API\n  app.post(\"/api/analyze/claude\", async (req, res) => {\n    try {\n      const claudeInput: ClaudeInputPackage = req.body;\n\n      // 입력 검증\n      if (!claudeInput || typeof claudeInput !== 'object') {\n        return res.status(400).json({ message: \"Invalid request body\" });\n      }\n\n      if (!claudeInput.systemPrompt || typeof claudeInput.systemPrompt !== 'string') {\n        return res.status(400).json({ message: \"Missing or invalid systemPrompt\" });\n      }\n\n      if (!claudeInput.relationshipContext || typeof claudeInput.relationshipContext !== 'object') {\n        return res.status(400).json({ message: \"Missing or invalid relationshipContext\" });\n      }\n\n      if (!claudeInput.relationshipContext.type || !claudeInput.relationshipContext.purpose) {\n        return res.status(400).json({ message: \"Missing relationshipContext.type or purpose\" });\n      }\n\n      if (!Array.isArray(claudeInput.highMessages)) {\n        return res.status(400).json({ message: \"Missing or invalid highMessages array\" });\n      }\n\n      if (!Array.isArray(claudeInput.mediumSamples)) {\n        return res.status(400).json({ message: \"Missing or invalid mediumSamples array\" });\n      }\n\n      if (!claudeInput.tokenEstimate || typeof claudeInput.tokenEstimate !== 'object') {\n        return res.status(400).json({ message: \"Missing or invalid tokenEstimate\" });\n      }\n\n      // 토큰 제한 검증 (200K 이하)\n      const totalTokens = claudeInput.tokenEstimate.total || 0;\n      if (totalTokens <= 0 || totalTokens > 200000) {\n        return res.status(400).json({ \n          message: `Invalid token estimate: ${totalTokens} (must be between 1 and 200,000)` \n        });\n      }\n\n      console.log('\\n🔬 Claude 심층 분석 요청 수신');\n      console.log(`- 관계: ${claudeInput.relationshipContext.type}`);\n      console.log(`- 목적: ${claudeInput.relationshipContext.purpose}`);\n      console.log(`- HIGH 메시지: ${claudeInput.highMessages.length}개`);\n      console.log(`- MEDIUM 샘플: ${claudeInput.mediumSamples.length}개`);\n      console.log(`- 추정 토큰: ${totalTokens.toLocaleString()}개\\n`);\n\n      // Claude API로 심층 분석 수행 (서버 메모리에서만 처리)\n      const result = await performClaudeDeepAnalysis(claudeInput);\n\n      // 결과 반환 후 서버 메모리 자동 해제\n      res.json(result);\n\n      console.log('✅ Claude 분석 결과 전송 완료\\n');\n    } catch (error: any) {\n      console.error(\"Claude analysis API error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Claude 분석 중 오류가 발생했습니다\" \n      });\n    }\n  });\n\n  // Stage 5: Tea Coach 보고서 생성 API\n  app.post(\"/api/analyze/tea\", async (req, res) => {\n    try {\n      const teaInput: TeaCoachInput = req.body;\n\n      // 입력 검증\n      if (!teaInput || typeof teaInput !== 'object') {\n        return res.status(400).json({ message: \"Invalid request body\" });\n      }\n\n      if (!teaInput.fbiProfile || typeof teaInput.fbiProfile !== 'object') {\n        return res.status(400).json({ message: \"Missing or invalid fbiProfile\" });\n      }\n\n      if (!teaInput.therapistAnalysis || typeof teaInput.therapistAnalysis !== 'object') {\n        return res.status(400).json({ message: \"Missing or invalid therapistAnalysis\" });\n      }\n\n      if (!Array.isArray(teaInput.messageSamples)) {\n        return res.status(400).json({ message: \"Missing or invalid messageSamples array\" });\n      }\n\n      if (!teaInput.userName || !teaInput.partnerName) {\n        return res.status(400).json({ message: \"Missing userName or partnerName\" });\n      }\n\n      if (!teaInput.statistics || typeof teaInput.statistics !== 'object') {\n        return res.status(400).json({ message: \"Missing or invalid statistics\" });\n      }\n\n      console.log('\\n☕ Tea 코치 보고서 요청 수신');\n      console.log(`- 사용자: ${teaInput.userName}`);\n      console.log(`- 상대방: ${teaInput.partnerName}`);\n      console.log(`- 메시지 샘플: ${teaInput.messageSamples.length}개`);\n      console.log(`- 전체 메시지: ${teaInput.statistics.totalMessages}개\\n`);\n\n      // Tea Coach 보고서 생성 (서버 메모리에서만 처리)\n      const report = await generateTeaCoachReport(teaInput);\n\n      // 결과 반환 후 서버 메모리 자동 해제\n      res.json(report);\n\n      console.log('✅ Tea 코치 보고서 전송 완료\\n');\n    } catch (error: any) {\n      console.error(\"Tea coach API error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Tea 코치 보고서 생성 중 오류가 발생했습니다\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nasync function processAnalysis(\n  analysisId: string, \n  fileContent: string,\n  primaryRelationship: string = \"친구\",\n  secondaryRelationships: string[] = [],\n  userPurpose?: string\n) {\n  // 선택된 모든 관계 유형 조합\n  const allRelationships = [primaryRelationship, ...secondaryRelationships].filter(Boolean);\n  const relationshipText = allRelationships.join(\", \");\n  \n  console.log(`📋 선택된 관계: ${relationshipText} (${allRelationships.length}개)`);\n  \n  // 1. 파일 파싱\n  console.log(\"\\n========== 분석 시작 ==========\");\n  console.log(\"1단계: 파일 파싱 중...\");\n  const parsed = parseKakaoTalkFile(fileContent);\n  const stats = calculateStats(parsed.messages, parsed.participants);\n  const chartData = generateChartData(parsed.messages, parsed.participants);\n\n  // 초기 업데이트: messages와 userPurpose만 저장 (stats/charts는 최종 결과에서)\n  await storage.updateAnalysis(analysisId, {\n    messages: parsed.messages,\n    userPurpose,\n  });\n\n  // 2. Gemini API 키 확인 - 있으면 Gemini + Claude, 없으면 Claude-only\n  const hasGeminiKey = !!process.env.GEMINI_API_KEY;\n  \n  if (!hasGeminiKey) {\n    console.log(\"⚠️  GEMINI_API_KEY 없음 - Claude-only 모드로 전환\");\n    \n    // Claude-only 분석\n    const aiAnalysis = await analyzeConversation(\n      parsed.messages, \n      stats,\n      primaryRelationship,\n      secondaryRelationships,\n      { useMultiTurn: true, userPurpose }\n    );\n\n    await storage.updateAnalysis(analysisId, {\n      status: \"completed\",\n      stats: {\n        ...stats,\n        sentimentScore: aiAnalysis.sentimentScore,\n      },\n      charts: {\n        ...chartData,\n        sentimentDistribution: aiAnalysis.sentimentDistribution,\n      },\n      insights: aiAnalysis.insights,\n      deepAnalysis: aiAnalysis.deepAnalysis,\n    });\n\n    console.log(\"========== Claude-only 분석 완료 ==========\\n\");\n    return;\n  }\n\n  // ========== Gemini + Claude 파이프라인 ==========\n  console.log(\"========== Gemini + Claude 파이프라인 시작 ==========\");\n  \n  try {\n    // 2. 메시지를 배치로 분할 (2,000개씩)\n    console.log(`2단계: ${parsed.messages.length}개 메시지를 2,000개씩 배치로 분할...`);\n    const BATCH_SIZE = 2000;\n    const batches: FilterMessage[][] = [];\n    \n    const filterMessages: FilterMessage[] = parsed.messages.map((m, index) => ({\n      date: m.timestamp,\n      user: m.participant,\n      message: m.content,\n      index,\n    }));\n\n    for (let i = 0; i < filterMessages.length; i += BATCH_SIZE) {\n      batches.push(filterMessages.slice(i, i + BATCH_SIZE));\n    }\n    \n    console.log(`✓ 총 ${batches.length}개 배치 생성`);\n\n    // 3. Gemini로 중요도 필터링\n    console.log(`3단계: Gemini로 중요도 필터링 중... (목표: HIGH 7%, MEDIUM 13%)`);\n    const filterResults = await processBatches(\n      batches,\n      relationshipText,\n      userPurpose || '관계 분석'\n    );\n    \n    const mergedFilter = mergeFilterResults(filterResults);\n    console.log(`✓ 필터링 완료:`);\n    console.log(`  - HIGH: ${mergedFilter.high.length}개 (${(mergedFilter.high.length / mergedFilter.stats.total * 100).toFixed(1)}%)`);\n    console.log(`  - MEDIUM: ${mergedFilter.medium.length}개 (${(mergedFilter.medium.length / mergedFilter.stats.total * 100).toFixed(1)}%)`);\n    console.log(`  - LOW: ${mergedFilter.stats.low}개 (${(mergedFilter.stats.low / mergedFilter.stats.total * 100).toFixed(1)}%)`);\n\n    // 4. Stage 2: 배치별 요약 생성 (FBI 배치 요약 프로토콜)\n    console.log(`4단계: Stage 2 - 배치별 요약 생성 중...`);\n    const { summarizeAllBatches } = await import('./services/gemini-batch-summary');\n    const batchSummaries = await summarizeAllBatches(filterResults, parsed.messages);\n\n    // 5. Gemini로 전체 패턴 요약 생성\n    console.log(`5단계: Stage 3 - FBI 프로파일러 전체 요약 생성 중...`);\n    const geminiSummary = await summarizeWithGemini(\n      mergedFilter, \n      relationshipText,\n      userPurpose || '관계 분석',\n      batchSummaries\n    );\n    \n    // 응답 검증 (high_indices와 medium_sample 모두 확인)\n    if (!geminiSummary || !Array.isArray(geminiSummary.high_indices)) {\n      throw new Error('Gemini 요약 응답이 유효하지 않습니다: high_indices 누락');\n    }\n    \n    if (!Array.isArray(geminiSummary.medium_sample)) {\n      console.warn('⚠️  medium_sample이 배열이 아님, 빈 배열로 대체');\n      geminiSummary.medium_sample = [];\n    }\n    \n    // medium_sample 항목 검증\n    geminiSummary.medium_sample = geminiSummary.medium_sample.filter(sample => \n      sample && typeof sample.index === 'number' && sample.index >= 0\n    );\n    \n    console.log(`✓ 요약 완료:`);\n    console.log(`  - 타임라인: ${geminiSummary.timeline?.length || 0}개 이벤트`);\n    console.log(`  - 전환점: ${geminiSummary.turning_points?.length || 0}개`);\n    console.log(`  - HIGH 인덱스: ${geminiSummary.high_indices.length}개`);\n    console.log(`  - MEDIUM 샘플: ${geminiSummary.medium_sample.length}개 (검증 후)`);\n    \n    // Rate Limit 방지: Gemini 요약 후 60초 대기\n    console.log(`⏳ Stage 3 완료. Claude 심층 분석 준비를 위해 60초 대기 중...`);\n    await new Promise(resolve => setTimeout(resolve, 60000));\n\n    // 6. HIGH 원문 추출 및 배치 분할 (모두 분석하기)\n    console.log(`6단계: HIGH 원문 추출 및 배치 분할 중...`);\n    \n    // HIGH 메시지 전체 추출\n    const allHighMessages = geminiSummary.high_indices\n      .filter(index => index >= 0 && index < parsed.messages.length)\n      .map(index => ({\n        index,\n        date: parsed.messages[index].timestamp,\n        user: parsed.messages[index].participant,\n        message: parsed.messages[index].content,\n      }));\n    \n    console.log(`✓ HIGH 메시지 ${allHighMessages.length}개 추출 완료`);\n    \n    // Overhead 계산 (모든 배치 공통)\n    const systemPromptTokens = Math.ceil(500 / 2.5);\n    const geminiSummaryTokens = Math.ceil(JSON.stringify(geminiSummary).length / 2.5);\n    const contextTokens = Math.ceil(500 / 2.5);\n    const overheadTokens = systemPromptTokens + geminiSummaryTokens + contextTokens;\n    \n    console.log(`  - Overhead 토큰: ${overheadTokens.toLocaleString()} (시스템 프롬프트 + Gemini 요약 + 컨텍스트)`);\n    \n    // HIGH 메시지를 배치로 분할 (overhead 고려한 실제 예산 사용)\n    const TOTAL_BUDGET = 25000;\n    const MEDIUM_BUDGET = 5000; // MEDIUM 샘플용 (첫 배치에만)\n    const availableBudgetPerBatch = TOTAL_BUDGET - overheadTokens; // 메시지용 실제 예산\n    \n    const highBatches: typeof allHighMessages[] = [];\n    let currentBatch: typeof allHighMessages = [];\n    let currentBatchTokens = 0;\n    \n    for (const msg of allHighMessages) {\n      const msgTokens = Math.ceil(msg.message.length / 2.5);\n      \n      if (currentBatchTokens + msgTokens > availableBudgetPerBatch && currentBatch.length > 0) {\n        highBatches.push(currentBatch);\n        currentBatch = [msg];\n        currentBatchTokens = msgTokens;\n      } else {\n        currentBatch.push(msg);\n        currentBatchTokens += msgTokens;\n      }\n    }\n    \n    if (currentBatch.length > 0) {\n      highBatches.push(currentBatch);\n    }\n    \n    console.log(`✓ HIGH 메시지를 ${highBatches.length}개 배치로 분할 완료`);\n    console.log(`  예상 분석 시간: 약 ${highBatches.length + 1}분 (Gemini 대기 포함)`);\n    \n    // MEDIUM 샘플: 첫 번째 배치에만 추가 (남은 예산 범위 내에서)\n    const mediumSamples: typeof allHighMessages = [];\n    const candidateMedium = (geminiSummary.medium_sample || [])\n      .filter(sample => sample.index >= 0 && sample.index < parsed.messages.length);\n    \n    // 첫 번째 배치의 HIGH 토큰 계산\n    const firstBatchHighTokens = highBatches.length > 0\n      ? Math.ceil(highBatches[0].reduce((sum, m) => sum + m.message.length, 0) / 2.5)\n      : 0;\n    \n    // MEDIUM용 남은 예산 = 전체 예산 - overhead - 첫 배치 HIGH\n    let mediumBudget = TOTAL_BUDGET - overheadTokens - firstBatchHighTokens;\n    \n    for (const sample of candidateMedium) {\n      const msg = parsed.messages[sample.index];\n      const msgTokens = Math.ceil(msg.content.length / 2.5);\n      \n      if (mediumBudget - msgTokens >= 0) {\n        mediumSamples.push({\n          index: sample.index,\n          date: msg.timestamp,\n          user: msg.participant,\n          message: msg.content,\n        });\n        mediumBudget -= msgTokens;\n      } else {\n        break;\n      }\n    }\n    \n    console.log(`✓ MEDIUM 샘플 ${mediumSamples.length}개 추출 완료 (첫 배치에 포함, 예산 ${mediumBudget.toLocaleString()} 토큰 남음)`);\n\n    // 6. 배치별 Claude 심층 분석 (진행률 표시)\n    console.log(`7단계: Stage 4 - Claude 심층 분석 시작 (총 ${highBatches.length}개 배치)`);\n    \n    const participants = Array.from(new Set(parsed.messages.map(m => m.participant)));\n    const firstDate = parsed.messages[0]?.timestamp || '';\n    const lastDate = parsed.messages[parsed.messages.length - 1]?.timestamp || '';\n    \n    const allClaudeResults: any[] = [];\n    const totalBatches = highBatches.length;\n    \n    for (let i = 0; i < highBatches.length; i++) {\n      const batchNum = i + 1;\n      const highMessages = highBatches[i];\n      const batchMedium = i === 0 ? mediumSamples : []; // 첫 배치에만 MEDIUM 포함\n      \n      // 진행률 및 예상 시간 계산\n      const remainingBatches = totalBatches - batchNum;\n      const estimatedMinutes = remainingBatches + 1; // 각 배치 1분 + 대기 1분\n      \n      console.log(`\\n📊 배치 ${batchNum}/${totalBatches} 분석 중...`);\n      console.log(`   - HIGH 메시지: ${highMessages.length}개`);\n      console.log(`   - MEDIUM 샘플: ${batchMedium.length}개`);\n      console.log(`   - 예상 남은 시간: 약 ${estimatedMinutes}분`);\n      \n      const claudeInput: ClaudeInputPackage = {\n        systemPrompt: `당신은 대화 분석 전문가입니다.\n\n관계 유형: ${relationshipText}\n분석 목적: ${userPurpose || '관계 분석'}\n\n${batchNum > 1 ? `[배치 ${batchNum}/${totalBatches}] 핵심 메시지 추가 분석` : ''}\n\n아래 제공된 정보를 바탕으로 깊이 있는 관계 분석을 수행하세요:\n\n1. Gemini 요약: 전체 타임라인과 주요 전환점\n2. HIGH 메시지 전문: 관계의 핵심 순간들\n${batchNum === 1 ? '3. MEDIUM 샘플: 일상적이지만 의미 있는 대화들' : ''}\n\n분석 시 고려사항:\n- 관계의 진화 과정\n- 커뮤니케이션 패턴\n- 감정의 변화\n- 갈등과 해결 과정\n- 관계의 건강도\n\n최종 인사이트를 제공해주세요.`,\n        geminiSummary,\n        highMessages,\n        mediumSamples: batchMedium,\n        relationshipContext: {\n          type: relationshipText,\n          purpose: userPurpose || '관계 분석',\n          participants,\n          period: {\n            start: firstDate,\n            end: lastDate,\n            duration: `${Math.ceil((new Date(lastDate).getTime() - new Date(firstDate).getTime()) / (1000 * 60 * 60 * 24))}일`,\n          },\n          statistics: {\n            totalMessages: parsed.messages.length,\n            filteredHigh: allHighMessages.length,\n            filteredMedium: mediumSamples.length,\n            averagePerDay: Math.ceil(parsed.messages.length / Math.max(1, Math.ceil((new Date(lastDate).getTime() - new Date(firstDate).getTime()) / (1000 * 60 * 60 * 24)))),\n          },\n          background: `[배치 ${batchNum}/${totalBatches}] ${participants[0]}님과 ${participants[1] || '상대방'}님의 ${relationshipText} 관계 대화 분석입니다.`,\n        },\n        tokenEstimate: {\n          systemPrompt: Math.ceil(500 / 2.5),\n          geminiSummary: Math.ceil(JSON.stringify(geminiSummary).length / 2.5),\n          highMessages: Math.ceil(highMessages.reduce((sum, m) => sum + m.message.length, 0) / 2.5),\n          mediumSamples: Math.ceil(batchMedium.reduce((sum, m) => sum + m.message.length, 0) / 2.5),\n          relationshipContext: Math.ceil(500 / 2.5),\n          total: 0,\n        },\n      };\n      \n      claudeInput.tokenEstimate.total = \n        claudeInput.tokenEstimate.systemPrompt +\n        claudeInput.tokenEstimate.geminiSummary +\n        claudeInput.tokenEstimate.highMessages +\n        claudeInput.tokenEstimate.mediumSamples +\n        claudeInput.tokenEstimate.relationshipContext;\n      \n      console.log(`   - 총 토큰: ${claudeInput.tokenEstimate.total.toLocaleString()} (HIGH ${highMessages.length}개, MEDIUM ${batchMedium.length}개)`);\n      \n      // 안전 체크: 25K 초과 시 에러 (이론적으로 발생 불가, 방어 코드)\n      if (claudeInput.tokenEstimate.total > TOTAL_BUDGET) {\n        throw new Error(`배치 ${batchNum} 토큰 검증 실패: ${claudeInput.tokenEstimate.total} > ${TOTAL_BUDGET}. 배치 분할 로직 오류입니다.`);\n      }\n      \n      // Claude 분석\n      const claudeResult = await performClaudeDeepAnalysis(claudeInput);\n      allClaudeResults.push(claudeResult);\n      \n      console.log(`✓ 배치 ${batchNum}/${totalBatches} 분석 완료`);\n      \n      // 마지막 배치가 아니면 5초 대기 (rate limit)\n      if (i < highBatches.length - 1) {\n        console.log(`⏳ Rate limit 방지를 위해 5초 대기 중...`);\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      }\n    }\n    \n    console.log(`\\n✅ 모든 배치 분석 완료! 결과 병합 중...`);\n    \n    // 7. 배치 결과 병합 (첫 배치를 기본으로, 나머지는 통합)\n    const claudeResult = allClaudeResults[0];\n    \n    // practicalAdvice 병합 (모든 배치의 조언 통합)\n    if (allClaudeResults.length > 1) {\n      const allActions = new Set<string>();\n      const allStrategies = new Set<string>();\n      const allTips = new Set<string>();\n      \n      for (const result of allClaudeResults) {\n        (result.analysis.practicalAdvice?.immediateActions || []).forEach((a: string) => allActions.add(a));\n        (result.analysis.practicalAdvice?.longTermStrategies || []).forEach((s: string) => allStrategies.add(s));\n        (result.analysis.practicalAdvice?.communicationTips || []).forEach((t: string) => allTips.add(t));\n      }\n      \n      claudeResult.analysis.practicalAdvice = {\n        immediateActions: Array.from(allActions),\n        longTermStrategies: Array.from(allStrategies),\n        communicationTips: Array.from(allTips),\n      };\n      \n      console.log(`✓ ${allClaudeResults.length}개 배치 결과 병합 완료`);\n    }\n\n    // 8. Claude 결과를 storage 형식으로 변환\n    console.log(`8단계: Stage 4 결과 변환 및 저장 중...`);\n    \n    // practicalAdvice를 insights 형식으로 변환 (null guard 추가)\n    const immediateActions = Array.isArray(claudeResult.analysis.practicalAdvice?.immediateActions) \n      ? claudeResult.analysis.practicalAdvice.immediateActions.join(', ')\n      : '분석 진행 중입니다.';\n    \n    const longTermStrategies = Array.isArray(claudeResult.analysis.practicalAdvice?.longTermStrategies)\n      ? claudeResult.analysis.practicalAdvice.longTermStrategies.join(', ')\n      : '분석 진행 중입니다.';\n    \n    const communicationTips = Array.isArray(claudeResult.analysis.practicalAdvice?.communicationTips)\n      ? claudeResult.analysis.practicalAdvice.communicationTips.join(', ')\n      : '분석 진행 중입니다.';\n    \n    const insights = [\n      {\n        title: \"💡 즉시 실행 가능한 조언\",\n        description: immediateActions,\n      },\n      {\n        title: \"🎯 장기 전략\",\n        description: longTermStrategies,\n      },\n      {\n        title: \"💬 소통 팁\",\n        description: communicationTips,\n      },\n      {\n        title: \"🔍 관계 건강도\",\n        description: claudeResult.analysis.relationshipHealth?.currentState || '분석 진행 중입니다.',\n      },\n      {\n        title: \"✨ 전문가 결론\",\n        description: claudeResult.analysis.conclusion || '분석 진행 중입니다.',\n      },\n    ];\n\n    await storage.updateAnalysis(analysisId, {\n      status: \"completed\",\n      stats: {\n        ...stats,\n        sentimentScore: 5, // 기본값 (Gemini sentiment 없음)\n      },\n      charts: {\n        ...chartData,\n        sentimentDistribution: [], // Gemini sentiment 없음\n      },\n      insights,\n      deepAnalysis: claudeResult.analysis, // Claude 전체 분석 저장\n    });\n\n    console.log(\"✅ Stage 4 완료: Claude 심층 분석 저장\\n\");\n\n    // 9. Stage 5: Tea Coach 보고서 생성\n    console.log(`9단계: Stage 5 - Tea Coach 보고서 생성 중...`);\n    \n    try {\n      // 메시지 샘플 준비 (최근 100개)\n      const messageSamples = allHighMessages\n        .slice(-100)\n        .map(m => ({\n          index: m.index,\n          date: m.date,\n          user: m.user,\n          message: m.message,\n        }));\n\n      const teaInput: TeaCoachInput = {\n        fbiProfile: geminiSummary, // Stage 3: FBI Profiler 결과\n        therapistAnalysis: claudeResult.analysis, // Stage 4: Therapist 분석\n        messageSamples,\n        userName: participants[0] || \"사용자\",\n        partnerName: participants[1] || \"상대방\",\n        statistics: {\n          totalMessages: parsed.messages.length,\n          criticalCount: allHighMessages.length,\n          mediumCount: mediumSamples.length,\n          greenFlagCount: (geminiSummary as any).green_flags?.length || 0,\n          redFlagCount: (geminiSummary as any).red_flags?.length || 0,\n          healthScore: claudeResult.analysis.relationshipHealth?.healthScore || 5,\n        },\n      };\n\n      // Rate Limit 방지: Claude Stage 4 후 90초 대기\n      console.log(`⏳ Stage 4 완료. Stage 5 Tea Coach 준비를 위해 90초 대기 중...`);\n      await new Promise(resolve => setTimeout(resolve, 90000));\n\n      const teaReport = await generateTeaCoachReport(teaInput);\n\n      // Tea Coach 보고서 저장\n      await storage.updateAnalysis(analysisId, {\n        teaCoachReport: teaReport,\n      });\n\n      console.log(`✅ Stage 5 완료: Tea Coach 보고서 생성 및 저장`);\n      console.log(`   - 인사이트 수: ${teaReport.insights.length}개`);\n      console.log(`   - 총 단어 수: ${teaReport.metadata.total_words}자\\n`);\n    } catch (error: any) {\n      console.error(\"⚠️  Stage 5 Tea Coach 생성 실패 (비필수):\", error.message);\n      console.log(\"   분석은 Stage 4까지 완료되었습니다.\\n\");\n    }\n\n    console.log(\"========== 5단계 AI 파이프라인 완료 ==========\");\n    console.log(\"Stage 1: FBI 증거 수집 (Gemini 2.5 Flash)\");\n    console.log(\"Stage 3: FBI 프로파일러 (Gemini 2.5 Flash)\");\n    console.log(\"Stage 4: 관계 심리치료사 (Claude Sonnet 4.5)\");\n    console.log(\"Stage 5: 관계 코치 Tea (Claude Sonnet 4.5)\");\n    console.log(\"==============================================\\n\");\n    \n  } catch (error) {\n    // Gemini 파이프라인 실패 시 Claude-only로 fallback\n    console.error(\"⚠️  Gemini 파이프라인 실패, Claude-only로 전환:\", error);\n    \n    const aiAnalysis = await analyzeConversation(\n      parsed.messages, \n      stats,\n      primaryRelationship,\n      secondaryRelationships,\n      { useMultiTurn: true, userPurpose }\n    );\n\n    await storage.updateAnalysis(analysisId, {\n      status: \"completed\",\n      stats: {\n        ...stats,\n        sentimentScore: aiAnalysis.sentimentScore,\n      },\n      charts: {\n        ...chartData,\n        sentimentDistribution: aiAnalysis.sentimentDistribution,\n      },\n      insights: aiAnalysis.insights,\n      deepAnalysis: aiAnalysis.deepAnalysis,\n    });\n\n    console.log(\"========== Claude-only 분석 완료 (fallback) ==========\\n\");\n  }\n}\n","size_bytes":27811},"client/src/pages/loading.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { RefreshCw, Check } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { AnalysisResult } from \"@shared/schema\";\n\nconst TIPS = [\n  \"대화 분석 결과는 참여자 수, 메시지 양, 대화 기간에 따라 달라질 수 있어요.\",\n  \"대화 속에는 말하지 않은 마음도 담겨 있어요.\",\n  \"가장 많이 나눈 시간대에서 두 분의 리듬을 발견할 수 있어요.\",\n  \"반복되는 단어들은 관계의 온도를 말해줍니다.\",\n];\n\nexport default function Loading() {\n  const [, params] = useRoute(\"/loading/:id\");\n  const [, setLocation] = useLocation();\n  const [currentTip, setCurrentTip] = useState(0);\n  const analysisId = params?.id;\n\n  const { data: analysis } = useQuery<AnalysisResult>({\n    queryKey: ['/api/analysis', analysisId],\n    enabled: !!analysisId,\n    refetchInterval: (query) => {\n      const data = query.state.data;\n      return data?.status === 'completed' || data?.status === 'failed' ? false : 2000;\n    },\n  });\n\n  useEffect(() => {\n    if (analysis?.status === 'completed') {\n      setTimeout(() => {\n        setLocation(`/results/${analysisId}`);\n      }, 1000);\n    }\n  }, [analysis?.status, analysisId, setLocation]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTip((prev) => (prev + 1) % TIPS.length);\n    }, 4000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getProgress = () => {\n    if (!analysis) return { stage: '대화 파싱 중...', percentage: 0 };\n    \n    if (analysis.status === 'processing') {\n      if (!analysis.messages || analysis.messages.length === 0) {\n        return { stage: '1단계: 대화 파싱', percentage: 33 };\n      }\n      if (!analysis.insights) {\n        return { stage: '2단계: 감정 및 패턴 분석', percentage: 66 };\n      }\n      return { stage: '3단계: 인사이트 생성', percentage: 90 };\n    }\n    \n    if (analysis.status === 'completed') {\n      return { stage: '분석 완료!', percentage: 100 };\n    }\n    \n    return { stage: '대화 파싱 중...', percentage: 0 };\n  };\n\n  const progress = getProgress();\n  const stages = [\n    { name: '대화 내용 파싱', completed: progress.percentage >= 33 },\n    { name: '감정 및 패턴 분석', completed: progress.percentage >= 66 },\n    { name: '인사이트 생성', completed: progress.percentage >= 90 },\n  ];\n\n  if (analysis?.status === 'failed') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center px-4 bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-20 h-20 mx-auto mb-6 bg-destructive/10 rounded-full flex items-center justify-center\">\n            <svg className=\"w-10 h-10 text-destructive\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">분석 실패</h2>\n          <p className=\"text-muted-foreground mb-6\">{analysis.error || '알 수 없는 오류가 발생했습니다.'}</p>\n          <button\n            onClick={() => setLocation('/upload')}\n            className=\"px-6 py-3 bg-primary text-primary-foreground rounded-xl font-semibold hover:bg-secondary transition-colors\"\n            data-testid=\"button-retry\"\n          >\n            다시 시도하기\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-background\">\n      <div className=\"max-w-2xl w-full\">\n        {/* Loading Animation */}\n        <div className=\"text-center mb-12 fade-in-up\">\n          <div className=\"w-20 h-20 mx-auto mb-6 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] rounded-full opacity-20 animate-ping\"></div>\n            <div className=\"relative w-20 h-20 bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] rounded-full flex items-center justify-center shadow-lg\">\n              <RefreshCw className=\"w-10 h-10 text-[#1a3a2a] dark:text-white animate-spin\" />\n            </div>\n          </div>\n          <h2 className=\"text-2xl md:text-3xl font-bold mb-2\">\n            <span className=\"text-foreground\">대화 속 </span>\n            <span className=\"bg-gradient-to-r from-[#5a9d70] to-[#4a8d60] dark:from-[#94c9a9] dark:to-[#a8d5ba] bg-clip-text text-transparent\">마음</span>\n            <span className=\"text-foreground\">을 읽고 있어요</span>\n          </h2>\n          <p className=\"text-muted-foreground flex items-center justify-center gap-2\">\n            <span className=\"inline-block w-1.5 h-1.5 bg-[#a8d5ba] rounded-full\"></span>\n            차 한 잔 우려지는 시간만큼만 기다려주세요\n            <span className=\"inline-block w-1.5 h-1.5 bg-[#8bc9a3] rounded-full\"></span>\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"bg-card dark:bg-card rounded-2xl shadow-lg p-8 mb-8 fade-in-up\">\n          <div className=\"mb-6\">\n            <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n              <span data-testid=\"text-stage\">{progress.stage}</span>\n              <span data-testid=\"text-percentage\">{progress.percentage}%</span>\n            </div>\n            <div className=\"w-full bg-muted dark:bg-muted rounded-full h-3 overflow-hidden\">\n              <div \n                className=\"progress-bar-fill bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] h-full rounded-full transition-all duration-300 shadow-sm\" \n                style={{ width: `${progress.percentage}%` }}\n              ></div>\n            </div>\n          </div>\n\n          {/* Analysis Stages */}\n          <div className=\"space-y-3\">\n            {stages.map((stage, index) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${\n                  stage.completed \n                    ? 'bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32]' \n                    : 'border-2 border-border'\n                }`}>\n                  {stage.completed && (\n                    <Check className=\"w-4 h-4 text-[#1a3a2a] dark:text-white\" />\n                  )}\n                </div>\n                <span className={stage.completed ? 'text-foreground font-medium' : 'text-muted-foreground'}>\n                  {stage.name}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Tips Card */}\n        <div className=\"bg-accent/50 dark:bg-accent/50 rounded-xl p-6 fade-in-up tip-rotate\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] rounded-lg flex items-center justify-center flex-shrink-0 shadow-md\">\n              <svg className=\"w-5 h-5 text-[#1a3a2a] dark:text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n              </svg>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-1\">분석 팁</h4>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-tip\">\n                {TIPS[currentTip]}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7985},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module \"http\" {\n  interface IncomingMessage {\n    rawBody: unknown;\n  }\n}\napp.use(\n  express.json({\n    limit: \"10mb\",\n    verify: (req, _res, buf) => {\n      req.rawBody = buf;\n    },\n  }),\n);\napp.use(express.urlencoded({ extended: false, limit: \"10mb\" }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    },\n  );\n})();\n","size_bytes":2284},"replit.md":{"content":"# Maltcha - KakaoTalk Conversation Analysis Application\n\n## Overview\n\nMaltcha is a web application designed to analyze KakaoTalk conversation exports using AI-powered insights. Users upload their chat history files, and the application processes these conversations to generate statistics, visualizations, and AI-driven insights related to communication patterns, sentiment, and participant behavior. The application aims to provide a modern, responsive interface for uploading files, tracking analysis progress, and displaying comprehensive AI-generated results, including relationship assessments, communication dynamics, emotional analysis, and actionable insights.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack**: React with TypeScript, Vite, shadcn/ui (built on Radix UI and Tailwind CSS) for UI, Wouter for routing, and React Query for server state management.\n\n**UI/UX Decisions**: The application features a custom color palette with primary green tones and supports dark mode. It includes a redesigned, hierarchical 2-level accordion system for relationship selection, replacing a flat button list. The results display is comprehensive, showing all AI analysis content.\n\n**Data Visualization**: Recharts library is used for interactive charts (line, bar, area, pie) to visualize conversation metrics.\n\n### Backend Architecture\n\n**Runtime**: Node.js with TypeScript, using Express.js to serve API endpoints and static assets.\n\n**AI Pipeline**: A five-stage AI pipeline processes conversations:\n1.  **FBI Evidence Collector (Gemini 2.5 Flash)**: Filters messages into CRITICAL/MEDIUM/LOW categories based on an FBI CSI framework, handling Korean language nuances. Processes 2,000 messages per batch.\n2.  **FBI Batch Summarizer (Gemini 2.5 Flash)**: Compresses each batch into a 500-token summary, extracting pattern groups, top events, dominant tags, and batch characteristics. Enables efficient processing of large datasets (50 batches × 500 tokens = 25,000 tokens total).\n3.  **FBI Profiler (Gemini 2.5 Flash)**: Analyzes evidence metadata and batch summaries to create a comprehensive relationship profile using a 6-stage profiling process, distinguishing MO from Signature and reconstructing timelines.\n4.  **Relationship Therapist (Claude Sonnet 4.5)**: Provides psychological interpretation of patterns discovered by the FBI Profiler using a 6-stage clinical assessment framework, requiring message citations for all insights.\n5.  **Relationship Coach \"Tea\" (Claude Sonnet 4.5)**: Converts FBI profiles and therapist analysis into practical, immediately actionable advice with specific conversation scripts, 3-week action plans, and expected outcomes.\n\n**Asynchronous Processing**: Analysis operations run asynchronously, with the client polling for completion to handle long-running AI tasks without blocking.\n\n**Rate Limit Management**: A 90-second delay is implemented between Stage 4 (Claude Therapist) and Stage 5 (Tea Coach) to prevent API rate limit errors and ensure stable processing of large conversation datasets.\n\n**Error Handling**: Robust error handling is implemented for AI responses, rate limits, and data validation, ensuring analysis completion and preventing partial data persistence.\n\n### Data Storage Solutions\n\n**Hybrid Storage**: Utilizes in-memory storage (`MemStorage`) for temporary analysis results and a PostgreSQL database for persistent shareable links.\n\n**Schema Design**: Zod schemas are used for runtime validation of messages and analysis results. Drizzle ORM schemas define database tables, specifically `shared_results` for shareable links, including unique IDs, 24-hour expiration, and view counting.\n\n### Authentication and Authorization\n\nThe application currently operates without user authentication, designed for single-user, session-based analysis.\n\n## External Dependencies\n\n**AI Services**:\n-   **Google Generative AI (Gemini API)**: Used for the initial filtering and summarization stage (`gemini-2.5-flash`).\n-   **Anthropic (Claude API)**: Used for the deep analysis stage, generating comprehensive relationship insights (`claude-sonnet-4-20250514`).\n\n**Database**: Neon serverless PostgreSQL, configured via `@neondatabase/serverless` adapter for shareable links.\n\n**File Processing**: Server-side parsing of KakaoTalk export `.txt` files, supporting two common formats and handling Korean text encoding.\n\n**Environment Variables**: `DATABASE_URL`, `GEMINI_API_KEY`, `ANTHROPIC_API_KEY` (or `ANTHROPIC_API_KEY_ENV_VAR`), `NODE_ENV`.\n\n**Social Media Integration**: Open Graph tags and a dedicated OG image (`/og-image.jpg`) are used for consistent social media sharing previews.","size_bytes":4745},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/storage.ts":{"content":"import { type AnalysisResult, type InsertAnalysis } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  createAnalysis(analysis: InsertAnalysis): Promise<AnalysisResult>;\n  getAnalysis(id: string): Promise<AnalysisResult | undefined>;\n  updateAnalysis(id: string, data: Partial<AnalysisResult>): Promise<AnalysisResult>;\n}\n\nexport class MemStorage implements IStorage {\n  private analyses: Map<string, AnalysisResult>;\n\n  constructor() {\n    this.analyses = new Map();\n  }\n\n  async createAnalysis(insertAnalysis: InsertAnalysis): Promise<AnalysisResult> {\n    const id = randomUUID();\n    const analysis: AnalysisResult = {\n      id,\n      fileName: insertAnalysis.fileName,\n      fileSize: insertAnalysis.fileSize,\n      uploadedAt: new Date().toISOString(),\n      status: 'processing',\n      messages: [],\n    };\n    this.analyses.set(id, analysis);\n    return analysis;\n  }\n\n  async getAnalysis(id: string): Promise<AnalysisResult | undefined> {\n    return this.analyses.get(id);\n  }\n\n  async updateAnalysis(id: string, data: Partial<AnalysisResult>): Promise<AnalysisResult> {\n    const existing = this.analyses.get(id);\n    if (!existing) {\n      throw new Error('Analysis not found');\n    }\n    const updated = { ...existing, ...data };\n    this.analyses.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1386},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/upload.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileText, Check, ChevronDown } from \"lucide-react\";\nimport JSZip from \"jszip\";\nimport Papa from \"papaparse\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport MobileWarningDialog from \"@/components/mobile-warning-dialog\";\nimport MobileGuideVideoDialog from \"@/components/mobile-GuideVideoDialog\";\n\n// 관계 카테고리 데이터\nconst relationshipCategories = [\n  {\n    id: \"family-lover\",\n    label: \"가족 및 연인\",\n    emoji: \"❤️\",\n    subcategories: [\n      \"배우자\", \"연인\", \"부모\", \"자녀\", \"형제자매\", \"기타 친족\", \"전 연인/전 배우자\"\n    ]\n  },\n  {\n    id: \"friend\",\n    label: \"친구\",\n    emoji: \"👥\",\n    subcategories: [\n      \"가장 친한 친구\", \"친한 친구\", \"그냥 친구/지인\", \"동창\", \"파트너\"\n    ]\n  },\n  {\n    id: \"work-school\",\n    label: \"직장 및 학업\",\n    emoji: \"💼\",\n    subcategories: [\n      \"직장 상사/선배\", \"직장 동료\", \"직장 부하/후배\", \"거래처\",\n      \"선생님/교수님\", \"학교 선배\", \"학교 동기\", \"학교 후배\"\n    ]\n  },\n  {\n    id: \"social\",\n    label: \"사회적 관계\",\n    emoji: \"🤝\",\n    subcategories: [\n      \"동호회 회원\", \"이웃\", \"종교 단체\", \"온라인 커뮤니티\"\n    ]\n  },\n  {\n    id: \"public\",\n    label: \"공적 관계\",\n    emoji: \"👔\",\n    subcategories: [\n      \"고객/손님\", \"서비스 제공자\", \"면접관\", \"처음 보는 사람\"\n    ]\n  },\n  {\n    id: \"other\",\n    label: \"기타\",\n    emoji: \"⭐\",\n    subcategories: [\"직접 입력\"]\n  }\n];\n\nexport default function UploadPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [file, setFile] = useState<File | null>(null);\n  const [dragOver, setDragOver] = useState(false);\n  const [showMobileWarning, setShowMobileWarning] = useState(false);\n  const [showMobileGuide, setShowMobileGuide] = useState(false);\n\n  // 관계 선택 상태 (2단계 계층) - 다중 선택 가능\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [selectedRelationships, setSelectedRelationships] = useState<string[]>([]);\n  const [customRelationship, setCustomRelationship] = useState<string>(\"\");\n  \n  // 분석 목적 상태 관리\n  const [userPurpose, setUserPurpose] = useState<string>(\"\");\n\n  // 모바일 감지\n  useEffect(() => {\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    if (isMobile) {\n      setShowMobileWarning(true);\n    }\n  }, []);\n\n  // 대분류 선택 핸들러\n  const handleCategorySelect = (categoryId: string) => {\n    if (selectedCategory === categoryId) {\n      setSelectedCategory(null);\n    } else {\n      setSelectedCategory(categoryId);\n    }\n  };\n\n  // 소분류 선택 핸들러 - 토글 방식으로 여러 관계 선택 가능\n  const handleSubcategorySelect = (subcategory: string) => {\n    if (subcategory === \"직접 입력\") {\n      // 직접 입력은 다른 관계와 함께 선택 불가\n      setSelectedRelationships([\"직접 입력\"]);\n    } else {\n      // 이미 선택된 관계면 제거, 아니면 추가\n      setSelectedRelationships(prev => {\n        // 직접 입력이 선택되어 있으면 제거하고 새 관계 추가\n        const filtered = prev.filter(r => r !== \"직접 입력\");\n        \n        if (filtered.includes(subcategory)) {\n          return filtered.filter(r => r !== subcategory);\n        } else {\n          return [...filtered, subcategory];\n        }\n      });\n      setCustomRelationship(\"\");\n    }\n  };\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (data: {\n      content: string;\n      primaryRelationship: string;\n      secondaryRelationships: string[];\n      userPurpose?: string;\n    }) => {\n      const res = await apiRequest(\"POST\", \"/api/analyze\", data);\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setLocation(`/loading/${data.analysisId}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"분석 시작 실패\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = useCallback(\n    (selectedFile: File) => {\n      const fileName = selectedFile.name.toLowerCase();\n      const validExtensions = [\".txt\", \".csv\", \".zip\"];\n      const isValid = validExtensions.some((ext) => fileName.endsWith(ext));\n\n      if (!isValid) {\n        toast({\n          title: \"지원하지 않는 파일 형식\",\n          description: \"txt, csv, zip 파일만 업로드 가능합니다.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"파일 크기 초과\",\n          description: \"파일 크기는 10MB를 초과할 수 없습니다.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setFile(selectedFile);\n    },\n    [toast],\n  );\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      setDragOver(false);\n\n      const droppedFile = e.dataTransfer.files[0];\n      if (droppedFile) {\n        handleFileSelect(droppedFile);\n      }\n    },\n    [handleFileSelect],\n  );\n\n  const handleFileInput = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const selectedFile = e.target.files?.[0];\n      if (selectedFile) {\n        handleFileSelect(selectedFile);\n      }\n    },\n    [handleFileSelect],\n  );\n\n  const processZipFile = async (file: File): Promise<{ content: string; fileName: string }> => {\n    try {\n      const zip = new JSZip();\n      const zipContent = await zip.loadAsync(file);\n\n      const textFiles = Object.keys(zipContent.files).filter(\n        (name) =>\n          (name.toLowerCase().endsWith(\".txt\") ||\n            name.toLowerCase().endsWith(\".csv\")) &&\n          !zipContent.files[name].dir,\n      );\n\n      if (textFiles.length === 0) {\n        throw new Error(\"zip 파일 내에 txt 또는 csv 파일을 찾을 수 없습니다.\");\n      }\n\n      const fileName = textFiles[0];\n      const fileContent = await zipContent.files[fileName].async(\"text\");\n\n      toast({\n        title: \"zip 파일 처리 완료\",\n        description: `${fileName} 파일을 추출했습니다.`,\n      });\n\n      return { content: fileContent, fileName };\n    } catch (error: any) {\n      throw new Error(error.message || \"zip 파일 처리 중 오류가 발생했습니다.\");\n    }\n  };\n\n  const processCsvFile = (content: string): string => {\n    const parsed = Papa.parse(content, { header: false });\n    const rows = parsed.data as string[][];\n\n    const txtLines = rows\n      .filter((row) => row.length >= 3)\n      .map((row) => {\n        const [date, name, ...messageParts] = row;\n        const message = messageParts.join(\",\");\n        return `${date}, ${name} : ${message}`;\n      });\n\n    return txtLines.join(\"\\n\");\n  };\n\n  const handleAnalyze = async () => {\n    if (!file) {\n      toast({\n        title: \"파일을 선택해주세요\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // 관계 선택 검증 (다중 선택)\n    const finalRelationships = selectedRelationships.includes(\"직접 입력\")\n      ? [customRelationship.trim()]\n      : selectedRelationships;\n\n    if (finalRelationships.length === 0 || finalRelationships.some(r => !r)) {\n      toast({\n        title: \"관계를 선택해주세요\",\n        description: \"대화 상대와의 관계를 최소 1개 이상 선택해주세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // 분석 목적 필수 검증\n    if (!userPurpose.trim()) {\n      toast({\n        title: \"분석 목적을 입력해주세요\",\n        description: \"더 나은 분석 결과를 위해 목적을 작성해주세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      let fileContent = \"\";\n      let fileName = file.name;\n\n      if (file.name.toLowerCase().endsWith(\".zip\")) {\n        const result = await processZipFile(file);\n        fileContent = result.content;\n        fileName = result.fileName;\n      } else {\n        fileContent = await file.text();\n      }\n\n      if (fileName.toLowerCase().endsWith(\".csv\")) {\n        fileContent = processCsvFile(fileContent);\n      }\n\n      analyzeMutation.mutate({\n        content: fileContent,\n        primaryRelationship: finalRelationships[0],\n        secondaryRelationships: finalRelationships.slice(1),\n        userPurpose,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"파일 처리 실패\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveFile = () => {\n    setFile(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4\">\n      <MobileWarningDialog\n        open={showMobileWarning}\n        onOpenChange={setShowMobileWarning}\n      />\n\n      <MobileGuideVideoDialog\n        open={showMobileGuide}\n        onOpenChange={setShowMobileGuide}\n      />\n\n      <div className=\"max-w-3xl mx-auto\">\n        {/* Header - 말차 브랜드 포인트 */}\n        <div className=\"text-center mb-12 fade-in-up\">\n          <h1 className=\"text-4xl font-bold mb-4\">\n            <span className=\"text-foreground\">대화 파일 </span>\n            <span className=\"bg-gradient-to-r from-[#5a9d70] to-[#4a8d60] dark:from-[#94c9a9] dark:to-[#a8d5ba] bg-clip-text text-transparent\">\n              업로드\n            </span>\n          </h1>\n          <p className=\"text-muted-foreground flex items-center justify-center gap-2\">\n            <span className=\"inline-block w-2 h-2 bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] rounded-full\"></span>\n            Maltcha AI를 통해 대화를 깊게 분석해보세요\n            <span className=\"inline-block w-2 h-2 bg-gradient-to-r from-[#8bc9a3] to-[#a8d5ba] rounded-full\"></span>\n          </p>\n        </div>\n\n        {/* Relationship Type Selection */}\n        {!file && (\n          <div className=\"bg-card dark:bg-card rounded-2xl shadow-lg p-8 mb-8 fade-in-up\">\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              대화 상대와의 관계를 선택해주세요 <span className=\"text-[#8bc9a3] dark:text-[#a8d5ba]\">*</span>\n            </label>\n            <p className=\"text-xs text-muted-foreground mb-4\">\n              대분류를 선택하고, 구체적인 관계를 고르세요\n            </p>\n\n            <div className=\"space-y-3\">\n              {relationshipCategories.map((category) => (\n                <div key={category.id}>\n                  {/* 대분류 버튼 */}\n                  <button\n                    type=\"button\"\n                    onClick={() => handleCategorySelect(category.id)}\n                    className={`w-full p-4 rounded-xl border-2 transition-all duration-200\n                      flex items-center justify-between\n                      ${selectedCategory === category.id\n                        ? \"border-primary bg-primary/5\"\n                        : \"border-border hover:border-primary/50 hover:bg-accent/5\"\n                      }`}\n                    data-testid={`category-${category.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-2xl\">{category.emoji}</span>\n                      <span className=\"font-medium text-foreground\">{category.label}</span>\n                    </div>\n                    <ChevronDown\n                      className={`w-5 h-5 text-muted-foreground transition-transform duration-200 \n                        ${selectedCategory === category.id ? \"rotate-180\" : \"\"}`}\n                    />\n                  </button>\n\n                  {/* 소분류 옵션 (아코디언) */}\n                  {selectedCategory === category.id && (\n                    <div className=\"mt-2 p-4 bg-accent/10 rounded-lg space-y-2 animate-in fade-in slide-in-from-top-2 duration-200\">\n                      {category.subcategories.map((subcategory) => (\n                        <button\n                          key={subcategory}\n                          type=\"button\"\n                          onClick={() => handleSubcategorySelect(subcategory)}\n                          className={`w-full p-3 rounded-lg text-left transition-all duration-150\n                            ${selectedRelationships.includes(subcategory)\n                              ? \"bg-primary text-primary-foreground font-medium\"\n                              : \"bg-background hover:bg-accent text-foreground\"\n                            }`}\n                          data-testid={`subcategory-${subcategory}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <span>{subcategory}</span>\n                            {selectedRelationships.includes(subcategory) && (\n                              <Check className=\"w-4 h-4\" />\n                            )}\n                          </div>\n                        </button>\n                      ))}\n\n                      {/* 직접 입력 필드 */}\n                      {selectedRelationships.includes(\"직접 입력\") && (\n                        <div className=\"mt-3 animate-in fade-in slide-in-from-top-2 duration-200\">\n                          <input\n                            type=\"text\"\n                            value={customRelationship}\n                            onChange={(e) => setCustomRelationship(e.target.value)}\n                            placeholder=\"관계를 입력하세요 (예: 사촌)\"\n                            className=\"w-full p-3 rounded-lg border-2 border-primary bg-background \n                              text-foreground placeholder:text-muted-foreground\n                              focus:outline-none focus:ring-2 focus:ring-primary/20\"\n                            data-testid=\"input-custom-relationship\"\n                          />\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* 선택된 관계 표시 - 말차 컬러로 강조 */}\n            {selectedRelationships.length > 0 && (\n              <div className=\"mt-6 p-5 bg-gradient-to-br from-[#a8d5ba] to-[#94c9a9] dark:from-[#2d5a3d] dark:to-[#234a32] rounded-xl shadow-md border-2 border-[#8bc9a3] dark:border-[#3d6a4d] animate-in fade-in slide-in-from-bottom-2 duration-300\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Check className=\"w-5 h-5 text-[#1a3a2a] dark:text-white\" />\n                  <p className=\"text-base font-bold text-[#1a3a2a] dark:text-white\">\n                    선택된 관계 ({selectedRelationships.length}개)\n                  </p>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedRelationships.map((rel, idx) => {\n                    const displayText = rel === \"직접 입력\" \n                      ? customRelationship || \"직접 입력 중...\" \n                      : rel;\n                    return (\n                      <div\n                        key={idx}\n                        className=\"inline-flex items-center gap-1.5 px-4 py-2 bg-white/90 dark:bg-[#1a3a2a]/90 rounded-full border border-white/50 dark:border-[#3d6a4d] shadow-sm\"\n                      >\n                        <span className=\"text-sm font-medium text-[#2d5a3d] dark:text-[#a8d5ba]\">\n                          {displayText}\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Analysis Purpose Input - 항상 표시 */}\n        <div className=\"bg-card dark:bg-card rounded-2xl shadow-lg p-8 mb-8 fade-in-up\">\n          <label htmlFor=\"purpose-input\" className=\"block text-sm font-medium text-foreground mb-2\">\n            대화에서 무엇이 알고 싶나요? <span className=\"text-[#8bc9a3] dark:text-[#a8d5ba]\">*</span>\n          </label>\n          <p className=\"text-xs text-muted-foreground mb-4\">\n            분석 목적을 자유롭게 작성해주세요 (필수)\n          </p>\n          <textarea\n            id=\"purpose-input\"\n            value={userPurpose}\n            onChange={(e) => setUserPurpose(e.target.value)}\n            placeholder=\"예: 우리 관계의 친밀도를 알고 싶어요 / 대화 패턴을 분석하고 싶어요\"\n            required\n            className=\"w-full min-h-[120px] p-4 rounded-xl border-2 border-border \n                      bg-background text-foreground resize-none\n                      focus:outline-none focus:border-primary\n                      placeholder:text-muted-foreground\n                      transition-colors\"\n            data-testid=\"input-purpose\"\n          />\n          {userPurpose && (\n            <div className=\"mt-3 p-3 bg-accent/20 rounded-lg\">\n              <p className=\"text-xs text-muted-foreground\">\n                💡 AI가 이 목적에 맞춰 대화를 분석합니다\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Upload Zone */}\n        <div className=\"bg-card dark:bg-card rounded-2xl shadow-lg p-8 mb-8 fade-in-up\">\n          <div\n            className={`rounded-xl p-12 text-center cursor-pointer transition-all border-2 border-dashed ${\n              dragOver\n                ? \"border-primary bg-primary/5 scale-105\"\n                : \"border-border hover:border-primary/50\"\n            }`}\n            onDrop={handleDrop}\n            onDragOver={(e) => {\n              e.preventDefault();\n              setDragOver(true);\n            }}\n            onDragLeave={() => setDragOver(false)}\n            onClick={() => document.getElementById(\"file-input\")?.click()}\n            data-testid=\"upload-zone\"\n          >\n            {file ? (\n              <div className=\"space-y-4\">\n                <FileText className=\"w-16 h-16 mx-auto text-primary\" />\n                <div>\n                  <p className=\"text-lg font-semibold text-foreground\">\n                    {file.name}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {(file.size / 1024).toFixed(2)} KB\n                  </p>\n                </div>\n                <Button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleRemoveFile();\n                  }}\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  data-testid=\"button-remove-file\"\n                >\n                  파일 제거\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Upload className=\"w-16 h-16 mx-auto text-[#a8d5ba] dark:text-[#94c9a9]\" />\n                  <div className=\"absolute -bottom-1 left-1/2 -translate-x-1/2 w-20 h-20 bg-gradient-to-r from-[#a8d5ba]/20 to-[#8bc9a3]/20 blur-xl rounded-full\"></div>\n                </div>\n                <div>\n                  <p className=\"text-lg font-semibold text-foreground\">\n                    파일을 드래그하거나 클릭하여 업로드\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    txt, csv, zip 파일 지원 (최대 10MB)\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            accept=\".txt,.csv,.zip\"\n            onChange={handleFileInput}\n            className=\"hidden\"\n            data-testid=\"input-file\"\n          />\n\n          {file && (\n            <div className=\"mt-6\">\n              <Button\n                onClick={handleAnalyze}\n                disabled={analyzeMutation.isPending}\n                className=\"w-full bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] hover:from-[#94c9a9] hover:to-[#7ab899] dark:hover:from-[#3d6a4d] dark:hover:to-[#2d5a3d] text-[#1a3a2a] dark:text-white text-lg py-6 shadow-lg hover:shadow-xl transition-all duration-200 font-semibold\"\n                data-testid=\"button-analyze\"\n              >\n                {analyzeMutation.isPending ? (\n                  <>\n                    <div className=\"w-5 h-5 border-2 border-[#1a3a2a] dark:border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                    분석 시작 중...\n                  </>\n                ) : (\n                  \"분석 시작하기\"\n                )}\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Mobile Guide Button - Mobile Only */}\n        <div className=\"mb-8 fade-in-up block md:hidden\">\n          <Button\n            onClick={() => setShowMobileGuide(true)}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-full\"\n            data-testid=\"button-mobile-guide\"\n          >\n            📱 모바일 가이드 보기\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21437},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/utils/resultMerger.ts":{"content":"export interface FilteredMessage {\n  date: string;\n  user: string;\n  message: string;\n  index: number;\n  importance: 'HIGH' | 'MEDIUM';\n  reason: string;\n}\n\nexport interface FilterResult {\n  high: FilteredMessage[];\n  medium: FilteredMessage[];\n  stats: {\n    total: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\nexport interface MergedResult {\n  high: FilteredMessage[];\n  medium: FilteredMessage[];\n  all: FilteredMessage[];\n  stats: {\n    total: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\n/**\n * 브라우저에서 배치 결과 자동 병합\n * - n개 배치 결과 병합\n * - 중복 제거 (인덱스 기준)\n * - 인덱스 기준 정렬\n * - HIGH/MEDIUM 분리 저장\n */\nexport function mergeBatchResults(results: FilterResult[]): MergedResult {\n  // 중복 제거를 위한 통합 Map (인덱스 → 메시지)\n  // HIGH 우선순위로 중복 제거\n  const messageMap = new Map<number, FilteredMessage>();\n\n  // 모든 배치 순회하며 병합\n  for (const result of results) {\n    // HIGH 메시지 병합 (중복 제거, 항상 우선)\n    for (const msg of result.high) {\n      messageMap.set(msg.index, msg); // HIGH는 무조건 덮어쓰기\n    }\n\n    // MEDIUM 메시지 병합 (HIGH가 없을 때만 추가)\n    for (const msg of result.medium) {\n      if (!messageMap.has(msg.index)) {\n        messageMap.set(msg.index, msg);\n      }\n    }\n  }\n\n  // Map을 배열로 변환하고 인덱스 기준 정렬\n  const allMessages = Array.from(messageMap.values()).sort((a, b) => a.index - b.index);\n\n  // HIGH/MEDIUM 분리\n  const high = allMessages.filter(msg => msg.importance === 'HIGH');\n  const medium = allMessages.filter(msg => msg.importance === 'MEDIUM');\n\n  // 병합 결과 통계 (n + m개)\n  const stats = {\n    total: allMessages.length,\n    high: high.length,\n    medium: medium.length,\n    low: 0, // LOW 메시지는 브라우저에 저장 안함\n  };\n\n  // 검증: 중복 인덱스 확인\n  const indices = allMessages.map(msg => msg.index);\n  const uniqueIndices = new Set(indices);\n  if (indices.length !== uniqueIndices.size) {\n    console.error('Merged result validation failed: duplicate indices found');\n  }\n\n  // 검증: 분리된 배열 합 = 전체\n  if (high.length + medium.length !== allMessages.length) {\n    console.error('Merged result validation failed: high + medium !== all');\n  }\n\n  return {\n    high,\n    medium,\n    all: allMessages,\n    stats,\n  };\n}\n\n/**\n * 병합 결과를 브라우저 메모리에 저장\n * (선택적으로 사용 - 컴포넌트 state나 context에 저장하는 것을 권장)\n */\nexport class ResultStore {\n  private static instance: ResultStore | null = null;\n  private mergedResult: MergedResult | null = null;\n\n  private constructor() {}\n\n  static getInstance(): ResultStore {\n    if (!ResultStore.instance) {\n      ResultStore.instance = new ResultStore();\n    }\n    return ResultStore.instance;\n  }\n\n  save(result: MergedResult): void {\n    this.mergedResult = result;\n  }\n\n  get(): MergedResult | null {\n    return this.mergedResult;\n  }\n\n  clear(): void {\n    this.mergedResult = null;\n  }\n\n  getHighMessages(): FilteredMessage[] {\n    return this.mergedResult?.high || [];\n  }\n\n  getMediumMessages(): FilteredMessage[] {\n    return this.mergedResult?.medium || [];\n  }\n\n  getAllMessages(): FilteredMessage[] {\n    return this.mergedResult?.all || [];\n  }\n\n  getStats() {\n    return this.mergedResult?.stats || {\n      total: 0,\n      high: 0,\n      medium: 0,\n      low: 0,\n    };\n  }\n}\n\n/**\n * 사용 예시:\n * \n * // 배치 결과 병합\n * const merged = mergeBatchResults(batchResults);\n * \n * // 브라우저 메모리에 저장\n * const store = ResultStore.getInstance();\n * store.save(merged);\n * \n * // 나중에 사용\n * const highMessages = store.getHighMessages();\n * const stats = store.getStats();\n */\n","size_bytes":3858},"server/services/anthropic.ts":{"content":"// server/services/anthropic.ts\n// 4단계 파이프라인: AI 추출 → 코드 계산 → AI 분석 → AI 글쓰기\n\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport {\n  processConversationData,\n  type Message,\n  type ProcessedData,\n} from \"./data-processor\";\nimport {\n  getSamplesForAnalysis,\n  formatSamplesForAI,\n} from \"./conversation-sampler\";\n\n// Multi-turn 분석 함수 (필요시 구현)\nlet analyzeConversationMultiTurnSafe: any = null;\ntry {\n  const multiTurnModule = require(\"./anthropic-multiturn\");\n  analyzeConversationMultiTurnSafe =\n    multiTurnModule.analyzeConversationMultiTurnSafe;\n} catch (error) {\n  // anthropic-multiturn.ts 파일이 없으면 무시\n}\n\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY || \"\",\n});\n\nexport interface BasicStats {\n  totalMessages: number;\n  participants: number;\n}\n\nexport interface ConversationAnalysis {\n  sentimentScore: number;\n  sentimentDistribution: { name: string; value: number }[];\n  insights: { title: string; description: string }[];\n  processedData?: ProcessedData;\n  deepAnalysis?: {\n    communicationStyle: any;\n    emotionalExpression: any;\n    relationshipDynamics: any;\n    specialPatterns: any;\n    partnerStatus: any;\n  };\n}\n\n// JSON 파싱 헬퍼 함수\nfunction parseJSON(response: any): any {\n  const text =\n    response.content[0].type === \"text\" ? response.content[0].text : \"{}\";\n\n  try {\n    const jsonMatch = text.match(/\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\]/);\n    return JSON.parse(jsonMatch ? jsonMatch[0] : text);\n  } catch {\n    console.error(\"JSON 파싱 실패\");\n    return {};\n  }\n}\n\n// 메인 분석 함수\nexport async function analyzeConversation(\n  messages: Message[],\n  stats: BasicStats,\n  primaryRelationship: string = \"친구\",\n  secondaryRelationships: string[] = [],\n  options: {\n    useMultiTurn?: boolean;\n    fallbackOnError?: boolean;\n    userPurpose?: string;\n  } = {},\n): Promise<ConversationAnalysis> {\n  const { useMultiTurn = true, fallbackOnError = true, userPurpose } = options;\n\n  // Multi-turn 사용 (새 방식)\n  if (useMultiTurn) {\n    if (!analyzeConversationMultiTurnSafe) {\n      console.warn(\n        \"⚠️ Multi-turn 모듈을 찾을 수 없습니다. 기존 4단계 방식으로 진행합니다.\",\n      );\n      return await analyzeConversation4Stage(\n        messages,\n        stats,\n        primaryRelationship,\n        secondaryRelationships,\n        userPurpose,\n      );\n    }\n\n    try {\n      console.log(\"🔄 Multi-turn 분석 시작\");\n      return await analyzeConversationMultiTurnSafe(\n        messages,\n        stats,\n        primaryRelationship,\n        secondaryRelationships,\n        userPurpose,\n      );\n    } catch (error) {\n      console.error(\"Multi-turn 분석 실패:\", error);\n\n      // Fallback: 기존 방식으로 재시도\n      if (fallbackOnError) {\n        console.log(\"⚠️ 기존 4단계 방식으로 Fallback\");\n        return await analyzeConversation4Stage(\n          messages,\n          stats,\n          primaryRelationship,\n          secondaryRelationships,\n          userPurpose,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  // 기존 4단계 방식\n  return await analyzeConversation4Stage(\n    messages,\n    stats,\n    primaryRelationship,\n    secondaryRelationships,\n    userPurpose,\n  );\n}\n\n// 기존 4단계 로직을 별도 함수로 분리\nasync function analyzeConversation4Stage(\n  messages: Message[],\n  stats: BasicStats,\n  primaryRelationship: string,\n  secondaryRelationships: string[],\n  userPurpose?: string,\n): Promise<ConversationAnalysis> {\n  const participants = Array.from(new Set(messages.map((m) => m.participant)));\n  const userName = participants[0] || \"사용자\";\n  const partnerName = participants[1] || \"상대방\";\n\n  let relationshipContext =\n    secondaryRelationships.length > 0\n      ? `${primaryRelationship} (주요) + ${secondaryRelationships.join(\", \")} (부가적)`\n      : primaryRelationship;\n  \n  if (userPurpose) {\n    relationshipContext += `\\n\\n분석 목적: ${userPurpose}`;\n  }\n\n  console.log(\"\\n======== 4단계 분석 파이프라인 시작 ========\");\n  console.log(`관계: ${relationshipContext}, 메시지: ${messages.length}개\\n`);\n\n  // 대표 샘플 추출\n  const samples = getSamplesForAnalysis(messages);\n  const formattedSamples = formatSamplesForAI(samples);\n\n  console.log(`샘플 추출 완료:`);\n  console.log(`  - 최근 대화: ${samples.recent.length}개`);\n  console.log(`  - 깊은 대화: ${samples.longestExchanges.length}개`);\n  console.log(`  - 감정적 순간: ${samples.emotional.length}개`);\n  console.log(\n    `  - 키워드 기반: ${samples.preferences.length + samples.appointments.length + samples.questions.length}개`,\n  );\n  console.log(`  - 시간대별: ${samples.byTimeOfDay.length}개`);\n  console.log(`  - 랜덤: ${samples.random.length}개\\n`);\n\n  // ===== STEP 1: AI - 정보 찾기만 =====\n  console.log(\"Step 1: AI 정보 추출 중...\");\n\n  const extractionResponse = await anthropic.messages.create({\n    model: DEFAULT_MODEL_STR,\n    max_tokens: 4000,\n    system: `당신은 정보 추출 전문가입니다. 대화에서 다음 정보만 찾아서 나열하세요:\n1. 상대방이 명시적으로 \"좋아한다\"고 말한 것들\n2. 상대방이 명시적으로 \"싫어한다\"고 말한 것들  \n3. 날짜가 언급된 약속이나 이벤트\n4. \"사랑해\", \"보고싶어\", \"고마워\" 등 애정 표현 문장들\n\n**중요: 해석하지 말고, 찾은 내용만 JSON으로 출력하세요.**`,\n    messages: [\n      {\n        role: \"user\",\n        content: `${userName}과 ${partnerName}의 대화 샘플 (총 ${messages.length}개 중 대표 샘플):\n\n${formattedSamples}\n\n다음 형식의 JSON으로 응답하세요:\n\\`\\`\\`json\n{\n  \"preferences\": [\n    {\"type\": \"like\", \"content\": \"좋아한다고 언급한 것\"},\n    {\"type\": \"dislike\", \"content\": \"싫어한다고 언급한 것\"}\n  ],\n  \"importantDates\": [\n    {\"date\": \"YYYY-MM-DD\", \"content\": \"약속/이벤트\"}\n  ],\n  \"topKeywords\": [\n    {\"word\": \"자주 나온 단어\", \"count\": 추정 빈도}\n  ]\n}\n\\`\\`\\``,\n      },\n    ],\n  });\n\n  const rawExtraction = parseJSON(extractionResponse);\n  console.log(\"Step 1 완료 ✓\");\n\n  // Rate limit 방지: API 호출 사이 지연\n  console.log(\"⏳ Rate limit 방지 대기 중 (15초)...\");\n  await new Promise(resolve => setTimeout(resolve, 15000));\n\n  // ===== STEP 2: 코드 - 계산 & 가공 =====\n  console.log(\"Step 2: 데이터 처리 및 계산 중...\");\n\n  const processedData = processConversationData(messages, rawExtraction);\n\n  console.log(\"Step 2 완료 ✓\");\n  console.log(`  - 티키타카 지수: ${processedData.tikitakaScore}점`);\n  console.log(\n    `  - 메시지 비율: ${userName} ${(processedData.messageRatio[userName] * 100).toFixed(0)}% / ${partnerName} ${(processedData.messageRatio[partnerName] * 100).toFixed(0)}%`,\n  );\n\n  // ===== STEP 3: AI - 심층 분석 (대폭 개선) =====\n  console.log(\"Step 3: 심층 분석 중...\");\n\n  const analysisResponse = await anthropic.messages.create({\n    model: DEFAULT_MODEL_STR,\n    max_tokens: 8000,\n    system: `당신은 10년 경력의 관계 심리 전문가입니다. \n주어진 정량 데이터와 대화 샘플을 모두 활용하여 \n두 사람의 관계를 깊이 있게 분석하세요.\n\n단순한 표면적 분석이 아닌, 대화 속 숨겨진 패턴, \n말하지 않은 감정, 관계의 변화 흐름을 포착하세요.`,\n    messages: [\n      {\n        role: \"user\",\n        content: `${userName}님과 ${partnerName}님(${relationshipContext})의 대화 분석:\n\n===== 1. 정량 데이터 =====\n${JSON.stringify(processedData, null, 2)}\n\n===== 2. 최근 대화 (최근 300개) =====\n${samples.recent\n  .map((m) => `[${m.timestamp}] ${m.participant}: ${m.content}`)\n  .join(\"\\n\")}\n\n===== 3. 가장 긴 대화 교환 (깊은 소통 순간) =====\n${samples.longestExchanges\n  .map((m) => `[${m.timestamp}] ${m.participant}: ${m.content}`)\n  .join(\"\\n\")}\n\n===== 4. 감정적 대화 =====\n${samples.emotional\n  .map((m) => `[${m.timestamp}] ${m.participant}: ${m.content}`)\n  .join(\"\\n\")}\n\n===== 5. 취향/선호 관련 대화 =====\n${samples.preferences\n  .map((m) => `[${m.timestamp}] ${m.participant}: ${m.content}`)\n  .join(\"\\n\")}\n\n===== 6. 질문-답변 패턴 =====\n${samples.questions\n  .map((m) => `[${m.timestamp}] ${m.participant}: ${m.content}`)\n  .join(\"\\n\")}\n\n**분석 요구사항:**\n1. 표면적 통계를 넘어, 대화 속 진짜 의미를 찾으세요\n2. 구체적인 대화 예시를 인용하며 분석하세요\n3. 시간에 따른 변화나 패턴을 포착하세요\n4. 말하지 않은 것(침묵, 회피)도 분석하세요\n5. 두 사람만의 독특한 소통 방식을 발견하세요\n\n다음 형식의 JSON으로 상세히 작성하세요:\n\\`\\`\\`json\n{\n  \"communicationStyle\": {\n    \"${userName}\": {\"type\": \"경청형/주도형\", \"traits\": [\"특징1\", \"특징2\"]},\n    \"${partnerName}\": {\"type\": \"경청형/주도형\", \"traits\": [\"특징1\", \"특징2\"]}\n  },\n  \"emotionalExpression\": {\n    \"emojiDependency\": {\"${userName}\": \"high/medium/low\", \"${partnerName}\": \"high/medium/low\"},\n    \"emotionalAsymmetry\": \"한 문장 분석\"\n  },\n  \"relationshipDynamics\": {\n    \"powerBalance\": \"균형적/한쪽 주도\",\n    \"intimacyTrend\": \"increasing/stable/decreasing\"\n  },\n  \"specialPatterns\": {\n    \"recurringTopics\": [\"주제1\", \"주제2\"],\n    \"happyMoments\": [{\"timestamp\": \"날짜\", \"context\": \"맥락\"}]\n  },\n  \"partnerStatus\": {\n    \"currentState\": \"최근 상대방 상태 추론\",\n    \"suggestion\": \"조언\"\n  }\n}\n\\`\\`\\``,\n      },\n    ],\n  });\n\n  const deepAnalysis = parseJSON(analysisResponse);\n  console.log(\"Step 3 완료 ✓\");\n\n  // Rate limit 방지: API 호출 사이 지연\n  console.log(\"⏳ Rate limit 방지 대기 중 (15초)...\");\n  await new Promise(resolve => setTimeout(resolve, 15000));\n\n  // ===== STEP 4: AI - 글쓰기 (더 많은 컨텍스트 제공) =====\n  console.log(\"Step 4: 인사이트 생성 중...\");\n\n  const reportResponse = await anthropic.messages.create({\n    model: DEFAULT_MODEL_STR,\n    max_tokens: 3000,\n    system: `당신은 Maltcha의 AI 비서 'Tea'입니다.\n분석 결과를 바탕으로 구체적이고 실용적인 조언을 제공하세요.\n\n일반론이 아닌, 이 두 사람만을 위한 맞춤 조언을 해주세요.`,\n    messages: [\n      {\n        role: \"user\",\n        content: `${userName}님을 위한 리포트를 작성해주세요.\n\n**정량 데이터:**\n${JSON.stringify(processedData, null, 2)}\n\n**심층 분석:**\n${JSON.stringify(deepAnalysis, null, 2)}\n\n**대표 대화 예시:**\n${samples.recent\n  .slice(0, 30)\n  .map((m) => `${m.participant}: ${m.content}`)\n  .join(\"\\n\")}\n\n**요구사항:**\n- 최소 6개의 인사이트 작성\n- 각 인사이트는 구체적인 대화 예시 인용\n- 실행 가능한 조언 포함\n- 깊이 있고 통찰력 있는 내용\n\n다음 형식의 JSON 배열로 작성하세요:\n\\`\\`\\`json\n[\n  {\n    \"title\": \"💬 티키타카 지수: ${processedData.tikitakaScore}점\",\n    \"description\": \"구체적인 설명과 칭찬. 실제 대화 패턴을 예로 들기\"\n  },\n  {\n    \"title\": \"🎭 ${partnerName}님의 대화 스타일\",\n    \"description\": \"타입과 특징을 구체적으로 설명. 대화 샘플에서 예시 인용\"\n  },\n  {\n    \"title\": \"📝 ${partnerName}님의 취향 노트\",\n    \"description\": \"좋아하는 것/싫어하는 것을 대화 샘플 기반으로 구체적으로\"\n  },\n  {\n    \"title\": \"⏰ 대화 시간대 분석\",\n    \"description\": \"주로 언제 대화하는지, 그 시간의 의미\"\n  },\n  {\n    \"title\": \"💡 관계 개선 포인트\",\n    \"description\": \"구체적이고 실행 가능한 조언\"\n  },\n  {\n    \"title\": \"💭 Tea의 종합 조언\",\n    \"description\": \"현재 관계 상황 분석과 실용적 제안. 따뜻하고 구체적으로\"\n  }\n]\n\\`\\`\\``,\n      },\n    ],\n  });\n\n  const insightsArray = parseJSON(reportResponse);\n  const insights = Array.isArray(insightsArray)\n    ? insightsArray.slice(0, 6)\n    : [\n        {\n          title: `💬 티키타카 지수: ${processedData.tikitakaScore}점`,\n          description: `${userName}님과 ${partnerName}님의 ${processedData.totalMessages}개 메시지를 분석했어요!`,\n        },\n        {\n          title: \"🎭 대화 스타일\",\n          description: \"서로 다른 스타일이지만 잘 어울려요.\",\n        },\n        {\n          title: \"📝 특별한 순간들\",\n          description: \"대화 속에서 진심으로 소통했던 순간들이 있어요.\",\n        },\n        {\n          title: \"⏰ 대화 시간대\",\n          description: \"두 분의 대화 패턴에서 의미 있는 시간대를 발견했어요.\",\n        },\n        {\n          title: \"💡 관계 개선 포인트\",\n          description: \"더 나은 소통을 위한 구체적인 제안을 준비했어요.\",\n        },\n        {\n          title: \"💭 Tea의 조언\",\n          description: `${relationshipContext} 관계에서 지금처럼 계속 소통하면 더 깊은 관계가 될 거예요.`,\n        },\n      ];\n\n  console.log(\"Step 4 완료 ✓\");\n  console.log(\"======== 분석 완료 ========\\n\");\n\n  // 최종 결과 조합\n  const sentimentScore = Math.round(\n    (processedData.sentimentRatio.positive * 100 +\n      processedData.sentimentRatio.neutral * 50) /\n      (processedData.sentimentRatio.positive +\n        processedData.sentimentRatio.neutral +\n        processedData.sentimentRatio.negative),\n  );\n\n  const sentimentDistribution = [\n    {\n      name: \"긍정적\",\n      value: Math.round(processedData.sentimentRatio.positive * 100),\n    },\n    {\n      name: \"중립적\",\n      value: Math.round(processedData.sentimentRatio.neutral * 100),\n    },\n    {\n      name: \"부정적\",\n      value: Math.round(processedData.sentimentRatio.negative * 100),\n    },\n  ];\n\n  return {\n    sentimentScore,\n    sentimentDistribution,\n    insights: insights.slice(0, 6),\n    processedData,\n    deepAnalysis,\n  };\n}\n","size_bytes":13995},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/shared-result.tsx":{"content":"import { useRoute, useLocation } from \"wouter\";\nimport { ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport type { AnalysisResult } from \"@shared/schema\";\nimport { LineChart, Line, BarChart, Bar, AreaChart, Area, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport maltchaIcon from \"@assets/Maltcha Icon_1759388201617.jpg\";\n\nconst COLORS = ['hsl(var(--primary))', 'hsl(var(--secondary))', 'hsl(var(--accent))'];\n\ninterface SharedResultData {\n  id: string;\n  analysisId: string;\n  analysisData: AnalysisResult;\n  createdAt: string;\n  expiresAt: string;\n  viewCount: number;\n}\n\nexport default function SharedResult() {\n  const [, params] = useRoute(\"/result/:shareId\");\n  const [, setLocation] = useLocation();\n  const shareId = params?.shareId;\n\n  const { data, isLoading, error } = useQuery<SharedResultData>({\n    queryKey: ['/api/share', shareId],\n    enabled: !!shareId,\n  });\n\n  useEffect(() => {\n    const ogImageUrl = `${window.location.origin}/og-image.jpg`;\n    \n    const metaTags = [\n      { property: 'og:image', content: ogImageUrl },\n      { property: 'og:url', content: window.location.href },\n      { name: 'twitter:image', content: ogImageUrl },\n    ];\n\n    metaTags.forEach(({ property, name, content }) => {\n      const selector = property ? `meta[property=\"${property}\"]` : `meta[name=\"${name}\"]`;\n      let meta = document.querySelector(selector);\n      \n      if (meta) {\n        meta.setAttribute('content', content);\n      } else {\n        meta = document.createElement('meta');\n        if (property) meta.setAttribute('property', property);\n        if (name) meta.setAttribute('name', name);\n        meta.setAttribute('content', content);\n        document.head.appendChild(meta);\n      }\n    });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n          <p className=\"text-muted-foreground\">결과를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    const errorMessage = (error as any)?.message || \"링크를 찾을 수 없습니다\";\n    const statusCode = errorMessage.split(':')[0];\n    const isExpired = statusCode === '410';\n    const isNotFound = statusCode === '404';\n    \n    return (\n      <div className=\"min-h-screen bg-background py-12 px-4\">\n        <div className=\"max-w-2xl mx-auto text-center\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-center space-x-2 mb-6\">\n              <img src={maltchaIcon} alt=\"Maltcha\" className=\"w-10 h-10 rounded-lg\" />\n              <span className=\"text-2xl font-bold text-foreground\">Maltcha</span>\n            </div>\n          </div>\n          \n          <div className=\"bg-card dark:bg-card rounded-2xl p-12 shadow-lg\">\n            <div className=\"w-20 h-20 mx-auto mb-6 bg-destructive/10 rounded-full flex items-center justify-center\">\n              <svg className=\"w-10 h-10 text-destructive\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n              </svg>\n            </div>\n            \n            <h2 className=\"text-2xl font-bold text-foreground mb-3\">\n              {isExpired ? \"이 결과는 만료되었습니다\" : isNotFound ? \"링크를 찾을 수 없습니다\" : \"오류가 발생했습니다\"}\n            </h2>\n            <p className=\"text-muted-foreground mb-8\">\n              {isExpired \n                ? \"공유 링크는 24시간 동안만 유효합니다. 새로운 분석을 시작해보세요.\" \n                : isNotFound\n                ? \"유효하지 않은 공유 링크입니다.\"\n                : \"문제가 발생했습니다. 다시 시도해주세요.\"}\n            </p>\n            \n            <Button\n              onClick={() => setLocation('/upload')}\n              className=\"bg-primary text-primary-foreground hover:bg-secondary\"\n              size=\"lg\"\n              data-testid=\"button-try-analysis\"\n            >\n              나도 분석해보기\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const analysis = data.analysisData;\n  const { stats, charts, insights } = analysis;\n\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-12 fade-in-up\">\n          <div className=\"flex items-center justify-center space-x-2 mb-6\">\n            <img src={maltchaIcon} alt=\"Maltcha\" className=\"w-10 h-10 rounded-lg\" />\n            <span className=\"text-2xl font-bold text-foreground\">Maltcha</span>\n          </div>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">소통 스타일 분석 결과</h1>\n          <p className=\"text-muted-foreground\">AI가 분석한 대화 패턴과 인사이트를 확인해보세요</p>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-muted-foreground\">총 메시지</span>\n              <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\" />\n              </svg>\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\">{stats?.totalMessages.toLocaleString()}</p>\n          </div>\n\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-muted-foreground\">참여자</span>\n              <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\n              </svg>\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\">{stats?.participants}</p>\n          </div>\n\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-muted-foreground\">평균 응답 시간</span>\n              <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\">{stats?.avgResponseTime}</p>\n          </div>\n\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-muted-foreground\">감정 점수</span>\n              <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\">{stats?.sentimentScore}%</p>\n          </div>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">메시지 빈도</h3>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={charts?.messageFrequency || []}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                <XAxis dataKey=\"date\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: 'hsl(var(--card))', \n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '8px'\n                  }}\n                />\n                <Line type=\"monotone\" dataKey=\"count\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">참여자별 활동</h3>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <BarChart data={charts?.participantActivity || []}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                <XAxis dataKey=\"name\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: 'hsl(var(--card))', \n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '8px'\n                  }}\n                />\n                <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">시간대별 활동</h3>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <AreaChart data={charts?.hourlyActivity || []}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                <XAxis dataKey=\"hour\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: 'hsl(var(--card))', \n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '8px'\n                  }}\n                />\n                <Area type=\"monotone\" dataKey=\"count\" stroke=\"hsl(var(--primary))\" fill=\"hsl(var(--primary))\" fillOpacity={0.3} />\n              </AreaChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">감정 분석</h3>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <PieChart>\n                <Pie\n                  data={charts?.sentimentDistribution || []}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={(entry) => entry.name}\n                  outerRadius={80}\n                  fill=\"hsl(var(--primary))\"\n                  dataKey=\"value\"\n                >\n                  {(charts?.sentimentDistribution || []).map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: 'hsl(var(--card))', \n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '8px'\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Key Insights */}\n        {insights && insights.length > 0 && (\n          <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-8 fade-in-up\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <svg className=\"w-5 h-5 mr-2 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n              </svg>\n              주요 인사이트\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {insights.map((insight, index) => (\n                <div key={index} className=\"flex items-start space-x-3 p-4 bg-accent/30 dark:bg-accent/30 rounded-lg\">\n                  <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-sm font-bold text-primary-foreground\">{index + 1}</span>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-foreground mb-1\">{insight.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{insight.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* CTA Section */}\n        <div className=\"text-center py-12 bg-primary/10 rounded-2xl fade-in-up\">\n          <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n            나도 대화 분석해보기\n          </h3>\n          <p className=\"text-muted-foreground mb-6\">\n            내 소통 스타일을 AI로 분석하고 인사이트를 얻어보세요\n          </p>\n          <Button\n            onClick={() => setLocation('/upload')}\n            className=\"bg-primary text-primary-foreground hover:bg-secondary\"\n            size=\"lg\"\n          >\n            무료로 시작하기\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14754},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-card p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3842},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/services/kakao-parser.ts":{"content":"import { Message } from \"@shared/schema\";\n\nexport interface ParsedConversation {\n  messages: Message[];\n  participants: Set<string>;\n}\n\n/**\n * 카카오톡 대화 파일 파싱\n * \n * 지원 형식:\n * 1. [Name] [Time] Message\n * 2. 2024. 1. 15. 오후 9:30, Name : Message\n * 3. 2024-01-15 21:30, Name : Message (CSV 변환 형식, ISO 타임스탬프)\n * \n * CSV 파일은 프론트엔드에서 이 형식으로 변환 후 전송됨\n */\nexport function parseKakaoTalkFile(content: string): ParsedConversation {\n  const lines = content.split('\\n');\n  const messages: Message[] = [];\n  const participants = new Set<string>();\n  \n  // KakaoTalk format: [Name] [Time] Message\n  const kakaoRegex1 = /^\\[(.+?)\\]\\s\\[(.+?)\\]\\s(.+)$/;\n  \n  // KakaoTalk format: 2024. 1. 15. 오후 9:30, Name : Message\n  const kakaoRegex2 = /^(\\d{4}\\.\\s?\\d{1,2}\\.\\s?\\d{1,2}\\.\\s(?:오전|오후)\\s\\d{1,2}:\\d{2}),\\s(.+?)\\s:\\s(.+)$/;\n  \n  // CSV converted format: 2024-01-15 21:30, Name : Message (ISO timestamp)\n  // Also supports: 2024. 1. 15. 21:30, Name : Message\n  const csvRegex = /^(.+?),\\s*(.+?)\\s*:\\s*(.+)$/;\n  \n  for (const line of lines) {\n    if (!line.trim()) continue;\n    \n    let match = line.match(kakaoRegex1);\n    if (match) {\n      const [, participant, timestamp, content] = match;\n      participants.add(participant);\n      messages.push({\n        timestamp,\n        participant,\n        content: content.trim(),\n      });\n      continue;\n    }\n    \n    match = line.match(kakaoRegex2);\n    if (match) {\n      const [, timestamp, participant, content] = match;\n      participants.add(participant);\n      messages.push({\n        timestamp,\n        participant,\n        content: content.trim(),\n      });\n      continue;\n    }\n    \n    // CSV format (fallback)\n    match = line.match(csvRegex);\n    if (match) {\n      const [, timestamp, participant, content] = match;\n      // 타임스탬프가 날짜 형식인지 확인 (간단한 체크)\n      if (timestamp.match(/\\d{4}/) && participant && content) {\n        participants.add(participant);\n        messages.push({\n          timestamp: timestamp.trim(),\n          participant: participant.trim(),\n          content: content.trim(),\n        });\n      }\n    }\n  }\n  \n  return {\n    messages,\n    participants,\n  };\n}\n\nexport function calculateStats(messages: Message[], participants: Set<string>) {\n  const participantCount = participants.size;\n  const totalMessages = messages.length;\n  \n  // Calculate average response time (simplified - assumes sequential messages)\n  let totalTimeDiff = 0;\n  let timeCount = 0;\n  \n  for (let i = 1; i < messages.length; i++) {\n    const prev = parseKakaoDate(messages[i - 1].timestamp);\n    const curr = parseKakaoDate(messages[i].timestamp);\n    if (prev && curr) {\n      totalTimeDiff += (curr.getTime() - prev.getTime()) / 1000 / 60; // minutes\n      timeCount++;\n    }\n  }\n  \n  const avgResponseMinutes = timeCount > 0 ? totalTimeDiff / timeCount : 0;\n  const avgResponseTime = avgResponseMinutes < 1 \n    ? `${Math.round(avgResponseMinutes * 60)}초`\n    : avgResponseMinutes < 60\n    ? `${avgResponseMinutes.toFixed(1)}분`\n    : `${(avgResponseMinutes / 60).toFixed(1)}시간`;\n  \n  return {\n    totalMessages,\n    participants: participantCount,\n    avgResponseTime,\n    sentimentScore: 0, // Will be calculated by AI\n  };\n}\n\nfunction parseKakaoDate(timestamp: string): Date | null {\n  try {\n    // Format 1: \"2024. 1. 15. 오후 9:30\" (Korean AM/PM)\n    let match = timestamp.match(/(\\d{4})\\.\\s?(\\d{1,2})\\.\\s?(\\d{1,2})\\.\\s(오전|오후)\\s(\\d{1,2}):(\\d{2})/);\n    if (match) {\n      const [, year, month, day, meridiem, hour, minute] = match;\n      let hours = parseInt(hour);\n      if (meridiem === '오후' && hours !== 12) hours += 12;\n      if (meridiem === '오전' && hours === 12) hours = 0;\n      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), hours, parseInt(minute));\n    }\n    \n    // Format 2: \"2024-01-15 21:30\" (ISO-like, 24-hour)\n    match = timestamp.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})\\s+(\\d{1,2}):(\\d{2})/);\n    if (match) {\n      const [, year, month, day, hour, minute] = match;\n      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));\n    }\n    \n    // Format 3: \"2024. 1. 15. 21:30\" (Dotted format, 24-hour)\n    match = timestamp.match(/(\\d{4})\\.\\s?(\\d{1,2})\\.\\s?(\\d{1,2})\\.\\s+(\\d{1,2}):(\\d{2})/);\n    if (match) {\n      const [, year, month, day, hour, minute] = match;\n      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));\n    }\n    \n    // Format 4: Generic fallback - try to parse as Date string\n    const parsed = new Date(timestamp);\n    if (!isNaN(parsed.getTime())) {\n      return parsed;\n    }\n    \n    return null;\n  } catch {\n    return null;\n  }\n}\n\nexport function generateChartData(messages: Message[], participants: Set<string>) {\n  // Message frequency by date\n  const dateMap = new Map<string, number>();\n  messages.forEach(msg => {\n    const date = parseKakaoDate(msg.timestamp);\n    if (date) {\n      const dateStr = date.toISOString().split('T')[0];\n      dateMap.set(dateStr, (dateMap.get(dateStr) || 0) + 1);\n    }\n  });\n  \n  const messageFrequency = Array.from(dateMap.entries())\n    .map(([date, count]) => ({ date, count }))\n    .sort((a, b) => a.date.localeCompare(b.date));\n  \n  // Participant activity\n  const participantMap = new Map<string, number>();\n  messages.forEach(msg => {\n    participantMap.set(msg.participant, (participantMap.get(msg.participant) || 0) + 1);\n  });\n  \n  const participantActivity = Array.from(participantMap.entries())\n    .map(([name, count]) => ({ name, count }))\n    .sort((a, b) => b.count - a.count);\n  \n  // Hourly activity\n  const hourMap = new Map<number, number>();\n  messages.forEach(msg => {\n    const date = parseKakaoDate(msg.timestamp);\n    if (date) {\n      const hour = date.getHours();\n      hourMap.set(hour, (hourMap.get(hour) || 0) + 1);\n    }\n  });\n  \n  const hourlyActivity = Array.from({ length: 24 }, (_, hour) => ({\n    hour,\n    count: hourMap.get(hour) || 0,\n  }));\n  \n  return {\n    messageFrequency,\n    participantActivity,\n    hourlyActivity,\n  };\n}\n","size_bytes":6177},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { neonConfig, Pool } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":343},"server/services/anthropic-multiturn.ts":{"content":"// server/services/anthropic-multiturn.ts\n// Multi-turn 대화 분석 - 완전한 프로덕션 구현\n\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport type { Message } from \"./data-processor\";\nimport { processConversationData } from \"./data-processor\";\n\nconst MODEL = \"claude-sonnet-4-20250514\";\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY || \"\",\n});\n\n// ========== 유틸리티 함수 ==========\n\nfunction parseJSON(response: any): any {\n  const text =\n    response.content[0]?.type === \"text\" ? response.content[0].text : \"{}\";\n\n  try {\n    // ```json ... ``` 코드 블록 추출\n    const codeBlockMatch = text.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n    if (codeBlockMatch) {\n      return JSON.parse(codeBlockMatch[1]);\n    }\n\n    // 일반 JSON 추출\n    const jsonMatch = text.match(/\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\]/);\n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[0]);\n    }\n\n    throw new Error(\"No JSON found in response\");\n  } catch (error) {\n    console.error(\"JSON 파싱 실패:\", error);\n    console.error(\"원본 텍스트 (처음 500자):\", text.substring(0, 500));\n    throw error;\n  }\n}\n\nfunction formatMessages(messages: Message[]): string {\n  return messages\n    .map((m) => `[${m.timestamp}] ${m.participant}: ${m.content}`)\n    .join(\"\\n\");\n}\n\nfunction getMessagesAround(\n  messages: Message[],\n  targetTimestamp: string,\n  windowSize: number,\n): Message[] {\n  const targetIndex = messages.findIndex(\n    (m) => m.timestamp === targetTimestamp,\n  );\n  if (targetIndex === -1) return [];\n\n  const start = Math.max(0, targetIndex - Math.floor(windowSize / 2));\n  const end = Math.min(\n    messages.length,\n    targetIndex + Math.ceil(windowSize / 2),\n  );\n\n  return messages.slice(start, end);\n}\n\n// ========== TURN 1: 전체 이해 ==========\n\nasync function turn1_understanding(\n  messages: Message[],\n  userName: string,\n  partnerName: string,\n  relationshipContext: string,\n) {\n  console.log(\"\\n=== Turn 1: 전체 이해 ===\");\n\n  const response = await anthropic.messages.create({\n    model: MODEL,\n    max_tokens: 10000,\n    temperature: 0.7,\n    system: `당신은 15년 경력의 관계 심리 전문가입니다.\n\n**전문 분야:**\n- 의사소통 패턴 분석\n- 관계 역학 진단\n- 감정 코칭\n\n**분석 원칙:**\n1. 표면적 내용과 숨겨진 의미를 구분\n2. 시간에 따른 변화 추적\n3. 말하지 않은 것(침묵)도 중요한 데이터\n4. 문화적 맥락 고려 (한국 대화 문화)\n\n주어진 대화를 정독하고, 관계의 본질을 파악하세요.`,\n\n    messages: [\n      {\n        role: \"user\",\n        content: `# 대화 분석 의뢰\n\n**참여자:** ${userName} ↔ ${partnerName}\n**관계:** ${relationshipContext}\n**총 메시지:** ${messages.length}개\n\n## 전체 대화 내역\n\n${formatMessages(messages)}\n\n---\n\n## 분석 요청사항\n\n위 대화를 **처음부터 끝까지 정독**하고 다음을 분석하세요:\n\n### 1. 전반적 관계 평가\n- 이 관계는 건강한가?\n- 전반적 분위기 (긍정적/중립적/부정적)\n- 관계 건강도 점수 (1-10점)\n\n### 2. 중요한 전환점 발견\n- 관계에 영향을 준 주요 이벤트 3-5개\n- 각 이벤트의 타임스탬프와 맥락\n- 왜 중요한지 설명\n\n### 3. 걱정되는 신호\n- 반복되는 부정적 패턴\n- 미해결 갈등의 징후\n- 소통 단절의 신호\n\n### 4. 긍정적 요소\n- 관계의 강점\n- 잘 작동하는 소통 방식\n- 서로에 대한 배려 표현\n\n### 5. 다음 분석 방향\n- 더 깊이 살펴봐야 할 시기/주제\n- 주목해야 할 대화 패턴\n- 해결이 필요한 이슈\n\n---\n\n**응답 형식 (JSON):**\n\n\\`\\`\\`json\n{\n  \"relationshipAssessment\": {\n    \"overallTone\": \"긍정적/중립적/부정적\",\n    \"healthScore\": 1-10,\n    \"summary\": \"2-3문장으로 관계 요약\"\n  },\n  \"keyEvents\": [\n    {\n      \"timestamp\": \"2024-01-15 14:30\",\n      \"participants\": \"${userName}/${partnerName}\",\n      \"context\": \"무슨 일이 있었는지 2-3문장\",\n      \"significance\": \"왜 중요한지\",\n      \"emotionalImpact\": \"긍정/부정/중립\"\n    }\n  ],\n  \"concerningPatterns\": [\n    {\n      \"pattern\": \"패턴 설명\",\n      \"frequency\": \"자주/가끔/드물게\",\n      \"examples\": [\"타임스탬프1\", \"타임스탬프2\"]\n    }\n  ],\n  \"strengths\": [\n    {\n      \"strength\": \"강점 설명\",\n      \"examples\": [\"타임스탬프1\", \"타임스탬프2\"]\n    }\n  ],\n  \"deepDiveTopics\": [\n    {\n      \"topic\": \"주제\",\n      \"reason\": \"왜 더 살펴봐야 하는지\",\n      \"timeRange\": \"2024-01 ~ 2024-02\"\n    }\n  ]\n}\n\\`\\`\\`\n\n**중요:** \n- 실제 대화 내용에 기반한 구체적 분석\n- 추측이 아닌 관찰에 기반\n- 타임스탬프 정확히 기록`,\n      },\n    ],\n  });\n\n  const result = parseJSON(response);\n\n  console.log(\n    `✓ 관계 건강도: ${result.relationshipAssessment?.healthScore}/10`,\n  );\n  console.log(`✓ 주요 이벤트: ${result.keyEvents?.length || 0}개`);\n  console.log(`✓ 걱정 패턴: ${result.concerningPatterns?.length || 0}개`);\n\n  return { response, analysis: result };\n}\n\n// ========== TURN 2: 심층 분석 ==========\n\nasync function turn2_deepDive(\n  messages: Message[],\n  userName: string,\n  partnerName: string,\n  turn1Data: any,\n) {\n  // Rate limit 방지: API 호출 사이 지연 (Multi-turn은 토큰 사용량이 많아 30초 필요)\n  console.log(\"\\n⏳ Rate limit 방지 대기 중 (30초)...\");\n  await new Promise(resolve => setTimeout(resolve, 30000));\n  \n  console.log(\"\\n=== Turn 2: 심층 분석 ===\");\n\n  // Turn 1에서 발견한 주요 이벤트 주변 대화 추출\n  const contextualSamples =\n    turn1Data.analysis.keyEvents?.flatMap((event: any) =>\n      getMessagesAround(messages, event.timestamp, 40),\n    ) || [];\n\n  // 관심 시기의 대화도 추출\n  const deepDiveMessages =\n    turn1Data.analysis.deepDiveTopics?.flatMap((topic: any) => {\n      const relevantMsgs = messages.filter((m) => {\n        return m.timestamp.startsWith(topic.timeRange?.split(\" ~ \")[0] || \"\");\n      });\n      return relevantMsgs.slice(0, 50);\n    }) || [];\n\n  const response = await anthropic.messages.create({\n    model: MODEL,\n    max_tokens: 15000,\n    temperature: 0.7,\n    system: `이전 전체 분석을 바탕으로, 더 깊은 차원의 통찰을 제공하세요.\n\n**분석 심화 원칙:**\n1. 표면 vs 진짜 의미 구분\n2. 무의식적 패턴 포착\n3. 시간에 따른 변화 추적\n4. 상호작용의 질적 평가\n\n특히 **말하지 않은 것**, **감정 뒤의 감정**, **회피하는 주제**를 주목하세요.`,\n\n    messages: [\n      {\n        role: \"user\",\n        content: turn1Data.response.messages?.[0]?.content || \"\",\n      },\n      {\n        role: \"assistant\",\n        content: turn1Data.response.content[0].text,\n      },\n      {\n        role: \"user\",\n        content: `# 심층 분석 요청\n\n이전 분석 결과:\n${JSON.stringify(turn1Data.analysis, null, 2)}\n\n이제 다음 대화들을 **세밀하게** 분석하세요:\n\n## 1. 주요 이벤트 전후 대화\n${formatMessages(contextualSamples.slice(0, 200))}\n\n## 2. 관심 시기 대화\n${formatMessages(deepDiveMessages.slice(0, 200))}\n\n## 3. 최근 대화 (변화 감지)\n${formatMessages(messages.slice(-100))}\n\n---\n\n## 심층 분석 항목\n\n### A. 소통 스타일 분석\n\n**${userName}님:**\n- 유형: 경청형/주도형/균형형\n- 특징: 구체적 3-5가지\n- 실제 대화 예시 인용\n- 강점과 개선점\n\n**${partnerName}님:**\n- 유형: 경청형/주도형/균형형\n- 특징: 구체적 3-5가지\n- 실제 대화 예시 인용\n- 강점과 개선점\n\n### B. 감정 표현 방식\n\n- 이모티콘 의존도 (high/medium/low)\n- 직접적 vs 간접적 표현\n- 감정 솔직도\n- 감정 표현의 비대칭 (한쪽이 더 많이 표현하는가?)\n\n### C. 관계 역학\n\n- **주도권:** 누가 대화를 리드? 건강한 균형?\n- **친밀도 변화:** 시간이 지나며 어떻게 변했나?\n  - 초기 (첫 1/3)\n  - 중기 (중간 1/3)\n  - 최근 (마지막 1/3)\n- **갈등 대처:** 의견 차이 시 어떻게 해결?\n- **경계 존중:** 서로의 공간을 존중하는가?\n\n### D. 특별한 패턴\n\n- **반복 주제:** 자주 나오는 대화 소재\n- **행복한 순간:** 진짜 행복했던 대화 (인용 필수)\n- **어색한 순간:** 소통이 막혔던 순간 (인용 필수)\n- **회피 주제:** 말하지 않는 것\n- **말투 변화:** 특정 시점부터 달라진 것\n\n### E. ${partnerName}님 현재 상태\n\n- **최근 감정 상태:** 행복/보통/힘듦/모호\n- **${userName}님에 대한 감정:** 애정/관심/무관심/피곤\n- **숨겨진 욕구:** 진짜 원하는 것\n- **걱정거리:** 표현 안 한 고민\n\n---\n\n**응답 형식 (JSON):**\n\n\\`\\`\\`json\n{\n  \"communicationStyle\": {\n    \"${userName}\": {\n      \"type\": \"경청형/주도형/균형형\",\n      \"traits\": [\"특징1\", \"특징2\", \"특징3\"],\n      \"examples\": [\n        {\"quote\": \"실제 대화\", \"timestamp\": \"날짜\", \"analysis\": \"이게 왜 특징인지\"}\n      ],\n      \"strengths\": [\"강점1\", \"강점2\"],\n      \"improvements\": [\"개선점1\", \"개선점2\"]\n    },\n    \"${partnerName}\": {\n      \"type\": \"경청형/주도형/균형형\",\n      \"traits\": [\"특징1\", \"특징2\", \"특징3\"],\n      \"examples\": [\n        {\"quote\": \"실제 대화\", \"timestamp\": \"날짜\", \"analysis\": \"이게 왜 특징인지\"}\n      ],\n      \"strengths\": [\"강점1\", \"강점2\"],\n      \"improvements\": [\"개선점1\", \"개선점2\"]\n    }\n  },\n  \"emotionalExpression\": {\n    \"emojiDependency\": {\n      \"${userName}\": \"high/medium/low\",\n      \"${partnerName}\": \"high/medium/low\"\n    },\n    \"directness\": {\n      \"${userName}\": \"매우 직접적/보통/간접적\",\n      \"${partnerName}\": \"매우 직접적/보통/간접적\"\n    },\n    \"asymmetry\": \"한쪽이 감정을 더 많이 표현한다면 구체적 설명\"\n  },\n  \"relationshipDynamics\": {\n    \"powerBalance\": {\n      \"assessment\": \"균형적/한쪽 주도/불안정\",\n      \"leader\": \"${userName}/${partnerName}/균형\",\n      \"healthiness\": \"건강함/보통/문제있음\"\n    },\n    \"intimacyTrend\": {\n      \"early\": \"초기 친밀도 (1-10)\",\n      \"middle\": \"중기 친밀도 (1-10)\",\n      \"recent\": \"최근 친밀도 (1-10)\",\n      \"direction\": \"increasing/stable/decreasing\",\n      \"analysis\": \"변화 이유 분석\"\n    },\n    \"conflictResolution\": {\n      \"style\": \"직접 대화/회피/폭발/건강한 해결\",\n      \"examples\": [\n        {\"situation\": \"상황\", \"resolution\": \"어떻게 해결\", \"timestamp\": \"날짜\"}\n      ]\n    }\n  },\n  \"specialPatterns\": {\n    \"recurringTopics\": [\n      {\"topic\": \"주제\", \"frequency\": \"빈도\", \"tone\": \"긍정/중립/부정\"}\n    ],\n    \"happyMoments\": [\n      {\n        \"timestamp\": \"날짜\",\n        \"quote\": \"실제 대화 인용\",\n        \"why\": \"왜 행복한 순간인지\",\n        \"emotionalSignals\": [\"웃음\", \"이모티콘 많음\"]\n      }\n    ],\n    \"awkwardMoments\": [\n      {\n        \"timestamp\": \"날짜\",\n        \"quote\": \"실제 대화\",\n        \"why\": \"왜 어색했는지\"\n      }\n    ],\n    \"avoidedTopics\": [\"회피하는 주제1\", \"주제2\"],\n    \"speechChanges\": [\n      {\n        \"when\": \"시점\",\n        \"change\": \"어떻게 달라졌는지\",\n        \"possibleReason\": \"추정 이유\"\n      }\n    ]\n  },\n  \"partnerStatus\": {\n    \"currentMood\": \"행복/보통/힘듦/혼란\",\n    \"emotionTowardUser\": \"애정/관심/무관심/부담\",\n    \"hiddenNeeds\": \"진짜 원하는 것 (추론)\",\n    \"unexpressedConcerns\": \"말 안 한 고민들\",\n    \"recentBehaviorChange\": \"최근 행동 변화 (있다면)\"\n  }\n}\n\\`\\`\\`\n\n**필수:**\n- 모든 주장은 실제 대화 인용으로 뒷받침\n- 타임스탬프 정확히 기록\n- \"~인 것 같다\"보다 \"~다. 왜냐하면 [대화 인용]\"`,\n      },\n    ],\n  });\n\n  const result = parseJSON(response);\n\n  console.log(`✓ 소통 스타일 분석 완료`);\n  console.log(\n    `✓ 친밀도 변화: ${result.relationshipDynamics?.intimacyTrend?.direction || \"N/A\"}`,\n  );\n  console.log(\n    `✓ 행복한 순간: ${result.specialPatterns?.happyMoments?.length || 0}개`,\n  );\n\n  return { response, analysis: result };\n}\n\n// ========== TURN 3: 사용자 맞춤 보고서 ==========\n\nasync function turn3_report(\n  messages: Message[],\n  userName: string,\n  partnerName: string,\n  basicStats: any,\n  turn1Data: any,\n  turn2Data: any,\n) {\n  // Rate limit 방지: API 호출 사이 지연 (Multi-turn은 토큰 사용량이 많아 30초 필요)\n  console.log(\"\\n⏳ Rate limit 방지 대기 중 (30초)...\");\n  await new Promise(resolve => setTimeout(resolve, 30000));\n  \n  console.log(\"\\n=== Turn 3: 최종 보고서 생성 ===\");\n\n  const response = await anthropic.messages.create({\n    model: MODEL,\n    max_tokens: 12000,\n    temperature: 0.8,\n    system: `당신은 Maltcha의 AI 비서 'Tea'입니다.\n\n**Tea의 정체성:**\n- 따뜻하고 공감적인 친구\n- 직설적이되 상처주지 않는 조언자\n- 실용적이고 구체적인 해결사\n\n**작성 원칙:**\n1. **NO 일반론:** \"소통이 중요해요\" (X) → \"이렇게 말해보세요: '...'\" (O)\n2. **실제 인용:** 추상적 설명 대신 대화 예시\n3. **실행 가능:** 오늘 당장 할 수 있는 조언\n4. **균형:** 칭찬 + 솔직한 지적 + 희망\n5. **맞춤형:** ${userName}님만을 위한, 이 관계만의 조언\n\n${userName}님이 이 보고서를 읽고 \"아, 이 AI가 우리 대화를 진짜 이해하네\"라고 느껴야 합니다.`,\n\n    messages: [\n      {\n        role: \"user\",\n        content: turn1Data.response.messages?.[0]?.content || \"\",\n      },\n      {\n        role: \"assistant\",\n        content: turn1Data.response.content[0].text,\n      },\n      {\n        role: \"user\",\n        content: turn2Data.response.messages?.[2]?.content || \"\",\n      },\n      {\n        role: \"assistant\",\n        content: turn2Data.response.content[0].text,\n      },\n      {\n        role: \"user\",\n        content: `# ${userName}님을 위한 최종 보고서 작성\n\n## 분석 데이터 요약\n\n### 기본 통계\n${JSON.stringify(basicStats, null, 2)}\n\n### Turn 1: 전체 이해\n${JSON.stringify(turn1Data.analysis, null, 2)}\n\n### Turn 2: 심층 분석\n${JSON.stringify(turn2Data.analysis, null, 2)}\n\n### 최근 대화 (보고서 작성 참고)\n${formatMessages(messages.slice(-30))}\n\n---\n\n## 보고서 작성 요청\n\n다음 **6개 인사이트**를 작성하세요:\n\n### 1. 💬 티키타카 지수: ${basicStats.tikitakaScore}점\n\n**포함 내용:**\n- 점수에 대한 따뜻한 해석\n- ${userName}님과 ${partnerName}님의 대화 스타일이 잘 맞는 부분\n- 실제 대화 패턴 예시 (구체적으로!)\n- 진심 어린 칭찬\n\n**톤:** 따뜻하고 격려적\n**최소 길이:** 250자\n\n---\n\n### 2. 🎭 ${partnerName}님의 진짜 소통 스타일\n\n**포함 내용:**\n- ${partnerName}님의 소통 유형 (경청형/주도형/균형형)\n- 표면적 말투 vs 진짜 속마음\n- ${userName}님이 오해할 수 있는 부분 (중요!)\n- 실제 대화 인용하며 설명\n\n**예시 구조:**\n\"${partnerName}님은 겉으로는 [X]하게 말하지만, 실제로는 [Y]한 마음이에요.\n예를 들어 [날짜]에 '${partnerName}: ...'라고 했을 때,\n이건 [진짜 의미] 뜻이었어요. ${userName}님은 이걸 [오해 가능]하게 받아들일 수 있는데...\"\n\n**톤:** 통찰력 있고 구체적\n**최소 길이:** 300자\n\n---\n\n### 3. 📝 ${partnerName}님의 취향 노트\n\n**포함 내용:**\n- **좋아하는 것:** 대화에서 실제 언급된 것만 (추측 금지)\n- **싫어하는 것:** 대화에서 실제 언급된 것만\n- **지뢰밟지 않는 법:** 구체적 상황별 팁\n- **기쁘게 하는 법:** 실전 전략\n\n**형식:**\n✅ 좋아하는 것\n  - [것1]: \"[날짜] ${partnerName}: ...\" 이렇게 말했어요\n  - [것2]: ...\n\n❌ 싫어하는 것\n  - [것1]: ...\n\n💡 꿀팁\n  - 상황1: 이렇게 말하면 좋아요: \"...\"\n  - 상황2: ...\n\n**톤:** 실용적이고 메모 같은 느낌\n**최소 길이:** 350자\n\n---\n\n### 4. ⏰ 의미 있는 대화 시간\n\n**포함 내용:**\n- 언제 가장 깊은 대화가 이뤄졌는지\n- 그 시간대에 나눈 대화 내용\n- 이 시간대가 특별한 이유\n- 활용 전략\n\n**구체적 예시:**\n\"두 분은 주로 [시간대]에 진짜 속마음을 나눠요.\n[날짜 시간]에는 이런 대화가 있었죠:\n'${userName}: ...'\n'${partnerName}: ...'\n\n이 시간대가 특별한 이유는...\"\n\n**톤:** 발견의 기쁨\n**최소 길이:** 250자\n\n---\n\n### 5. ⚠️ 조심해야 할 3가지\n\n**포함 내용:**\n- 관계에 해로울 수 있는 패턴 3가지\n- 각 패턴의 구체적 예시 (대화 인용)\n- 왜 위험한지\n- 구체적 대안 (\"이렇게 말해보세요:\")\n\n**형식:**\n1️⃣ [패턴1]\n문제: [실제 대화 인용]\n위험: ...\n대안: \"${userName}님, 다음엔 이렇게 말해보는 건 어때요: '...'\"\n\n2️⃣ [패턴2]\n...\n\n**톤:** 솔직하되 희망적\n**최소 길이:** 400자\n\n---\n\n### 6. 💡 Tea의 종합 조언\n\n**포함 내용:**\n- 현재 관계 상태 종합 진단\n- ${partnerName}님이 지금 진짜 필요한 것\n- ${userName}님이 오늘부터 할 수 있는 3가지\n- 관계의 미래 전망 (희망적으로)\n\n**구조:**\n📊 현재 상태: ...\n\n💭 ${partnerName}님의 마음: ...\n\n🎯 오늘부터 실천:\n  1. [구체적 행동1]: \"이렇게 말해보세요: '...'\"\n  2. [구체적 행동2]: ...\n  3. [구체적 행동3]: ...\n\n🌱 Tea의 마지막 한마디: ...\n\n**톤:** 따뜻한 조언자, 희망적\n**최소 길이:** 450자\n\n---\n\n**최종 형식 (JSON 배열):**\n\n\\`\\`\\`json\n[\n  {\n    \"title\": \"💬 티키타카 지수: 85점\",\n    \"description\": \"250자 이상의 따뜻하고 구체적인 내용...\"\n  },\n  {\n    \"title\": \"🎭 ${partnerName}님의 진짜 소통 스타일\",\n    \"description\": \"300자 이상, 실제 대화 인용 포함...\"\n  },\n  {\n    \"title\": \"📝 ${partnerName}님의 취향 노트\",\n    \"description\": \"350자 이상, 구체적 팁 포함...\"\n  },\n  {\n    \"title\": \"⏰ 의미 있는 대화 시간\",\n    \"description\": \"250자 이상...\"\n  },\n  {\n    \"title\": \"⚠️ 조심해야 할 3가지\",\n    \"description\": \"400자 이상, 대안 포함...\"\n  },\n  {\n    \"title\": \"💡 Tea의 종합 조언\",\n    \"description\": \"450자 이상, 실천 가능한 3가지 포함...\"\n  }\n]\n\\`\\`\\`\n\n**체크리스트:**\n- [ ] 모든 인사이트에 실제 대화 인용\n- [ ] 일반론 제거, 맞춤형 조언만\n- [ ] 구체적 실행 방법 (\"이렇게 말해보세요: '...'\")\n- [ ] 따뜻하되 솔직\n- [ ] 최소 글자 수 준수`,\n      },\n    ],\n  });\n\n  const insights = parseJSON(response);\n\n  if (!Array.isArray(insights) || insights.length < 6) {\n    throw new Error(`인사이트 생성 실패: ${insights.length}개만 생성됨`);\n  }\n\n  console.log(`✓ 인사이트 ${insights.length}개 생성 완료`);\n  insights.forEach((insight, i) => {\n    console.log(\n      `  ${i + 1}. ${insight.title} (${insight.description?.length || 0}자)`,\n    );\n  });\n\n  return insights;\n}\n\n// ========== 메인 함수 ==========\n\nexport async function analyzeConversationMultiTurn(\n  messages: Message[],\n  stats: any,\n  primaryRelationship: string = \"친구\",\n  secondaryRelationships: string[] = [],\n): Promise<any> {\n  const participants = Array.from(new Set(messages.map((m) => m.participant)));\n  const userName = participants[0] || \"사용자\";\n  const partnerName = participants[1] || \"상대방\";\n  const relationshipContext =\n    secondaryRelationships.length > 0\n      ? `${primaryRelationship} (주요) + ${secondaryRelationships.join(\", \")}`\n      : primaryRelationship;\n\n  console.log(\"\\n======== Multi-Turn 분석 시작 ========\");\n  console.log(`참여자: ${userName} ↔ ${partnerName}`);\n  console.log(`관계: ${relationshipContext}`);\n  console.log(`메시지: ${messages.length}개`);\n\n  // Step 0: 기본 통계 계산 (코드로)\n  const basicStats = processConversationData(messages, {});\n\n  // Step 1: 전체 이해\n  const turn1 = await turn1_understanding(\n    messages,\n    userName,\n    partnerName,\n    relationshipContext,\n  );\n\n  // Step 2: 심층 분석\n  const turn2 = await turn2_deepDive(messages, userName, partnerName, turn1);\n\n  // Step 3: 최종 보고서\n  const insights = await turn3_report(\n    messages,\n    userName,\n    partnerName,\n    basicStats,\n    turn1,\n    turn2,\n  );\n\n  console.log(\"\\n======== 분석 완료 ========\\n\");\n\n  // 최종 결과 반환\n  return {\n    sentimentScore: basicStats.tikitakaScore,\n    sentimentDistribution: [\n      {\n        name: \"긍정적\",\n        value: Math.round(basicStats.sentimentRatio.positive * 100),\n      },\n      {\n        name: \"중립적\",\n        value: Math.round(basicStats.sentimentRatio.neutral * 100),\n      },\n      {\n        name: \"부정적\",\n        value: Math.round(basicStats.sentimentRatio.negative * 100),\n      },\n    ],\n    insights: insights.slice(0, 6),\n    processedData: basicStats,\n    deepAnalysis: {\n      turn1: turn1.analysis,\n      turn2: turn2.analysis,\n    },\n  };\n}\n\nasync function callWithRetry<T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  retryDelay: number = 2000,\n): Promise<T> {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error: any) {\n      const isLastAttempt = i === maxRetries - 1;\n\n      if (isLastAttempt) {\n        console.error(`최종 실패 (${maxRetries}번 시도):`, error.message);\n        throw error;\n      }\n\n      const waitTime = retryDelay * (i + 1);\n      console.warn(`재시도 ${i + 1}/${maxRetries} (${waitTime}ms 후)...`);\n      await new Promise((resolve) => setTimeout(resolve, waitTime));\n    }\n  }\n\n  throw new Error(\"Unexpected error in retry logic\");\n}\n\n// ========== 타임아웃 래퍼 ==========\n\nasync function withTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  timeoutMessage: string = \"작업 시간 초과\",\n): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error(timeoutMessage)), timeoutMs),\n    ),\n  ]);\n}\n\n// ========== 에러 핸들링이 강화된 메인 함수 ==========\n\nexport async function analyzeConversationMultiTurnSafe(\n  messages: Message[],\n  stats: any,\n  primaryRelationship: string = \"친구\",\n  secondaryRelationships: string[] = [],\n  userPurpose?: string,\n): Promise<any> {\n  try {\n    // 각 Turn마다 타임아웃과 재시도 적용\n    const participants = Array.from(\n      new Set(messages.map((m) => m.participant)),\n    );\n    const userName = participants[0] || \"사용자\";\n    const partnerName = participants[1] || \"상대방\";\n    let relationshipContext =\n      secondaryRelationships.length > 0\n        ? `${primaryRelationship} (주요) + ${secondaryRelationships.join(\", \")}`\n        : primaryRelationship;\n    \n    if (userPurpose) {\n      relationshipContext += `\\n\\n분석 목적: ${userPurpose}`;\n    }\n\n    console.log(\"\\n======== Multi-Turn 분석 시작 (Safe Mode) ========\");\n    console.log(`참여자: ${userName} ↔ ${partnerName}`);\n    console.log(`관계: ${relationshipContext}`);\n    console.log(`메시지: ${messages.length}개`);\n\n    // Step 0: 기본 통계\n    const basicStats = processConversationData(messages, {});\n\n    // Step 1: 전체 이해 (타임아웃 90초, 재시도 3회)\n    const turn1 = await callWithRetry(\n      () =>\n        withTimeout(\n          turn1_understanding(\n            messages,\n            userName,\n            partnerName,\n            relationshipContext,\n          ),\n          90000,\n          \"Turn 1 분석 시간 초과 (90초)\",\n        ),\n      3,\n    );\n\n    // Step 2: 심층 분석 (타임아웃 120초, 재시도 3회)\n    const turn2 = await callWithRetry(\n      () =>\n        withTimeout(\n          turn2_deepDive(messages, userName, partnerName, turn1),\n          120000,\n          \"Turn 2 분석 시간 초과 (120초)\",\n        ),\n      3,\n    );\n\n    // Step 3: 최종 보고서 (타임아웃 90초, 재시도 3회)\n    const insights = await callWithRetry(\n      () =>\n        withTimeout(\n          turn3_report(\n            messages,\n            userName,\n            partnerName,\n            basicStats,\n            turn1,\n            turn2,\n          ),\n          90000,\n          \"Turn 3 보고서 생성 시간 초과 (90초)\",\n        ),\n      3,\n    );\n\n    console.log(\"\\n======== 분석 완료 ========\\n\");\n\n    return {\n      sentimentScore: basicStats.tikitakaScore,\n      sentimentDistribution: [\n        {\n          name: \"긍정적\",\n          value: Math.round(basicStats.sentimentRatio.positive * 100),\n        },\n        {\n          name: \"중립적\",\n          value: Math.round(basicStats.sentimentRatio.neutral * 100),\n        },\n        {\n          name: \"부정적\",\n          value: Math.round(basicStats.sentimentRatio.negative * 100),\n        },\n      ],\n      insights: insights.slice(0, 6),\n      processedData: basicStats,\n      deepAnalysis: {\n        turn1: turn1.analysis,\n        turn2: turn2.analysis,\n      },\n    };\n  } catch (error: any) {\n    console.error(\"\\n======== Multi-Turn 분석 실패 ========\");\n    console.error(\"에러:\", error.message);\n    console.error(\"스택:\", error.stack);\n\n    // 사용자 친화적 에러 메시지\n    throw new Error(\n      \"대화 분석 중 문제가 발생했습니다. \" +\n        \"잠시 후 다시 시도해주세요. \" +\n        `(오류 코드: MT-${error.message.substring(0, 10).replace(/\\s/g, \"-\")})`,\n    );\n  }\n}\n","size_bytes":25329},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/services/gemini-filter.ts":{"content":"import { GoogleGenerativeAI } from '@google/generative-ai';\n\nexport interface Message {\n  date: string;\n  user: string;\n  message: string;\n  index: number;\n}\n\nexport interface FilteredMessage extends Message {\n  importance: 'HIGH' | 'MEDIUM';\n  reason: string;\n}\n\nexport interface FilterResult {\n  high: FilteredMessage[];\n  medium: FilteredMessage[];\n  stats: {\n    total: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\n/**\n * 필터링 프롬프트 생성 (FBI 증거 수집관 버전)\n */\nexport function createFilterPrompt(\n  batch: Message[],\n  relationshipType: string,\n  analysisPurpose: string,\n  batchNumber: number = 1,\n  totalBatches: number = 1\n): string {\n  const startIndex = batch.length > 0 ? batch[0].index : 0;\n  const endIndex = batch.length > 0 ? batch[batch.length - 1].index : 0;\n  \n  return `# 🔍 FBI 증거 수집 프로토콜\n\n당신은 FBI 범죄 현장 조사관(CSI)입니다.\n경력 12년, 5,000건 이상의 현장 증거 수집 경험.\n\n## 임무\n\n대화 = 범죄 현장\n메시지 = 증거\n목표: 관계 분석에 필요한 증거를 등급별로 분류\n\n---\n\n## 배치 정보\n\n- 배치: ${batchNumber}/${totalBatches}\n- 범위: #${startIndex} ~ #${endIndex}\n- 개수: ${batch.length}개\n- 관계: ${relationshipType}\n- 목적: ${analysisPurpose}\n\n---\n\n## 증거 분류 기준\n\n### 🔴 CRITICAL (결정적 증거)\n\n\"이것 없이는 관계 분석 불가\"\n\n**1. 관계 전환점**\n- 호칭 변화 (\"너\" ↔ \"OOO씨\")\n- 관계 정의 (\"우리 사귀는 거야?\")\n- 고백/거절 (\"사랑해\", \"미안해\")\n\n**2. 갈등/해소**\n- 갈등 발생 (\"진짜 화났어\")\n- 갈등 고조 (\"너무해\")\n- 화해 시도 (\"미안해\")\n\n**3. 감정 폭발**\n- 분노 (\"열받아\")\n- 슬픔 (\"너무 속상해\")\n- 기쁨 (\"너무 행복해!\")\n\n**4. 취약성 노출**\n- 비밀 공유 (\"아무한테도 안 말했는데\")\n- 고민 (\"사실 나 요즘...\")\n- 도움 요청 (\"도와줄 수 있어?\")\n\n**5. 경계선**\n- 경계 설정 (\"이건 좀 아닌 것 같아\")\n- 거절 (\"미안, 그건 못해\")\n- 압박 (\"왜 안 해줘?\")\n\n---\n\n### 🟡 MEDIUM (관련 증거)\n\n\"맥락과 패턴 이해에 필요\"\n\n**1. 의미있는 일상**\n- 하루 공유 (\"오늘 이런 일 있었어\")\n- 감정 공유 (\"기분 좋아\")\n\n**2. 미래 계획**\n- 약속 (\"다음 주에 볼까?\")\n- 여행 (\"여름에 어디 갈까?\")\n\n**3. 관심사**\n- 취향 (\"나 이거 좋아해\")\n- 의견 (\"너는 어떻게 생각해?\")\n\n**4. 배려/지지**\n- 챙기기 (\"밥 먹었어?\")\n- 응원 (\"할 수 있어!\")\n- 감사 (\"고마워\")\n\n**5. 농담/장난**\n- 티키타카\n- 놀리기\n- 밈 교환\n\n---\n\n### ⚪ LOW (배경 소음)\n\n\"개수만 카운트, 저장 안 함\"\n\n**1. 형식적 인사**\n- \"좋은 아침\", \"안녕\", \"잘자\"\n\n**2. 단순 반응**\n- \"ㅋㅋ\", \"ㅎㅎ\", \"ㅇㅇ\"\n- 이모티콘/스티커만\n\n**3. 중복 루틴**\n- 매일 같은 인사\n- \"뭐해?\", \"먹었어?\"\n\n---\n\n## 출력 형식\n\n\\`\\`\\`json\n{\n  \"critical\": [\n    {\n      \"index\": 145,\n      \"date\": \"2024-03-15 14:30\",\n      \"user\": \"userA\",\n      \"message\": \"전체 메시지 원문\",\n      \"reason\": \"갈등 표출 - 감정 폭발, 관계 직접 영향\"\n    }\n  ],\n  \"medium\": [\n    {\n      \"index\": 67,\n      \"date\": \"2024-03-10 09:15\",\n      \"user\": \"userB\",\n      \"message\": \"전체 메시지 원문\",\n      \"reason\": \"미래 계획 - 함께하는 시간\"\n    }\n  ],\n  \"stats\": {\n    \"total\": ${batch.length},\n    \"high\": 0,\n    \"medium\": 0,\n    \"low\": 0\n  }\n}\n\\`\\`\\`\n\n---\n\n## FBI 원칙\n\n**1. 증거를 놓치지 마라**\n- 애매하면 MEDIUM으로\n- 중요할 것 같으면 올려서 분류\n- \"덜 중요한 것 포함\" > \"중요한 것 놓침\"\n\n**2. 오염된 증거는 쓸모없다**\n- 명확한 기준으로만\n- 이유는 구체적으로 (30자+)\n\n**3. 증거 연쇄 보관**\n- 인덱스 정확히\n- 타임스탬프 정확히\n- 원문 전체 포함\n\n**4. 맥락이 핵심**\n- 전후 메시지 고려\n- 대화 흐름 속에서 판단\n\n---\n\n## 특별 지시\n\n1. **원문 보존**: 전체 메시지 포함, 이모티콘·특수문자 포함\n2. **한국어 특성**: \"ㅋㅋ\"는 진짜 웃음 vs 어색함 구분, \"...\"는 말줄임 vs 불편함, 반말/존댓말은 관계 변화 신호\n\n---\n\n메시지:\n${batch.map(m => `${m.index}. [${m.date}] ${m.user}: ${m.message}`).join('\\n')}\n\n이제 배치 #${batchNumber} 메시지를 분류하세요. 정확한 JSON으로 출력하세요.`;\n}\n\n/**\n * 단일 배치 필터링\n */\nexport async function filterBatch(\n  batch: Message[],\n  relationshipType: string,\n  analysisPurpose: string,\n  batchNumber: number = 1,\n  totalBatches: number = 1\n): Promise<FilterResult> {\n  const apiKey = process.env.GEMINI_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('GEMINI_API_KEY not found in environment variables');\n  }\n\n  const genAI = new GoogleGenerativeAI(apiKey);\n  const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });\n\n  const prompt = createFilterPrompt(batch, relationshipType, analysisPurpose, batchNumber, totalBatches);\n\n  let lastError: Error | null = null;\n  \n  // 3회 재시도\n  for (let attempt = 1; attempt <= 3; attempt++) {\n    try {\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      // JSON 추출 (```json ``` 제거)\n      let jsonText = text.trim();\n      if (jsonText.startsWith('```json')) {\n        jsonText = jsonText.replace(/```json\\n?/g, '').replace(/```\\n?$/g, '');\n      } else if (jsonText.startsWith('```')) {\n        jsonText = jsonText.replace(/```\\n?/g, '');\n      }\n\n      const parsed = JSON.parse(jsonText);\n\n      // FilteredMessage 형식으로 변환 (critical → high 매핑)\n      const criticalArray = parsed.critical || parsed.high || [];\n      const mediumArray = parsed.medium || [];\n      \n      const high: FilteredMessage[] = criticalArray.map((item: any) => ({\n        index: item.index,\n        date: item.date,\n        user: item.user,\n        message: item.message,\n        reason: item.reason || item.classification_reason || '',\n        importance: 'HIGH' as const,\n      }));\n\n      const medium: FilteredMessage[] = mediumArray.map((item: any) => ({\n        index: item.index,\n        date: item.date,\n        user: item.user,\n        message: item.message,\n        reason: item.reason || item.classification_reason || '',\n        importance: 'MEDIUM' as const,\n      }));\n\n      // stats가 없거나 부정확하면 배열 길이로 재계산\n      const highCount = high.length;\n      const mediumCount = medium.length;\n      const lowCount = batch.length - highCount - mediumCount;\n\n      return {\n        high,\n        medium,\n        stats: {\n          total: batch.length,\n          high: highCount,\n          medium: mediumCount,\n          low: lowCount,\n        },\n      };\n    } catch (error: any) {\n      lastError = error;\n      console.error(`Attempt ${attempt} failed:`, error.message);\n\n      // Rate Limit 에러면 5초 대기\n      if (error.message?.includes('RESOURCE_EXHAUSTED') || error.message?.includes('429')) {\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      } else {\n        // 일반 에러면 1초 대기\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  // 모든 재시도 실패\n  console.error('All retry attempts failed:', lastError);\n  return {\n    high: [],\n    medium: [],\n    stats: {\n      total: batch.length,\n      high: 0,\n      medium: 0,\n      low: batch.length,\n    },\n  };\n}\n\n/**\n * 모든 배치 순차 처리\n */\nexport async function processBatches(\n  batches: Message[][],\n  relationshipType: string,\n  analysisPurpose: string,\n  onProgress?: (current: number, total: number) => void\n): Promise<FilterResult[]> {\n  const results: FilterResult[] = [];\n  const totalBatches = batches.length;\n\n  for (let i = 0; i < batches.length; i++) {\n    const batch = batches[i];\n    const batchNumber = i + 1;\n    \n    if (onProgress) {\n      onProgress(batchNumber, totalBatches);\n    }\n\n    const result = await filterBatch(batch, relationshipType, analysisPurpose, batchNumber, totalBatches);\n    results.push(result);\n\n    // Rate Limit 방지를 위한 대기 (마지막 배치 제외)\n    if (i < batches.length - 1) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n\n  return results;\n}\n\n/**\n * 모든 배치 결과 병합\n */\nexport function mergeFilterResults(results: FilterResult[]): FilterResult {\n  const merged: FilterResult = {\n    high: [],\n    medium: [],\n    stats: {\n      total: 0,\n      high: 0,\n      medium: 0,\n      low: 0,\n    },\n  };\n\n  // 중복 제거를 위한 Set\n  const highIndexes = new Set<number>();\n  const mediumIndexes = new Set<number>();\n\n  for (const result of results) {\n    // HIGH 메시지 병합 (중복 제거)\n    for (const msg of result.high) {\n      if (!highIndexes.has(msg.index)) {\n        highIndexes.add(msg.index);\n        merged.high.push(msg);\n      }\n    }\n\n    // MEDIUM 메시지 병합 (중복 제거)\n    for (const msg of result.medium) {\n      if (!mediumIndexes.has(msg.index)) {\n        mediumIndexes.add(msg.index);\n        merged.medium.push(msg);\n      }\n    }\n\n    // total 합산\n    merged.stats.total += result.stats.total;\n  }\n\n  // 중복 제거된 배열 길이로 통계 재계산\n  merged.stats.high = merged.high.length;\n  merged.stats.medium = merged.medium.length;\n  merged.stats.low = merged.stats.total - merged.stats.high - merged.stats.medium;\n\n  return merged;\n}\n","size_bytes":9491},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(40, 20%, 98%);\n  --foreground: hsl(220, 13%, 13%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 13%, 13%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 13%, 13%);\n  --primary: hsl(145, 32%, 74%);\n  --primary-foreground: hsl(220, 13%, 13%);\n  --secondary: hsl(145, 32%, 64%);\n  --secondary-foreground: hsl(220, 13%, 13%);\n  --muted: hsl(120, 20%, 95%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(120, 30%, 93%);\n  --accent-foreground: hsl(220, 13%, 13%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(145, 32%, 74%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(145, 32%, 74%);\n  --primary-foreground: hsl(220, 13%, 13%);\n  --secondary: hsl(145, 32%, 64%);\n  --secondary-foreground: hsl(220, 13%, 13%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(145, 30%, 20%);\n  --accent-foreground: hsl(145, 32%, 74%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(145, 32%, 74%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes pulse-subtle {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.8;\n  }\n}\n\n@keyframes progress-bar {\n  0% {\n    width: 0%;\n  }\n  100% {\n    width: 100%;\n  }\n}\n\n@keyframes scale-in {\n  0% {\n    transform: scale(0);\n    opacity: 0;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.fade-in-up {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n.tip-rotate {\n  animation: pulse-subtle 2s ease-in-out infinite;\n}\n\n.progress-bar-fill {\n  transition: width 0.3s ease-in-out;\n}\n\n.animate-scale-in {\n  animation: scale-in 0.2s ease-in-out;\n}\n\n/* Feedback Form Styles */\n#feedback-section {\n  scroll-margin-top: 80px;\n  position: relative;\n}\n\n.feedback-container {\n  padding: 40px 16px;\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  overflow-y: auto;\n}\n\n.feedback-form {\n  background: white;\n  border-radius: 16px;\n  padding: 32px 24px;\n  max-width: 600px;\n  width: 100%;\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.feedback-header {\n  text-align: center;\n  margin-bottom: 32px;\n}\n\n.feedback-header h2 {\n  font-size: 24px;\n  font-weight: 700;\n  color: #1a1a1a;\n  margin-bottom: 8px;\n}\n\n.feedback-header .subtitle {\n  font-size: 14px;\n  color: #666;\n  line-height: 1.6;\n}\n\n.question-section {\n  margin-bottom: 32px;\n}\n\n.question-label {\n  display: block;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1a1a1a;\n  margin-bottom: 16px;\n  line-height: 1.5;\n}\n\n.emoji-buttons {\n  display: flex;\n  gap: 8px;\n  justify-content: space-between;\n}\n\n.emoji-btn {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  padding: 16px 8px;\n  border: 2px solid #e5e5e5;\n  border-radius: 12px;\n  background: white;\n  cursor: pointer;\n  transition: all 0.2s;\n  font-size: 14px;\n}\n\n.emoji-btn .emoji {\n  font-size: 28px;\n}\n\n.emoji-btn .label {\n  font-size: 12px;\n  color: #666;\n  white-space: pre-line;\n  text-align: center;\n  line-height: 1.2;\n}\n\n.emoji-btn:hover {\n  border-color: #A8D5BA;\n  transform: translateY(-2px);\n}\n\n.emoji-btn.selected {\n  border-color: #A8D5BA;\n  background: #F0F9F4;\n}\n\n.conditional-section {\n  margin-top: 20px;\n  padding: 20px;\n  background: #F9F9F9;\n  border-radius: 12px;\n  border-left: 4px solid #A8D5BA;\n  overflow: hidden;\n}\n\n.conditional-label {\n  font-size: 15px;\n  font-weight: 600;\n  color: #1a1a1a;\n  margin-bottom: 12px;\n}\n\n.checkbox-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  margin-bottom: 8px;\n  background: white;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 15px;\n  color: #333;\n  transition: background 0.2s;\n}\n\n.checkbox-item:hover {\n  background: #f5f5f5;\n}\n\n.checkbox-item input[type=\"checkbox\"] {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  accent-color: #A8D5BA;\n}\n\n.radio-group {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.radio-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 16px;\n  border: 2px solid #e5e5e5;\n  border-radius: 12px;\n  background: white;\n  cursor: pointer;\n  font-size: 16px;\n  transition: all 0.2s;\n}\n\n.radio-item:hover {\n  border-color: #A8D5BA;\n  background: #F0F9F4;\n}\n\n.radio-item input[type=\"radio\"] {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  accent-color: #A8D5BA;\n}\n\n.radio-item input[type=\"radio\"]:checked + * {\n  font-weight: 600;\n}\n\n.radio-item:has(input:checked) {\n  border-color: #A8D5BA;\n  background: #F0F9F4;\n}\n\n.pricing-hint {\n  margin-top: 12px;\n  padding: 12px;\n  background: #FFF9E6;\n  border-radius: 8px;\n  font-size: 14px;\n  color: #666;\n  text-align: center;\n}\n\n.nps-buttons {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.nps-btn {\n  padding: 16px;\n  border: 2px solid #e5e5e5;\n  border-radius: 12px;\n  background: white;\n  cursor: pointer;\n  font-size: 15px;\n  text-align: left;\n  transition: all 0.2s;\n}\n\n.nps-btn:hover {\n  border-color: #A8D5BA;\n  background: #F0F9F4;\n}\n\n.nps-btn.selected {\n  border-color: #A8D5BA;\n  background: #F0F9F4;\n  font-weight: 600;\n}\n\n.feedback-textarea {\n  width: 100%;\n  padding: 16px;\n  border: 2px solid #e5e5e5;\n  border-radius: 12px;\n  font-size: 16px;\n  font-family: inherit;\n  resize: vertical;\n  min-height: 80px;\n  transition: border-color 0.2s;\n}\n\n.feedback-textarea:focus {\n  outline: none;\n  border-color: #A8D5BA;\n}\n\n.earlybird-section {\n  margin-bottom: 24px;\n}\n\n.earlybird-box {\n  padding: 24px;\n  background: linear-gradient(135deg, #F0F9F4 0%, #E8F5E9 100%);\n  border-radius: 16px;\n  border: 2px solid #A8D5BA;\n  text-align: center;\n}\n\n.earlybird-box h3 {\n  font-size: 20px;\n  font-weight: 700;\n  color: #1a1a1a;\n  margin-bottom: 12px;\n}\n\n.earlybird-box p {\n  font-size: 15px;\n  color: #333;\n  line-height: 1.6;\n  margin-bottom: 16px;\n}\n\n.earlybird-box strong {\n  color: #2E7D32;\n  font-size: 18px;\n}\n\n.email-input {\n  width: 100%;\n  padding: 16px;\n  border: 2px solid #A8D5BA;\n  border-radius: 12px;\n  font-size: 16px;\n  text-align: center;\n}\n\n.email-input:focus {\n  outline: none;\n  border-color: #2E7D32;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 18px;\n  background: #A8D5BA;\n  color: #1a1a1a;\n  font-size: 18px;\n  font-weight: 700;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.submit-btn:hover:not(:disabled) {\n  background: #2E7D32;\n  color: white;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n}\n\n.submit-btn:disabled {\n  background: #e5e5e5;\n  color: #999;\n  cursor: not-allowed;\n}\n\n@media (max-width: 640px) {\n  .emoji-buttons {\n    gap: 6px;\n  }\n  \n  .emoji-btn {\n    padding: 12px 4px;\n  }\n  \n  .emoji-btn .emoji {\n    font-size: 24px;\n  }\n  \n  .emoji-btn .label {\n    font-size: 11px;\n  }\n}\n","size_bytes":7597},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/results.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport {\n  Home,\n  Share2,\n  Lightbulb,\n  TrendingUp,\n  Users,\n  Heart,\n  AlertCircle,\n  CheckCircle,\n  MessageSquare,\n  Activity,\n  Coffee,\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { AnalysisResult } from \"@shared/schema\";\nimport FeedbackPopup from \"@/FeedbackPopup\";\n\nexport default function Results() {\n  const [, params] = useRoute(\"/results/:id\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSharing, setIsSharing] = useState(false);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);\n  const analysisId = params?.id;\n\n  const { data: analysis, isLoading } = useQuery<AnalysisResult>({\n    queryKey: [\"/api/analysis\", analysisId],\n    enabled: !!analysisId,\n  });\n\n  const shareMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", `/api/share/${analysisId}`, {});\n      return res.json();\n    },\n    onSuccess: async (data) => {\n      const shareUrl = `${window.location.origin}${data.shareUrl}`;\n\n      try {\n        await navigator.clipboard.writeText(shareUrl);\n        toast({\n          title: \"✓ 링크가 복사되었어요!\",\n          description: \"친구에게 공유하고 피드백을 받아보세요\",\n        });\n      } catch (err) {\n        toast({\n          title: \"링크가 생성되었어요\",\n          description: shareUrl,\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"오류가 발생했어요\",\n        description: \"다시 시도해주세요\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleShare = async () => {\n    setIsSharing(true);\n    await shareMutation.mutateAsync();\n    setIsSharing(false);\n  };\n\n  useEffect(() => {\n    if (feedbackSubmitted) return;\n\n    const handleScroll = () => {\n      const scrollTop = window.scrollY;\n      const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const scrollPercent = (scrollTop / docHeight) * 100;\n\n      if (scrollPercent >= 95 && !showFeedback) {\n        setShowFeedback(true);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [showFeedback, feedbackSubmitted]);\n\n  const handleFeedbackSubmit = (data: any) => {\n    console.log('Feedback submitted:', data);\n    setFeedbackSubmitted(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">분석 결과를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analysis) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center px-4 bg-background\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n            결과를 찾을 수 없어요\n          </h2>\n          <Button\n            onClick={() => setLocation(\"/upload\")}\n            className=\"bg-primary text-primary-foreground hover:bg-secondary\"\n          >\n            새로운 분석 시작하기\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { insights, deepAnalysis, stage2Data, teaCoachReport } = analysis;\n\n  if (!insights || insights.length === 0) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center px-4 bg-background\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n            분석이 아직 완료되지 않았어요\n          </h2>\n          <p className=\"text-muted-foreground mb-4\">잠시 후 다시 확인해주세요</p>\n          <Button\n            onClick={() => setLocation(\"/upload\")}\n            className=\"bg-primary text-primary-foreground hover:bg-secondary\"\n          >\n            새로운 분석 시작하기\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Multi-turn 분석 결과 (turn1, turn2)\n  const turn1 = deepAnalysis?.turn1;\n  const turn2 = deepAnalysis?.turn2;\n  \n  // 4단계 분석 결과 (stage2Data 또는 deepAnalysis가 직접 stage2 형식인 경우)\n  const stage2 = stage2Data || (deepAnalysis && !deepAnalysis.turn1 ? deepAnalysis : null);\n\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"bg-card dark:bg-card rounded-2xl shadow-lg p-6 mb-8 fade-in-up\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n              대화 분석 결과\n            </h1>\n            {analysis.userPurpose && (\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                분석 목적: {analysis.userPurpose}\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Turn 1: 전체 관계 분석 */}\n        {turn1 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center fade-in-up\">\n              <Users className=\"w-6 h-6 mr-2 text-primary\" />\n              전체 관계 분석\n            </h2>\n\n            {/* 관계 평가 */}\n            {turn1.relationshipAssessment && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2 text-primary\" />\n                  관계 건강도\n                </h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"text-4xl font-bold text-primary\">\n                      {turn1.relationshipAssessment.healthScore}/10\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm text-muted-foreground mb-1\">전반적 분위기</div>\n                      <div className=\"text-foreground font-medium\">\n                        {turn1.relationshipAssessment.overallTone}\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-foreground leading-relaxed\">\n                    {turn1.relationshipAssessment.summary}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* 주요 이벤트 */}\n            {turn1.keyEvents && turn1.keyEvents.length > 0 && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                  <Activity className=\"w-5 h-5 mr-2 text-primary\" />\n                  중요한 전환점\n                </h3>\n                <div className=\"space-y-4\">\n                  {turn1.keyEvents.map((event: any, index: number) => (\n                    <div key={index} className=\"border-l-4 border-primary pl-4\">\n                      <div className=\"text-sm text-muted-foreground mb-1\">\n                        {event.timestamp} • {event.participants}\n                      </div>\n                      <p className=\"text-foreground mb-2\">{event.context}</p>\n                      <div className=\"text-sm text-muted-foreground\">\n                        💡 {event.significance}\n                      </div>\n                      <div className=\"mt-1\">\n                        <span className={`inline-block px-2 py-0.5 rounded text-xs ${\n                          event.emotionalImpact === '긍정' ? 'bg-green-100 text-green-800' :\n                          event.emotionalImpact === '부정' ? 'bg-red-100 text-red-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {event.emotionalImpact}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 강점 */}\n            {turn1.strengths && turn1.strengths.length > 0 && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 mr-2 text-green-600\" />\n                  관계의 강점\n                </h3>\n                <div className=\"space-y-3\">\n                  {turn1.strengths.map((strength: any, index: number) => (\n                    <div key={index} className=\"flex items-start gap-3\">\n                      <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                        <span className=\"text-green-600 text-sm\">✓</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-foreground\">{strength.strength}</p>\n                        {strength.examples && strength.examples.length > 0 && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            예시: {strength.examples.join(', ')}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 걱정되는 패턴 */}\n            {turn1.concerningPatterns && turn1.concerningPatterns.length > 0 && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                  <AlertCircle className=\"w-5 h-5 mr-2 text-amber-600\" />\n                  주의가 필요한 부분\n                </h3>\n                <div className=\"space-y-3\">\n                  {turn1.concerningPatterns.map((pattern: any, index: number) => (\n                    <div key={index} className=\"flex items-start gap-3\">\n                      <div className=\"w-6 h-6 bg-amber-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                        <span className=\"text-amber-600 text-sm\">!</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-foreground\">{pattern.pattern}</p>\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          빈도: {pattern.frequency}\n                        </div>\n                        {pattern.examples && pattern.examples.length > 0 && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            예시: {pattern.examples.join(', ')}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Turn 2: 심층 분석 */}\n        {turn2 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center fade-in-up\">\n              <MessageSquare className=\"w-6 h-6 mr-2 text-primary\" />\n              심층 소통 분석\n            </h2>\n\n            {/* 소통 스타일 */}\n            {turn2.communicationStyle && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">소통 스타일</h3>\n                <div className=\"space-y-6\">\n                  {Object.entries(turn2.communicationStyle).map(([person, style]: [string, any]) => (\n                    <div key={person} className=\"border-l-4 border-primary pl-4\">\n                      <h4 className=\"font-semibold text-foreground mb-2\">{person}</h4>\n                      <div className=\"space-y-2\">\n                        <div>\n                          <span className=\"text-sm text-muted-foreground\">유형: </span>\n                          <span className=\"text-foreground font-medium\">{style.type}</span>\n                        </div>\n                        {style.traits && style.traits.length > 0 && (\n                          <div>\n                            <div className=\"text-sm text-muted-foreground mb-1\">특징:</div>\n                            <ul className=\"list-disc list-inside space-y-1\">\n                              {style.traits.map((trait: string, idx: number) => (\n                                <li key={idx} className=\"text-foreground text-sm\">{trait}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                        {style.strengths && style.strengths.length > 0 && (\n                          <div>\n                            <div className=\"text-sm text-muted-foreground mb-1\">강점:</div>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {style.strengths.map((strength: string, idx: number) => (\n                                <span key={idx} className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                                  {strength}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        {style.improvements && style.improvements.length > 0 && (\n                          <div>\n                            <div className=\"text-sm text-muted-foreground mb-1\">개선 포인트:</div>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {style.improvements.map((improvement: string, idx: number) => (\n                                <span key={idx} className=\"px-2 py-1 bg-amber-100 text-amber-800 rounded text-xs\">\n                                  {improvement}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 감정 표현 방식 */}\n            {turn2.emotionalExpression && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                  <Heart className=\"w-5 h-5 mr-2 text-pink-600\" />\n                  감정 표현 방식\n                </h3>\n                <div className=\"space-y-3\">\n                  {turn2.emotionalExpression.emojiDependency && (\n                    <div>\n                      <div className=\"text-sm text-muted-foreground mb-2\">이모티콘 사용도</div>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        {Object.entries(turn2.emotionalExpression.emojiDependency).map(([person, level]: [string, any]) => (\n                          <div key={person} className=\"flex items-center gap-2\">\n                            <span className=\"text-foreground font-medium\">{person}:</span>\n                            <span className=\"text-muted-foreground\">{level}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {turn2.emotionalExpression.directness && (\n                    <div>\n                      <div className=\"text-sm text-muted-foreground mb-2\">표현 직접성</div>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        {Object.entries(turn2.emotionalExpression.directness).map(([person, level]: [string, any]) => (\n                          <div key={person} className=\"flex items-center gap-2\">\n                            <span className=\"text-foreground font-medium\">{person}:</span>\n                            <span className=\"text-muted-foreground\">{level}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {turn2.emotionalExpression.asymmetry && (\n                    <div className=\"p-3 bg-accent/20 rounded-lg\">\n                      <p className=\"text-sm text-foreground\">{turn2.emotionalExpression.asymmetry}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* 관계 역학 */}\n            {turn2.relationshipDynamics && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">관계 역학</h3>\n                <div className=\"space-y-4\">\n                  {turn2.relationshipDynamics.powerBalance && (\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground mb-2\">주도권 균형</div>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm text-foreground\">\n                          평가: {turn2.relationshipDynamics.powerBalance.assessment}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          리더: {turn2.relationshipDynamics.powerBalance.leader}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          건강성: {turn2.relationshipDynamics.powerBalance.healthiness}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                  {turn2.relationshipDynamics.intimacyTrend && (\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground mb-2\">친밀도 변화</div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-xs text-muted-foreground\">초기</div>\n                          <div className=\"text-lg font-bold text-foreground\">\n                            {turn2.relationshipDynamics.intimacyTrend.early}\n                          </div>\n                        </div>\n                        <div className=\"text-muted-foreground\">→</div>\n                        <div className=\"text-center\">\n                          <div className=\"text-xs text-muted-foreground\">중기</div>\n                          <div className=\"text-lg font-bold text-foreground\">\n                            {turn2.relationshipDynamics.intimacyTrend.middle}\n                          </div>\n                        </div>\n                        <div className=\"text-muted-foreground\">→</div>\n                        <div className=\"text-center\">\n                          <div className=\"text-xs text-muted-foreground\">최근</div>\n                          <div className=\"text-lg font-bold text-foreground\">\n                            {turn2.relationshipDynamics.intimacyTrend.recent}\n                          </div>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        추세: {turn2.relationshipDynamics.intimacyTrend.direction}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* 특별한 패턴 */}\n            {turn2.specialPatterns && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">발견된 특별한 패턴</h3>\n                <div className=\"space-y-4\">\n                  {turn2.specialPatterns.repeatingTopics && turn2.specialPatterns.repeatingTopics.length > 0 && (\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground mb-2\">반복 주제</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {turn2.specialPatterns.repeatingTopics.map((topic: string, idx: number) => (\n                          <span key={idx} className=\"px-3 py-1 bg-primary/10 text-primary rounded-full text-sm\">\n                            {topic}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {turn2.specialPatterns.happyMoments && turn2.specialPatterns.happyMoments.length > 0 && (\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground mb-2\">😊 행복한 순간들</div>\n                      <div className=\"space-y-2\">\n                        {turn2.specialPatterns.happyMoments.map((moment: any, idx: number) => (\n                          <div key={idx} className=\"p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n                            <div className=\"text-xs text-muted-foreground mb-1\">{moment.timestamp}</div>\n                            <p className=\"text-sm text-foreground italic\">\"{moment.quote}\"</p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {turn2.specialPatterns.awkwardMoments && turn2.specialPatterns.awkwardMoments.length > 0 && (\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground mb-2\">😅 어색한 순간들</div>\n                      <div className=\"space-y-2\">\n                        {turn2.specialPatterns.awkwardMoments.map((moment: any, idx: number) => (\n                          <div key={idx} className=\"p-2 bg-amber-50 dark:bg-amber-900/20 rounded\">\n                            <div className=\"text-xs text-muted-foreground mb-1\">{moment.timestamp}</div>\n                            <p className=\"text-sm text-foreground italic\">\"{moment.quote}\"</p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {turn2.specialPatterns.avoidedTopics && turn2.specialPatterns.avoidedTopics.length > 0 && (\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground mb-2\">🤐 회피하는 주제</div>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        {turn2.specialPatterns.avoidedTopics.map((topic: string, idx: number) => (\n                          <li key={idx} className=\"text-sm text-muted-foreground\">{topic}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* 상대방 현재 상태 */}\n            {turn2.partnerStatus && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">상대방 현재 상태 분석</h3>\n                <div className=\"space-y-3\">\n                  {turn2.partnerStatus.emotionalState && (\n                    <div>\n                      <span className=\"text-sm text-muted-foreground\">감정 상태: </span>\n                      <span className=\"text-foreground font-medium\">{turn2.partnerStatus.emotionalState}</span>\n                    </div>\n                  )}\n                  {turn2.partnerStatus.feelings && (\n                    <div>\n                      <span className=\"text-sm text-muted-foreground\">당신에 대한 감정: </span>\n                      <span className=\"text-foreground font-medium\">{turn2.partnerStatus.feelings}</span>\n                    </div>\n                  )}\n                  {turn2.partnerStatus.hiddenNeeds && (\n                    <div>\n                      <div className=\"text-sm text-muted-foreground mb-1\">숨겨진 욕구</div>\n                      <p className=\"text-foreground\">{turn2.partnerStatus.hiddenNeeds}</p>\n                    </div>\n                  )}\n                  {turn2.partnerStatus.concerns && (\n                    <div>\n                      <div className=\"text-sm text-muted-foreground mb-1\">걱정거리</div>\n                      <p className=\"text-foreground\">{turn2.partnerStatus.concerns}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Stage 2 분석 (4단계 방식) - turn2가 없을 때만 표시 */}\n        {!turn2 && stage2 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center fade-in-up\">\n              <MessageSquare className=\"w-6 h-6 mr-2 text-primary\" />\n              심층 분석 결과\n            </h2>\n\n            {/* 소통 스타일 */}\n            {stage2.communicationStyle && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">소통 스타일</h3>\n                <div className=\"space-y-6\">\n                  {Object.entries(stage2.communicationStyle).map(([person, style]: [string, any]) => (\n                    <div key={person} className=\"border-l-4 border-primary pl-4\">\n                      <h4 className=\"font-semibold text-foreground mb-2\">{person}</h4>\n                      <div className=\"space-y-2\">\n                        {style.type && (\n                          <div>\n                            <span className=\"text-sm text-muted-foreground\">유형: </span>\n                            <span className=\"text-foreground font-medium\">{style.type}</span>\n                          </div>\n                        )}\n                        {style.traits && style.traits.length > 0 && (\n                          <div>\n                            <div className=\"text-sm text-muted-foreground mb-1\">특징:</div>\n                            <ul className=\"list-disc list-inside space-y-1\">\n                              {style.traits.map((trait: string, idx: number) => (\n                                <li key={idx} className=\"text-foreground text-sm\">{trait}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 감정 표현 */}\n            {stage2.emotionalExpression && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                  <Heart className=\"w-5 h-5 mr-2 text-pink-600\" />\n                  감정 표현 방식\n                </h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(stage2.emotionalExpression).map(([key, value]: [string, any]) => (\n                    <div key={key}>\n                      <div className=\"text-sm font-medium text-foreground mb-1\">{key}</div>\n                      <p className=\"text-foreground\">{JSON.stringify(value, null, 2)}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 관계 역학 */}\n            {stage2.relationshipDynamics && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">관계 역학</h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(stage2.relationshipDynamics).map(([key, value]: [string, any]) => (\n                    <div key={key}>\n                      <div className=\"text-sm font-medium text-foreground mb-1\">{key}</div>\n                      <p className=\"text-foreground\">{JSON.stringify(value, null, 2)}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 특별한 패턴 */}\n            {stage2.specialPatterns && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">특별한 패턴</h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(stage2.specialPatterns).map(([key, value]: [string, any]) => (\n                    <div key={key}>\n                      <div className=\"text-sm font-medium text-foreground mb-1\">{key}</div>\n                      <p className=\"text-foreground whitespace-pre-wrap\">{typeof value === 'string' ? value : JSON.stringify(value, null, 2)}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 상대방 상태 */}\n            {stage2.partnerStatus && (\n              <div className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 mb-4 fade-in-up\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">상대방 현재 상태</h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(stage2.partnerStatus).map(([key, value]: [string, any]) => (\n                    <div key={key}>\n                      <div className=\"text-sm font-medium text-foreground mb-1\">{key}</div>\n                      <p className=\"text-foreground whitespace-pre-wrap\">{typeof value === 'string' ? value : JSON.stringify(value, null, 2)}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* AI Insights */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center fade-in-up\">\n            <Lightbulb className=\"w-6 h-6 mr-2 text-primary\" />\n            AI 분석 인사이트\n          </h2>\n\n          <div className=\"space-y-4\">\n            {insights.map((insight, index) => (\n              <div\n                key={index}\n                className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up\"\n                data-testid={`insight-card-${index}`}\n                style={{ animationDelay: `${index * 0.05}s` }}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-sm font-bold text-primary-foreground\">\n                      {index + 1}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                      {insight.title}\n                    </h3>\n                    <p className=\"text-foreground whitespace-pre-wrap leading-relaxed\">\n                      {insight.description}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Tea Coach 실전 조언 */}\n        {teaCoachReport && teaCoachReport.insights && teaCoachReport.insights.length > 0 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center fade-in-up\">\n              <Coffee className=\"w-6 h-6 mr-2 text-primary\" />\n              Tea 코치의 실전 조언\n            </h2>\n\n            <div className=\"bg-gradient-to-br from-primary/5 to-secondary/5 rounded-2xl p-6 mb-6 fade-in-up\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                AI 관계 코치 \"Tea\"가 분석한 실천 가능한 조언입니다\n              </p>\n              {teaCoachReport.metadata && (\n                <div className=\"flex gap-4 text-xs text-muted-foreground\">\n                  <span>📊 인사이트: {teaCoachReport.metadata.total_insights}개</span>\n                  <span>📝 분석 깊이: {teaCoachReport.metadata.total_words}자</span>\n                  <span>🎯 실행 가능성: {teaCoachReport.metadata.actionability}</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              {teaCoachReport.insights.map((insight: any, index: number) => (\n                <div\n                  key={insight.id || index}\n                  className=\"bg-card dark:bg-card rounded-xl shadow-lg p-6 fade-in-up border-l-4 border-primary\"\n                  data-testid={`tea-insight-card-${index}`}\n                  style={{ animationDelay: `${index * 0.05}s` }}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-lg font-bold text-primary-foreground\">\n                        {insight.id || index + 1}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-foreground mb-3\">\n                        {insight.title}\n                      </h3>\n                      <p className=\"text-foreground whitespace-pre-wrap leading-relaxed mb-4\">\n                        {insight.description}\n                      </p>\n                      {insight.evidence_used && insight.evidence_used.length > 0 && (\n                        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                          <span>📎 증거 인용:</span>\n                          <span>{insight.evidence_used.length}개 메시지</span>\n                          {insight.word_count && (\n                            <span className=\"ml-2\">• {insight.word_count}자</span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons - 최하단 배치 */}\n        <div className=\"mt-8 flex flex-col sm:flex-row gap-4 justify-center fade-in-up\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/\")}\n            size=\"lg\"\n            className=\"w-full sm:w-auto\"\n            data-testid=\"button-home\"\n          >\n            <Home className=\"w-5 h-5 mr-2\" />홈으로 돌아가기\n          </Button>\n          <Button\n            onClick={handleShare}\n            disabled={isSharing}\n            size=\"lg\"\n            className=\"w-full sm:w-auto bg-gradient-to-r from-[#a8d5ba] to-[#8bc9a3] dark:from-[#2d5a3d] dark:to-[#234a32] hover:from-[#94c9a9] hover:to-[#7ab899] dark:hover:from-[#3d6a4d] dark:hover:to-[#2d5a3d] text-[#1a3a2a] dark:text-white font-semibold\"\n            data-testid=\"button-share\"\n          >\n            <Share2 className=\"w-5 h-5 mr-2\" />\n            {isSharing ? \"생성 중...\" : \"공유하기 (24시간)\"}\n          </Button>\n        </div>\n\n        {/* Feedback Popup */}\n        {showFeedback && !feedbackSubmitted && (\n          <FeedbackPopup \n            isOpen={showFeedback}\n            onClose={() => setShowFeedback(false)} \n            onSubmit={handleFeedbackSubmit}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":36187},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/services/data-processor.ts":{"content":"// server/services/data-processor.ts\n// Step 2: 정확한 수치 계산 및 데이터 가공\n\nexport interface Message {\n  timestamp: string;\n  participant: string;\n  content: string;\n}\n\nexport interface TimeSlot {\n  hour: string;\n  count: number;\n}\n\nexport interface KeywordCount {\n  word: string;\n  count: number;\n}\n\nexport interface DateEvent {\n  date: string;\n  content: string;\n}\n\nexport interface AffectionStat {\n  word: string;\n  count: number;\n}\n\nexport interface RawExtraction {\n  preferences?: Array<{ type: string; content: string }>;\n  importantDates?: DateEvent[];\n  affectionKeywords?: { [key: string]: number };\n  topKeywords?: KeywordCount[];\n}\n\nexport interface ProcessedData {\n  // 정확하게 계산된 기본 지표\n  tikitakaScore: number; // 0-100\n  messageRatio: { [key: string]: number };\n  avgMessageLength: { [key: string]: number };\n  totalMessages: number;\n  \n  // 시간 및 패턴 분석\n  timeDistribution: TimeSlot[];\n  emojiCount: { [key: string]: number };\n  questionRatio: { [key: string]: number };\n  conversationStarters: { [key: string]: number };\n  \n  // 감정 분석\n  sentimentRatio: {\n    positive: number;\n    neutral: number;\n    negative: number;\n  };\n  \n  // AI가 찾은 정보를 정리\n  preferences: {\n    likes: string[];\n    dislikes: string[];\n  };\n  importantDates: DateEvent[];\n  affectionWords: {\n    [key: string]: AffectionStat[];\n  };\n  topKeywords: KeywordCount[];\n  \n  // 응답 속도 분석\n  avgResponseTime: {\n    [key: string]: number; // 평균 응답 시간 (분)\n  };\n}\n\n// 티키타카 지수 계산\nfunction calculateTikitakaScore(\n  messageRatio: { [key: string]: number },\n  questionRatio: { [key: string]: number },\n  emojiCount: { [key: string]: number },\n  avgResponseTime: { [key: string]: number },\n  participants: string[]\n): number {\n  const [user, partner] = participants;\n  \n  // 1. 대화 균형도 (40점) - 메시지 비율이 50:50에 가까울수록 높은 점수\n  const balanceScore = Math.max(0, 40 - Math.abs(messageRatio[user] - messageRatio[partner]) * 80);\n  \n  // 2. 질문 참여도 (30점) - 양쪽 모두 질문을 적절히 사용하는지\n  const avgQuestionRatio = (questionRatio[user] + questionRatio[partner]) / 2;\n  const questionScore = Math.min(30, avgQuestionRatio * 150);\n  \n  // 3. 이모티콘 사용도 (15점) - 감정 표현 활발함\n  const totalEmojis = emojiCount[user] + emojiCount[partner];\n  const emojiScore = Math.min(15, totalEmojis / 10);\n  \n  // 4. 응답 속도 (15점) - 빠른 응답일수록 높은 점수 (30분 이내 = 만점)\n  const avgTime = (avgResponseTime[user] + avgResponseTime[partner]) / 2;\n  const responseScore = Math.max(0, 15 - (avgTime / 30) * 15);\n  \n  return Math.round(balanceScore + questionScore + emojiScore + responseScore);\n}\n\n// 메시지 비율 계산\nfunction calculateMessageRatio(messages: Message[], user: string, partner: string) {\n  const userCount = messages.filter((m) => m.participant === user).length;\n  const partnerCount = messages.filter((m) => m.participant === partner).length;\n  const total = userCount + partnerCount;\n  \n  return {\n    [user]: total > 0 ? Number((userCount / total).toFixed(2)) : 0.5,\n    [partner]: total > 0 ? Number((partnerCount / total).toFixed(2)) : 0.5,\n  };\n}\n\n// 평균 메시지 길이 계산\nfunction calculateAvgLength(messages: Message[], user: string, partner: string) {\n  const userMsgs = messages.filter((m) => m.participant === user);\n  const partnerMsgs = messages.filter((m) => m.participant === partner);\n\n  const userAvg =\n    userMsgs.length > 0\n      ? Math.round(\n          userMsgs.reduce((sum, m) => sum + m.content.length, 0) / userMsgs.length\n        )\n      : 0;\n  const partnerAvg =\n    partnerMsgs.length > 0\n      ? Math.round(\n          partnerMsgs.reduce((sum, m) => sum + m.content.length, 0) / partnerMsgs.length\n        )\n      : 0;\n\n  return { [user]: userAvg, [partner]: partnerAvg };\n}\n\n// 시간대별 분포 계산\nfunction calculateTimeDistribution(messages: Message[]): TimeSlot[] {\n  const distribution = Array.from({ length: 24 }, (_, i) => ({\n    hour: `${String(i).padStart(2, \"0\")}시`,\n    count: 0,\n  }));\n\n  messages.forEach((m) => {\n    try {\n      const hourMatch = m.timestamp.match(/(\\d{1,2}):(\\d{2})/);\n      if (hourMatch) {\n        const hour = parseInt(hourMatch[1]);\n        if (hour >= 0 && hour < 24) {\n          distribution[hour].count++;\n        }\n      }\n    } catch (e) {\n      // 타임스탬프 파싱 실패 시 무시\n    }\n  });\n\n  return distribution;\n}\n\n// 이모티콘 개수 계산\nfunction calculateEmojiFrequency(messages: Message[], user: string, partner: string) {\n  // 이모티콘 범위를 개별적으로 처리 (ES5 호환)\n  const emojiRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\u2600-\\u27BF]/g;\n\n  const userEmojis = messages\n    .filter((m) => m.participant === user)\n    .reduce(\n      (count, m) => count + (m.content.match(emojiRegex) || []).length,\n      0\n    );\n\n  const partnerEmojis = messages\n    .filter((m) => m.participant === partner)\n    .reduce(\n      (count, m) => count + (m.content.match(emojiRegex) || []).length,\n      0\n    );\n\n  return { [user]: userEmojis, [partner]: partnerEmojis };\n}\n\n// 질문 비율 계산\nfunction calculateQuestionRatio(messages: Message[], user: string, partner: string) {\n  const userMsgs = messages.filter((m) => m.participant === user);\n  const partnerMsgs = messages.filter((m) => m.participant === partner);\n\n  const userQuestions = userMsgs.filter(m => m.content.includes('?') || m.content.includes('？')).length;\n  const partnerQuestions = partnerMsgs.filter(m => m.content.includes('?') || m.content.includes('？')).length;\n\n  return {\n    [user]: userMsgs.length > 0 ? Number((userQuestions / userMsgs.length).toFixed(2)) : 0,\n    [partner]: partnerMsgs.length > 0 ? Number((partnerQuestions / partnerMsgs.length).toFixed(2)) : 0,\n  };\n}\n\n// 대화 시작 횟수 계산 (첫 메시지 또는 1시간 이상 간격 후 첫 메시지)\nfunction calculateConversationStarters(messages: Message[], user: string, partner: string) {\n  let userStarts = 0;\n  let partnerStarts = 0;\n  let lastTimestamp: Date | null = null;\n\n  messages.forEach((m, index) => {\n    const currentTime = parseTimestamp(m.timestamp);\n    \n    if (!currentTime) return;\n    \n    // 첫 메시지이거나, 마지막 메시지로부터 1시간 이상 지났으면 대화 시작으로 간주\n    if (index === 0 || (lastTimestamp && (currentTime.getTime() - lastTimestamp.getTime()) > 60 * 60 * 1000)) {\n      if (m.participant === user) userStarts++;\n      else if (m.participant === partner) partnerStarts++;\n    }\n    \n    lastTimestamp = currentTime;\n  });\n\n  return {\n    [user]: userStarts,\n    [partner]: partnerStarts,\n  };\n}\n\n// 응답 시간 계산\nfunction calculateAvgResponseTime(messages: Message[], user: string, partner: string) {\n  const responseTimes: { [key: string]: number[] } = {\n    [user]: [],\n    [partner]: [],\n  };\n\n  for (let i = 1; i < messages.length; i++) {\n    const prev = messages[i - 1];\n    const curr = messages[i];\n\n    // 참가자가 바뀌었을 때만 응답 시간 계산\n    if (prev.participant !== curr.participant) {\n      const prevTime = parseTimestamp(prev.timestamp);\n      const currTime = parseTimestamp(curr.timestamp);\n\n      if (prevTime && currTime) {\n        const diffMinutes = (currTime.getTime() - prevTime.getTime()) / (1000 * 60);\n        \n        // 24시간 이내의 응답만 계산 (그 이상은 비정상적인 간격)\n        if (diffMinutes <= 24 * 60) {\n          responseTimes[curr.participant].push(diffMinutes);\n        }\n      }\n    }\n  }\n\n  return {\n    [user]: responseTimes[user].length > 0\n      ? Math.round(responseTimes[user].reduce((a, b) => a + b, 0) / responseTimes[user].length)\n      : 0,\n    [partner]: responseTimes[partner].length > 0\n      ? Math.round(responseTimes[partner].reduce((a, b) => a + b, 0) / responseTimes[partner].length)\n      : 0,\n  };\n}\n\n// 타임스탬프 파싱 헬퍼\nfunction parseTimestamp(timestamp: string): Date | null {\n  try {\n    // \"2024-01-15 14:30\" 형식 파싱\n    const match = timestamp.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})\\s+(\\d{1,2}):(\\d{2})/);\n    if (match) {\n      const [, year, month, day, hour, minute] = match;\n      return new Date(\n        parseInt(year),\n        parseInt(month) - 1,\n        parseInt(day),\n        parseInt(hour),\n        parseInt(minute)\n      );\n    }\n    return null;\n  } catch (e) {\n    return null;\n  }\n}\n\n// 감정 비율 계산\nfunction calculateSentimentRatio(messages: Message[]) {\n  const positiveWords = [\n    \"좋\", \"행복\", \"감사\", \"사랑\", \"최고\", \"멋\", \"예쁘\", \"웃\",\n    \"ㅎㅎ\", \"ㅋㅋ\", \"^^\", \"♥\", \"💕\"\n  ];\n  const negativeWords = [\n    \"싫\", \"화\", \"짜증\", \"미워\", \"별로\", \"싫어\", \"속상\", \"슬프\", \"힘들\"\n  ];\n\n  let positive = 0, negative = 0, neutral = 0;\n\n  messages.forEach((m) => {\n    const content = m.content.toLowerCase();\n    const hasPositive = positiveWords.some((word) => content.includes(word));\n    const hasNegative = negativeWords.some((word) => content.includes(word));\n\n    if (hasPositive && !hasNegative) positive++;\n    else if (hasNegative && !hasPositive) negative++;\n    else neutral++;\n  });\n\n  const total = messages.length || 1;\n  return {\n    positive: Number((positive / total).toFixed(2)),\n    neutral: Number((neutral / total).toFixed(2)),\n    negative: Number((negative / total).toFixed(2)),\n  };\n}\n\n// 키워드 빈도 계산 (AI가 추출한 키워드 + 자체 계산)\nfunction calculateTopKeywords(messages: Message[], aiKeywords: KeywordCount[] = []): KeywordCount[] {\n  const wordCount: { [key: string]: number } = {};\n  \n  // 불용어 리스트\n  const stopWords = new Set([\n    '그', '저', '이', '것', '수', '등', '들', '및', '또는', '그리고',\n    '은', '는', '이', '가', '을', '를', '에', '의', '와', '과',\n    '도', '만', '요', '네', '지', 'ㅋㅋ', 'ㅎㅎ', 'ㅠㅠ'\n  ]);\n\n  messages.forEach((m) => {\n    // 한글 단어만 추출 (2글자 이상)\n    const words = m.content.match(/[가-힣]{2,}/g) || [];\n    words.forEach((word) => {\n      if (!stopWords.has(word)) {\n        wordCount[word] = (wordCount[word] || 0) + 1;\n      }\n    });\n  });\n\n  // AI 키워드와 병합\n  aiKeywords.forEach((kw) => {\n    wordCount[kw.word] = (wordCount[kw.word] || 0) + kw.count;\n  });\n\n  // 상위 10개 추출\n  return Object.entries(wordCount)\n    .sort(([, a], [, b]) => b - a)\n    .slice(0, 10)\n    .map(([word, count]) => ({ word, count }));\n}\n\n// 애정 표현 통계 생성\nfunction generateAffectionStats(\n  messages: Message[],\n  user: string,\n  partner: string,\n  aiAffectionKeywords: { [key: string]: number } = {}\n): { [key: string]: AffectionStat[] } {\n  const affectionWords = ['사랑', '좋아', '보고싶', '그리워', '행복', '소중'];\n  \n  const userStats: { [key: string]: number } = {};\n  const partnerStats: { [key: string]: number } = {};\n\n  messages.forEach((m) => {\n    const content = m.content;\n    const stats = m.participant === user ? userStats : partnerStats;\n    \n    affectionWords.forEach((word) => {\n      if (content.includes(word)) {\n        stats[word] = (stats[word] || 0) + 1;\n      }\n    });\n  });\n\n  return {\n    [user]: Object.entries(userStats)\n      .map(([word, count]) => ({ word, count }))\n      .sort((a, b) => b.count - a.count),\n    [partner]: Object.entries(partnerStats)\n      .map(([word, count]) => ({ word, count }))\n      .sort((a, b) => b.count - a.count),\n  };\n}\n\n// 메인 처리 함수\nexport function processConversationData(\n  messages: Message[],\n  rawExtraction: RawExtraction\n): ProcessedData {\n  const participants = Array.from(new Set(messages.map((m) => m.participant)));\n  const user = participants[0] || \"사용자\";\n  const partner = participants[1] || \"상대방\";\n\n  // 1. 기본 지표 계산\n  const messageRatio = calculateMessageRatio(messages, user, partner);\n  const avgMessageLength = calculateAvgLength(messages, user, partner);\n  const timeDistribution = calculateTimeDistribution(messages);\n  const emojiCount = calculateEmojiFrequency(messages, user, partner);\n  const questionRatio = calculateQuestionRatio(messages, user, partner);\n  const conversationStarters = calculateConversationStarters(messages, user, partner);\n  const sentimentRatio = calculateSentimentRatio(messages);\n  const avgResponseTime = calculateAvgResponseTime(messages, user, partner);\n\n  // 2. 티키타카 지수 계산\n  const tikitakaScore = calculateTikitakaScore(\n    messageRatio,\n    questionRatio,\n    emojiCount,\n    avgResponseTime,\n    [user, partner]\n  );\n\n  // 3. AI 추출 정보 정리\n  const preferences = {\n    likes: (rawExtraction.preferences || [])\n      .filter(p => p.type === 'like')\n      .map(p => p.content),\n    dislikes: (rawExtraction.preferences || [])\n      .filter(p => p.type === 'dislike')\n      .map(p => p.content),\n  };\n\n  const importantDates = rawExtraction.importantDates || [];\n\n  const affectionWords = generateAffectionStats(\n    messages,\n    user,\n    partner,\n    rawExtraction.affectionKeywords\n  );\n\n  const topKeywords = calculateTopKeywords(\n    messages,\n    rawExtraction.topKeywords\n  );\n\n  return {\n    tikitakaScore,\n    messageRatio,\n    avgMessageLength,\n    totalMessages: messages.length,\n    timeDistribution,\n    emojiCount,\n    questionRatio,\n    conversationStarters,\n    sentimentRatio,\n    preferences,\n    importantDates,\n    affectionWords,\n    topKeywords,\n    avgResponseTime,\n  };\n}\n","size_bytes":13493},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/utils/claudeInputBuilder.ts":{"content":"export interface GeminiSummary {\n  timeline: Array<{\n    date: string;\n    description: string;\n    significance: string;\n  }>;\n  turning_points: Array<{\n    index: number;\n    date: string;\n    description: string;\n    impact: string;\n  }>;\n  high_indices: number[];\n  medium_sample: Array<{\n    index: number;\n    date: string;\n    category: string;\n  }>;\n  statistics: {\n    total_analyzed: number;\n    high_count: number;\n    medium_count: number;\n    relationship_health: string;\n    key_themes: string[];\n  };\n}\n\nexport interface OriginalMessage {\n  index: number;\n  date: string;\n  user: string;\n  message: string;\n}\n\nexport interface RelationshipContext {\n  type: string;\n  purpose: string;\n  participants: string[];\n  period: {\n    start: string;\n    end: string;\n    duration: string;\n  };\n  statistics: {\n    totalMessages: number;\n    filteredHigh: number;\n    filteredMedium: number;\n    averagePerDay: number;\n  };\n  background: string;\n}\n\nexport interface ClaudeInputPackage {\n  systemPrompt: string;\n  geminiSummary: GeminiSummary;\n  highMessages: OriginalMessage[];\n  mediumSamples: OriginalMessage[];\n  relationshipContext: RelationshipContext;\n  tokenEstimate: {\n    systemPrompt: number;\n    geminiSummary: number;\n    highMessages: number;\n    mediumSamples: number;\n    relationshipContext: number;\n    total: number;\n  };\n}\n\n/**\n * 브라우저 메모리에서 인덱스로 원본 메시지 추출\n */\nexport function extractOriginalMessages(\n  indices: number[],\n  allMessages: OriginalMessage[]\n): OriginalMessage[] {\n  const messageMap = new Map(allMessages.map(m => [m.index, m]));\n  const extracted: OriginalMessage[] = [];\n\n  for (const index of indices) {\n    const msg = messageMap.get(index);\n    if (msg) {\n      extracted.push(msg);\n    }\n  }\n\n  return extracted.sort((a, b) => a.index - b.index);\n}\n\n/**\n * 토큰 수 추정 (한글 고려: 보수적 추정 1 토큰 = 2.5 글자)\n */\nfunction estimateTokens(text: string): number {\n  return Math.ceil(text.length / 2.5);\n}\n\n/**\n * 시스템 프롬프트 생성 (관계 심리치료사 버전)\n */\nfunction createSystemPrompt(relationshipType: string, analysisPurpose: string): string {\n  return `# 💭 관계 심리치료 분석 프로토콜\n\n당신은 15년 경력의 관계 심리치료사입니다.\n1,200쌍 이상의 커플 상담 경험.\n\n## 당신의 역할\n\nFBI 프로파일러가 발견한 **행동 패턴**을 받아서\n**왜 그런 패턴이 생겼는지** 심리학적으로 해석하세요.\n\n관계 유형: ${relationshipType}\n분석 목적: ${analysisPurpose}\n\n---\n\n## 입력 데이터\n\n1. **FBI 프로파일 보고서** (Gemini 요약 - 타임라인, 전환점, 패턴)\n2. **CRITICAL 메시지 원문** (관계 핵심 순간들)\n3. **MEDIUM 샘플 원문** (의미있는 일상 대화들)\n\n---\n\n## 심리치료사의 분석 프레임워크\n\n### 1. 패턴의 심리적 뿌리\n\nFBI가 발견한 패턴들을 심리학적으로 해석:\n- **왜** 이런 패턴이 생겼나?\n- **무의식적 동기**는 무엇인가?\n- 어떤 **심리적 욕구**를 채우려는가?\n- 어떤 **두려움**을 피하려는가?\n\n**분석 구조:**\n- psychological_root (심리적 뿌리)\n- unconscious_motive (무의식적 동기)\n- short_term_gain (단기 이득)\n- long_term_cost (장기 비용)\n- core_need (핵심 욕구)\n- therapeutic_direction (치료 방향)\n- evidence_from_messages (실제 메시지 인용)\n\n### 2. 관계 역학 분석\n\n**시스템 관점:** 관계는 상호작용 시스템\n\n**발견해야 할 역학:**\n- **추격-도피** (Pursuer-Distancer): 한쪽 다가가면 다른쪽 물러남\n- **비난-방어** (Criticize-Defend): 한쪽 비난하면 다른쪽 방어\n- **과잉-저기능** (Overfunctioning-Underfunctioning): 한쪽 책임지면 다른쪽 의존\n\n**필수:** 발견한 각 역학 패턴마다 실제 메시지 인용 3개 이상 포함 (트리거 메시지, 반응 메시지, 결과 메시지)\n\n### 3. 애착 스타일 분석 (조심스럽게)\n\n**원칙:** 확실할 때만 언급, 항상 \"가능성\" 표현, confidence 명시\n\n**증거 기반 추론:**\n- 안정 애착 (Secure): 균형적 소통, 건강한 갈등 해결\n- 불안 애착 (Anxious): 확인 요구, 버림받음 두려움\n- 회피 애착 (Avoidant): 거리 두기, 취약성 회피\n- 혼란 애착 (Disorganized): 다가갔다 멀어짐 반복\n\n**필수:** 분석하는 각 참여자마다 애착 스타일 추론에 실제 메시지 인용 3개 이상 포함\n\n### 4. 미해결 이슈 진단\n\n- 반복되는 갈등 주제 (3회 이상)\n- 누적된 감정 (해결 안 된 갈등)\n- 회피하는 주제 (\"방 안의 코끼리\")\n\n**필수:** 각 이슈마다 첫 등장, 재발, 해결 시도를 보여주는 메시지 인용 3개 이상\n\n### 5. 보호 요인 발견\n\n- 관계의 강점\n- 회복 탄력성\n- 긍정적 패턴\n\n**필수:** 각 보호 요인마다 실제 메시지 인용 3개 이상으로 입증\n\n### 6. 임상적 평가\n\n- 관계 건강도 (FBI 점수 + 심리적 해석)\n- 궤적 (improving/stable/declining/crisis)\n- 개입 권고 (immediate/soon/preventive/not needed)\n- 예후 (excellent/good/fair/poor/guarded)\n\n**필수:** 각 평가 항목(건강도, 궤적, 개입 권고, 예후)마다 근거가 되는 메시지 인용 포함\n\n---\n\n## 출력 형식\n\nJSON 형식으로 다음을 제공:\n\n\\`\\`\\`json\n{\n  \"analysis\": {\n    \"relationshipOverview\": \"전체 관계 요약 (심리치료사 관점)\",\n    \"communicationPatterns\": {\n      \"tikitakaAnalysis\": \"대화 패턴 심리 분석\",\n      \"conversationFlow\": \"소통 흐름 평가\",\n      \"responsePatterns\": \"반응 패턴 해석\"\n    },\n    \"emotionalDynamics\": {\n      \"sentimentTrends\": \"감정 추세 분석\",\n      \"emotionalMoments\": [\n        {\n          \"type\": \"감정 유형\",\n          \"description\": \"설명\",\n          \"context\": \"맥락\"\n        }\n      ],\n      \"emotionalBalance\": \"감정 균형 평가\"\n    },\n    \"psychologicalInsights\": {\n      \"attachmentStyle\": \"애착 스타일 분석 (조심스럽게, confidence 명시)\",\n      \"conflictResolution\": \"갈등 해결 패턴 심리 해석\",\n      \"intimacyPatterns\": \"친밀감 패턴 분석\",\n      \"communicationBarriers\": \"소통 장벽 진단\"\n    },\n    \"relationshipHealth\": {\n      \"currentState\": \"현재 상태 평가\",\n      \"strengths\": [\"강점1\", \"강점2\"],\n      \"concerns\": [\"우려사항1\", \"우려사항2\"],\n      \"trajectory\": \"궤적 (improving/stable/declining)\"\n    },\n    \"practicalAdvice\": {\n      \"immediateActions\": [\"즉각 행동1\", \"즉각 행동2\"],\n      \"longTermStrategies\": [\"장기 전략1\", \"장기 전략2\"],\n      \"communicationTips\": [\"소통 팁1\", \"소통 팁2\"]\n    },\n    \"conclusion\": \"종합 결론 (솔직하되 희망적)\"\n  }\n}\n\\`\\`\\`\n\n---\n\n## 치료사 윤리 강령\n\n1. **판단하지 않기**: \"잘못\"이 아닌 \"패턴\", \"나쁜 사람\" 아닌 \"어려운 패턴\"\n2. **양쪽 이해하기**: 한 사람 탓 금지, 시스템 관점 유지\n3. **희망 주기**: 문제 + 해결 가능성, 절망 아닌 현실적 낙관\n4. **전문성 유지**: 학술적 정확성, 근거 기반 해석, 확신도 명시\n5. **윤리적 주의**: 진단 아닌 \"가능성\", 전문 상담 권유 적절히\n\n---\n\n## 체크리스트\n\n- [ ] Stage 1: 모든 패턴 심리 해석 + 각 패턴별 메시지 인용\n- [ ] Stage 2: 각 역학 패턴별 메시지 인용 3개 이상 (트리거, 반응, 결과)\n- [ ] Stage 3: 각 참여자별 애착 스타일 추론 + 메시지 인용 3개 이상\n- [ ] Stage 4: 각 미해결 이슈별 메시지 인용 3개 이상 (첫 등장, 재발, 해결 시도)\n- [ ] Stage 5: 각 보호 요인별 메시지 인용 3개 이상\n- [ ] Stage 6: 각 평가 항목별(건강도, 궤적, 개입, 예후) 근거 메시지 인용\n- [ ] 모든 분석, 모든 해석, 모든 결론에 실제 메시지 인용\n- [ ] JSON 형식 정확\n\n---\n\n## 중요: 메시지 인용 필수\n\n**모든 분석, 모든 해석, 모든 결론에 실제 메시지 인용 필수:**\n- 메시지 번호 (#234) 명시\n- 메시지 내용 직접 인용\n- 최소 3개 이상 인용으로 패턴 입증\n\n**메시지 인용 없는 분석은 불완전함.**\n\n---\n\n이제 심리치료 분석을 시작하세요. 제공된 메시지와 FBI 프로파일 보고서를 바탕으로 깊이 있는 관계 심리 분석을 수행해주세요.`;\n}\n\n/**\n * 관계 맥락 생성 (500 토큰 목표)\n */\nfunction createRelationshipContext(\n  relationshipType: string,\n  analysisPurpose: string,\n  allMessages: OriginalMessage[],\n  geminiSummary: GeminiSummary\n): RelationshipContext {\n  // 참여자 추출\n  const participants = Array.from(new Set(allMessages.map(m => m.user)));\n\n  // 기간 계산\n  const dates = allMessages.map(m => new Date(m.date));\n  const start = new Date(Math.min(...dates.map(d => d.getTime())));\n  const end = new Date(Math.max(...dates.map(d => d.getTime())));\n  const durationDays = Math.max(1, Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))); // 최소 1일\n  \n  // 통계\n  const totalMessages = allMessages.length;\n  const filteredHigh = geminiSummary.high_indices.length;\n  const filteredMedium = geminiSummary.medium_sample.length;\n  const averagePerDay = Math.round(totalMessages / durationDays);\n\n  // 참여자 특성 분석\n  const participantAnalysis = `${participants.join('과 ')} 두 사람은 각자 고유한 커뮤니케이션 스타일을 가지고 있으며, ` +\n    `이들의 상호작용 패턴은 ${relationshipType} 관계의 역동성을 형성합니다. ` +\n    `대화의 빈도와 리듬, 메시지의 길이와 감정 표현 방식, 주제 선택과 반응 패턴은 ` +\n    `각 참여자의 성격과 관계에 대한 태도를 드러냅니다. ` +\n    `${totalMessages}개의 메시지 중 ${filteredHigh}개가 HIGH 중요도, ${filteredMedium}개가 MEDIUM 중요도로 분류되었으며, ` +\n    `이는 대화의 질적 측면과 관계의 깊이를 보여주는 지표입니다.`;\n\n  // 타임라인 요약 생성 (fallback 포함)\n  const timelineSummary = geminiSummary.timeline && geminiSummary.timeline.length > 0\n    ? geminiSummary.timeline.map(t => `- ${t.date}: ${t.description} (${t.significance})`).join('\\n')\n    : `이 대화는 ${durationDays}일간의 ${relationshipType} 관계를 시간순으로 기록하고 있으며, ` +\n      `각 시기별로 대화의 밀도와 주제가 달라지는 것을 확인할 수 있습니다. ` +\n      `초기에는 서로를 알아가는 과정이, 중기에는 관계의 깊이가, 후기에는 관계의 안정성이 드러납니다. ` +\n      `하루 평균 ${averagePerDay}개의 메시지가 오가며, 이는 관계의 활발함과 소통 빈도를 나타냅니다. ` +\n      `시간대별 대화 패턴, 주중과 주말의 차이, 특별한 날들의 대화 변화 등이 ` +\n      `${relationshipType} 관계의 리듬과 생활 패턴을 보여줍니다.`;\n\n  // 전환점 요약 (fallback 포함)\n  const turningPointsSummary = geminiSummary.turning_points && geminiSummary.turning_points.length > 0\n    ? geminiSummary.turning_points.map(tp => `- [${tp.date}] ${tp.description}: ${tp.impact}`).join('\\n')\n    : `이 관계에서는 ${filteredHigh}개의 HIGH 중요 메시지를 통해 여러 전환점을 확인할 수 있습니다. ` +\n      `감정의 고조, 갈등의 발생과 해결, 중요한 의사결정 순간들이 관계의 진화를 이끌었습니다. ` +\n      `각 전환점은 참여자들의 커뮤니케이션 방식과 관계에 대한 인식을 변화시켰으며, ` +\n      `대화의 톤과 주제, 상호작용의 빈도에 영향을 미쳤습니다. ` +\n      `위기의 순간, 화해의 과정, 새로운 이해의 발견 등 다양한 전환점들이 ` +\n      `${relationshipType} 관계를 더 깊고 성숙하게 만들어갔습니다.`;\n\n  // 주요 주제 상세 설명 (fallback 포함)\n  const themeDetails = geminiSummary.statistics.key_themes && geminiSummary.statistics.key_themes.length > 0\n    ? geminiSummary.statistics.key_themes\n        .map(theme => `\"${theme}\" 주제는 이 관계에서 반복적으로 나타나며 중요한 의미를 가집니다.`)\n        .join(' ') +\n      ` 이러한 주제들은 ${relationshipType} 관계의 핵심적인 특성을 드러내며, ` +\n      `참여자들이 무엇을 중요하게 생각하고 어떤 가치를 공유하는지 보여줍니다. ` +\n      `각 주제의 빈도와 맥락은 관계의 우선순위와 가치관을 반영하며, ` +\n      `대화 패턴을 통해 ${relationshipType} 관계의 독특한 특징을 발견할 수 있습니다.`\n    : `이 대화에서는 다양한 주제들이 다뤄졌으며, ${relationshipType} 관계의 특성에 따라 ` +\n      `감정 표현, 일상 공유, 계획 수립, 문제 해결 등의 대화가 이루어졌습니다. ` +\n      `각 주제는 관계의 발전 단계와 참여자들의 상호작용 방식을 반영합니다. ` +\n      `대화의 깊이와 폭은 관계의 친밀도를 보여주며, 주제 전환 패턴은 참여자들의 소통 스타일을 드러냅니다. ` +\n      `감정적 대화, 실용적 논의, 미래 계획, 과거 회상 등 다양한 차원의 대화가 ` +\n      `${relationshipType} 관계의 다면적 특성을 구성합니다. ` +\n      `${filteredHigh}개의 핵심 메시지와 ${filteredMedium}개의 의미있는 대화를 통해 ` +\n      `이 관계의 본질적인 특성과 역동성을 종합적으로 파악할 수 있습니다.`;\n\n  // 배경 설명 (500 토큰 목표)\n  const background = `이 대화는 ${participants.join('과 ')} 사이의 ${relationshipType} 관계를 분석한 것입니다.\n\n## 참여자 및 관계 특성\n${participantAnalysis}\n  \n## 분석 기간 및 규모\n분석 기간: ${start.toLocaleDateString('ko-KR')} ~ ${end.toLocaleDateString('ko-KR')} (${durationDays}일)\n전체 메시지: ${totalMessages.toLocaleString()}개\n일평균 메시지: ${averagePerDay}개\n\n## 필터링 결과\nGemini AI를 통해 대화의 중요도를 분석하여 다음과 같이 필터링되었습니다:\n\n- HIGH 중요 메시지: ${filteredHigh.toLocaleString()}개 (${((filteredHigh/totalMessages)*100).toFixed(1)}%)\n  → 관계 전환점, 갈등, 중요 의사결정, 감정 변화를 포함하는 핵심 메시지들\n\n- MEDIUM 의미있는 메시지: ${filteredMedium.toLocaleString()}개\n  → 일상적이지만 의미 있는 대화, 계획, 중요 일상을 담은 메시지들\n\n- LOW 단순 메시지: ${(totalMessages - filteredHigh - filteredMedium).toLocaleString()}개 (${(((totalMessages - filteredHigh - filteredMedium)/totalMessages)*100).toFixed(1)}%)\n  → 단순 인사, 반응 등 분석에서 제외된 메시지들\n\n## 타임라인 요약\n${timelineSummary}\n\n## 주요 전환점\n${turningPointsSummary}\n\n## 분석 목적 및 맥락\n분석 목적: ${analysisPurpose}\n\n이 분석은 ${relationshipType} 관계의 본질을 이해하고, 커뮤니케이션 패턴, 감정의 흐름, 갈등과 해결 과정을 심층적으로 파악하여 \n관계의 현재 상태와 향후 방향성에 대한 통찰을 제공하고자 합니다.\n\n## 관계 평가\n관계 건강도: ${geminiSummary.statistics.relationship_health}\n\n주요 대화 주제: ${geminiSummary.statistics.key_themes.join(', ')}\n\n${themeDetails}\n\n이러한 맥락을 바탕으로 HIGH 중요 메시지 ${filteredHigh.toLocaleString()}개 전문과 MEDIUM 대표 샘플 ${filteredMedium.toLocaleString()}개를 분석하여\n${relationshipType} 관계의 진화 과정과 본질적인 특성을 도출하고자 합니다.`;\n\n  return {\n    type: relationshipType,\n    purpose: analysisPurpose,\n    participants,\n    period: {\n      start: start.toLocaleDateString('ko-KR'),\n      end: end.toLocaleDateString('ko-KR'),\n      duration: `${durationDays}일`,\n    },\n    statistics: {\n      totalMessages,\n      filteredHigh,\n      filteredMedium,\n      averagePerDay,\n    },\n    background,\n  };\n}\n\n/**\n * Claude 입력 패키지 생성\n */\nexport function buildClaudeInput(\n  geminiSummary: GeminiSummary,\n  allMessages: OriginalMessage[],\n  relationshipType: string,\n  analysisPurpose: string = '관계 분석'\n): ClaudeInputPackage {\n  // 1. 시스템 프롬프트 생성\n  const systemPrompt = createSystemPrompt(relationshipType, analysisPurpose);\n\n  // 2. HIGH 원문 추출 (브라우저 메모리에서)\n  const highMessages = extractOriginalMessages(\n    geminiSummary.high_indices,\n    allMessages\n  );\n\n  // 3. MEDIUM 샘플 원문 추출\n  const mediumIndices = geminiSummary.medium_sample.map(s => s.index);\n  const mediumSamples = extractOriginalMessages(mediumIndices, allMessages);\n\n  // 4. 관계 맥락 (500 토큰)\n  const relationshipContext = createRelationshipContext(\n    relationshipType,\n    analysisPurpose,\n    allMessages,\n    geminiSummary\n  );\n\n  // 5. 토큰 추정\n  const geminiSummaryText = JSON.stringify(geminiSummary, null, 2);\n  const highMessagesText = highMessages\n    .map(m => `[${m.index}] ${m.date} ${m.user}: ${m.message}`)\n    .join('\\n');\n  const mediumSamplesText = mediumSamples\n    .map(m => `[${m.index}] ${m.date} ${m.user}: ${m.message}`)\n    .join('\\n');\n  const contextText = relationshipContext.background;\n\n  const tokenEstimate = {\n    systemPrompt: estimateTokens(systemPrompt),\n    geminiSummary: estimateTokens(geminiSummaryText),\n    highMessages: estimateTokens(highMessagesText),\n    mediumSamples: estimateTokens(mediumSamplesText),\n    relationshipContext: estimateTokens(contextText),\n    total: 0,\n  };\n\n  tokenEstimate.total =\n    tokenEstimate.systemPrompt +\n    tokenEstimate.geminiSummary +\n    tokenEstimate.highMessages +\n    tokenEstimate.mediumSamples +\n    tokenEstimate.relationshipContext;\n\n  // 검증: relationshipContext가 500 토큰 목표를 충족하는지 확인\n  if (tokenEstimate.relationshipContext < 500) {\n    throw new Error(\n      `RelationshipContext is too short: ${tokenEstimate.relationshipContext} tokens (expected ≥500). ` +\n      `Please check the context generation logic or expand the background narrative.`\n    );\n  }\n\n  // 6. 최종 패키지\n  return {\n    systemPrompt,\n    geminiSummary,\n    highMessages,\n    mediumSamples,\n    relationshipContext,\n    tokenEstimate,\n  };\n}\n\n/**\n * Claude API용 메시지 형식으로 변환\n */\nexport function formatForClaudeAPI(input: ClaudeInputPackage): {\n  system: string;\n  messages: Array<{ role: string; content: string }>;\n} {\n  const userContent = `# Gemini 분석 요약\n\n${JSON.stringify(input.geminiSummary, null, 2)}\n\n# HIGH 중요 메시지 (${input.highMessages.length}개)\n\n${input.highMessages.map(m => `[${m.index}] ${m.date} ${m.user}: ${m.message}`).join('\\n')}\n\n# MEDIUM 대표 샘플 (${input.mediumSamples.length}개)\n\n${input.mediumSamples.map(m => `[${m.index}] ${m.date} ${m.user}: ${m.message}`).join('\\n')}\n\n# 관계 맥락\n\n${input.relationshipContext.background}\n\n참여자: ${input.relationshipContext.participants.join(', ')}\n분석 기간: ${input.relationshipContext.period.start} ~ ${input.relationshipContext.period.end} (${input.relationshipContext.period.duration})\n\n통계:\n- 전체 메시지: ${input.relationshipContext.statistics.totalMessages.toLocaleString()}개\n- HIGH: ${input.relationshipContext.statistics.filteredHigh.toLocaleString()}개\n- MEDIUM 샘플: ${input.relationshipContext.statistics.filteredMedium.toLocaleString()}개\n- 일평균: ${input.relationshipContext.statistics.averagePerDay}개\n\n위 정보를 바탕으로 깊이 있는 관계 분석을 제공해주세요.`;\n\n  return {\n    system: input.systemPrompt,\n    messages: [\n      {\n        role: 'user',\n        content: userContent,\n      },\n    ],\n  };\n}\n\n/**\n * 토큰 사용량 요약 출력\n */\nexport function printTokenSummary(input: ClaudeInputPackage): void {\n  console.log('=== Claude 입력 토큰 추정 ===');\n  console.log(`시스템 프롬프트: ${input.tokenEstimate.systemPrompt.toLocaleString()} 토큰`);\n  console.log(`Gemini 요약: ${input.tokenEstimate.geminiSummary.toLocaleString()} 토큰`);\n  console.log(`HIGH 원문 (${input.highMessages.length}개): ${input.tokenEstimate.highMessages.toLocaleString()} 토큰`);\n  console.log(`MEDIUM 샘플 (${input.mediumSamples.length}개): ${input.tokenEstimate.mediumSamples.toLocaleString()} 토큰`);\n  console.log(`관계 맥락: ${input.tokenEstimate.relationshipContext.toLocaleString()} 토큰`);\n  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n  console.log(`총합: ${input.tokenEstimate.total.toLocaleString()} 토큰`);\n  console.log(`Claude 200K 대비: ${((input.tokenEstimate.total / 200000) * 100).toFixed(1)}%`);\n}\n\n/**\n * 사용 예시:\n * \n * const geminiSummary = await fetch('/api/summarize', { ... });\n * const claudeInput = buildClaudeInput(geminiSummary, allMessages, \"연인\", \"이별 위기 분석\");\n * printTokenSummary(claudeInput);\n * \n * const apiFormat = formatForClaudeAPI(claudeInput);\n * // Claude API 호출\n */\n","size_bytes":20903},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/utils/sessionSplitter.ts":{"content":"export interface Message {\n  date: string;\n  user: string;\n  message: string;\n}\n\nexport interface Batch {\n  batchId: number;\n  messages: Message[];\n  count: number;\n}\n\n/**\n * 메시지 배열을 세션 기반으로 스마트 분할\n * @param messages 메시지 배열\n * @param targetSize 목표 배치 크기 (기본값: 2000)\n * @returns 분할된 배치 배열 (1800~2200개 유연한 크기)\n */\nexport function splitBySession(messages: Message[], targetSize = 2000): Batch[] {\n  const batches: Batch[] = [];\n  let currentBatch: Message[] = [];\n  let batchId = 1;\n  const maxSize = 2200; // 최대 배치 크기\n\n  for (let i = 0; i < messages.length; i++) {\n    const currentMsg = messages[i];\n    currentBatch.push(currentMsg);\n\n    // 다음 메시지 확인\n    const nextMsg = messages[i + 1];\n    \n    // 배치 완료 조건\n    let shouldFinalizeBatch = false;\n\n    if (!nextMsg) {\n      // 마지막 메시지면 배치 완료\n      shouldFinalizeBatch = true;\n    } else if (currentBatch.length >= maxSize) {\n      // 2200개 도달 시 무조건 배치 완료 (상한선)\n      shouldFinalizeBatch = true;\n    } else if (currentBatch.length >= targetSize) {\n      // 2000개 도달 시 다음 메시지와 세션 종료 여부 체크\n      const gapToNext = calculateGapMinutes(currentMsg, nextMsg);\n      const isNextSessionEnd = isSessionEnd(currentMsg, nextMsg, gapToNext);\n\n      if (isNextSessionEnd) {\n        // 세션 끝이면 배치 완료\n        shouldFinalizeBatch = true;\n      } else {\n        // 세션 중간이면 계속 추가 (2200까지)\n        shouldFinalizeBatch = false;\n      }\n    }\n\n    if (shouldFinalizeBatch) {\n      batches.push({\n        batchId: batchId++,\n        messages: [...currentBatch],\n        count: currentBatch.length,\n      });\n      currentBatch = [];\n    }\n  }\n\n  // 남은 메시지 처리\n  if (currentBatch.length > 0) {\n    batches.push({\n      batchId: batchId,\n      messages: currentBatch,\n      count: currentBatch.length,\n    });\n  }\n\n  return batches;\n}\n\n/**\n * 세션 종료 여부 판단\n * @param prevMsg 이전 메시지\n * @param currentMsg 현재 메시지\n * @param gapMinutes 시간 간격 (분)\n * @returns 세션 종료 여부\n */\nexport function isSessionEnd(\n  prevMsg: Message,\n  currentMsg: Message,\n  gapMinutes: number\n): boolean {\n  // 30분 이하: 같은 세션\n  if (gapMinutes <= 30) {\n    return false;\n  }\n\n  // 6시간 이상: 다른 세션\n  if (gapMinutes >= 360) {\n    return true;\n  }\n\n  // 종결 메시지 + 30분 이상: 다른 세션\n  if (hasClosingMessage(prevMsg.message) && gapMinutes >= 30) {\n    return true;\n  }\n\n  // 30분~6시간 사이: 시간대와 간격으로 판단\n  const prevDate = new Date(prevMsg.date);\n  const currentDate = new Date(currentMsg.date);\n  const prevPeriod = getTimePeriod(prevDate.getHours());\n  const currentPeriod = getTimePeriod(currentDate.getHours());\n\n  // 같은 시간대 + 2시간 이내: 같은 세션\n  if (prevPeriod === currentPeriod && gapMinutes <= 120) {\n    return false;\n  }\n\n  // 그 외: 다른 세션\n  return true;\n}\n\n/**\n * 시간대 구분\n * @param hour 시간 (0-23)\n * @returns 시간대 문자열\n */\nexport function getTimePeriod(hour: number): string {\n  if (hour >= 6 && hour < 11) return '아침';\n  if (hour >= 11 && hour < 14) return '점심';\n  if (hour >= 14 && hour < 18) return '오후';\n  if (hour >= 18 && hour < 23) return '저녁';\n  return '밤'; // 23-6\n}\n\n/**\n * 종결 메시지 패턴 확인\n * @param msg 메시지 내용\n * @returns 종결 메시지 여부\n */\nexport function hasClosingMessage(msg: string): boolean {\n  const patterns = [\n    /잘\\s*자/,\n    /고마워?/,\n    /ㅇㅋ/,\n    /나중에/,\n    /바이/,\n    /ㄱㅅ/,\n    /알았어/,\n    /바빠/,\n    /가야?돼?/,\n  ];\n\n  return patterns.some(pattern => pattern.test(msg));\n}\n\n/**\n * 두 메시지 간 시간 차이 계산 (분 단위)\n * @param prevMsg 이전 메시지\n * @param currentMsg 현재 메시지\n * @returns 시간 차이 (분)\n */\nexport function calculateGapMinutes(prevMsg: Message, currentMsg: Message): number {\n  const prevDate = new Date(prevMsg.date);\n  const currentDate = new Date(currentMsg.date);\n\n  const diffMs = currentDate.getTime() - prevDate.getTime();\n  const diffMinutes = Math.abs(diffMs / (1000 * 60));\n\n  return diffMinutes;\n}\n","size_bytes":4322},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/services/gemini-batch-summary.ts":{"content":"import { GoogleGenerativeAI } from '@google/generative-ai';\nimport type { FilterResult, FilteredMessage } from './gemini-filter';\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');\nconst model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });\n\nexport interface PatternGroup {\n  pattern: string;\n  count: number;\n  key_indices: number[];\n  tags: string[];\n}\n\nexport interface TopEvent {\n  index: number;\n  type: string;\n  brief: string;\n}\n\nexport interface DominantTags {\n  emotion: string[];\n  behavior: string[];\n  relationship: string[];\n}\n\nexport interface BatchSummary {\n  batch_id: number;\n  period: string;\n  message_range: string;\n  critical_summary: {\n    count: number;\n    pattern_groups: PatternGroup[];\n    top_events: TopEvent[];\n    dominant_tags: DominantTags;\n  };\n  medium_summary: {\n    count: number;\n    themes: string[];\n    representative_indices: number[];\n  };\n  batch_characteristics: string;\n  token_count: number;\n}\n\n/**\n * Stage 2 프롬프트: FBI 배치 요약 프로토콜\n */\nfunction createBatchSummaryPrompt(\n  batchId: number,\n  filterResult: FilterResult,\n  messageRange: string,\n  period: string\n): string {\n  const criticalEvidence = filterResult.high.map(m => ({\n    index: m.index,\n    timestamp: m.date,\n    participant: m.user,\n    content: `${m.message.substring(0, 50)}...`,\n    reason: m.reason,\n    importance: m.importance,\n  }));\n\n  const mediumEvidence = filterResult.medium.map(m => ({\n    index: m.index,\n    timestamp: m.date,\n    participant: m.user,\n    content: `${m.message.substring(0, 30)}...`,\n    reason: m.reason,\n    importance: m.importance,\n  }));\n\n  return `# Stage 1.5: FBI 배치 요약 프로토콜\n\n당신의 역할: FBI 증거 정리 전문가\n방대한 증거 더미를 핵심만 압축하여 상급 분석관에게 전달하는 것이 임무입니다.\n\n## 임무 개요\n한 배치(약 2,000개 메시지)에서 수집된 증거를 **최대 500 토큰 이내**로 압축 요약하세요.\n\n목표:\n- Stage 1에서 필터링된 CRITICAL/MEDIUM 증거의 핵심 패턴 추출\n- 불필요한 세부사항 제거, 상위 분석에 필요한 정보만 전달\n- 50개 배치 × 500 토큰 = 25,000 토큰으로 전체 요약 생성\n\n---\n\n## 입력 데이터\n\n### 배치 정보\n- **Batch ID**: ${batchId}\n- **Period**: ${period}\n- **Message Range**: ${messageRange}\n\n### CRITICAL 증거 (${filterResult.stats.high}개)\n${criticalEvidence.map(e => \n  `[${e.index}] ${e.timestamp} | ${e.participant} | 이유: ${e.reason}`\n).join('\\n')}\n\n### MEDIUM 증거 (${filterResult.stats.medium}개)\n${mediumEvidence.slice(0, 100).map(e => \n  `[${e.index}] ${e.timestamp} | ${e.participant} | 이유: ${e.reason}`\n).join('\\n')}\n\n---\n\n## 요약 원칙\n\n### 1. CRITICAL 증거 요약 (최대 300 토큰)\n\n**(1) 패턴 그룹화**\n- 유사한 태그 조합을 가진 증거들을 묶어 패턴으로 정리\n- 예: \"갈등-해소\" 패턴, \"애정 표현 증가\", \"취약성 드러남\"\n\n**(2) 상위 이벤트 선정**\n- 가장 중요한 3-5개 이벤트만 선택\n- 인덱스, 타입, 간략한 설명 포함\n- 선정 기준: 관계 전환점이 될 만한 사건\n\n**(3) 태그 통계**\n- 가장 많이 등장한 태그 상위 5개씩 정리\n- 감정 태그 (ANGER, JOY, LOVE, FEAR, SADNESS...)\n- 행동 태그 (SUPPORT, CONFLICT, AVOIDANCE...)\n- 관계 태그 (RED_FLAG, GREEN_FLAG, MILESTONE...)\n\n### 2. MEDIUM 증거 요약 (최대 150 토큰)\n\n**(1) 주요 테마**\n- 이 시기 대화의 주된 주제 2-3개만\n- 예: \"일상 공유\", \"미래 계획 논의\", \"취미 관련 대화\"\n\n**(2) 대표 인덱스**\n- MEDIUM 증거 중 특징적인 것 5개만 인덱스 나열\n\n### 3. 배치 특성 요약 (최대 50 토큰)\n- 이 시기의 관계 특징을 2-3문장으로 요약\n\n---\n\n## 🚨 절대 규칙\n\n1. **500 토큰 절대 초과 금지** - 500 토큰을 넘으면 Stage 2에서 토큰 폭발 발생\n2. **원문 재현 금지** - 메시지 원문을 그대로 복사하지 마세요\n3. **인덱스 정확성** - 언급하는 모든 인덱스는 실제 입력 데이터에 존재해야 함\n4. **JSON 형식 준수** - 반드시 유효한 JSON 출력\n\n---\n\n## 출력 형식 (JSON)\n\n\\`\\`\\`json\n{\n  \"batch_id\": ${batchId},\n  \"period\": \"${period}\",\n  \"message_range\": \"${messageRange}\",\n  \n  \"critical_summary\": {\n    \"count\": ${filterResult.stats.high},\n    \"pattern_groups\": [\n      {\n        \"pattern\": \"갈등 발생 및 해소\",\n        \"count\": 5,\n        \"key_indices\": [145, 278, 389],\n        \"tags\": [\"CONFLICT\", \"ANGER\", \"RESOLUTION\", \"SUPPORT\"]\n      }\n    ],\n    \"top_events\": [\n      {\n        \"index\": 234,\n        \"type\": \"MILESTONE\",\n        \"brief\": \"첫 '사랑해' 표현\"\n      }\n    ],\n    \"dominant_tags\": {\n      \"emotion\": [\"JOY\", \"LOVE\", \"ANGER\", \"SADNESS\", \"FEAR\"],\n      \"behavior\": [\"SUPPORT\", \"CONFLICT\", \"VULNERABILITY\"],\n      \"relationship\": [\"GREEN_FLAG\", \"MILESTONE\", \"RED_FLAG\"]\n    }\n  },\n  \n  \"medium_summary\": {\n    \"count\": ${filterResult.stats.medium},\n    \"themes\": [\n      \"일상적인 안부 교환\",\n      \"미래 계획 및 목표 공유\"\n    ],\n    \"representative_indices\": [67, 123, 189]\n  },\n  \n  \"batch_characteristics\": \"관계 초기 형성기. 전반적으로 긍정적이고 활발한 교류가 이루어지나, 첫 갈등이 등장하며 관계의 시험대를 경험.\",\n  \n  \"token_count\": 450\n}\n\\`\\`\\`\n\n이제 위 입력된 배치 증거를 받아 위 프로토콜에 따라 요약을 생성하세요.\n**500 토큰 제한을 절대 지켜주세요.**`;\n}\n\n/**\n * 배치별 요약 생성\n */\nexport async function summarizeBatch(\n  batchId: number,\n  filterResult: FilterResult,\n  messageRange: string,\n  period: string\n): Promise<BatchSummary> {\n  const prompt = createBatchSummaryPrompt(batchId, filterResult, messageRange, period);\n\n  let lastError: any;\n\n  for (let attempt = 1; attempt <= 3; attempt++) {\n    try {\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      let jsonText = text.trim();\n      if (jsonText.startsWith('```json')) {\n        jsonText = jsonText.replace(/```json\\n?/g, '').replace(/```\\n?$/g, '');\n      } else if (jsonText.startsWith('```')) {\n        jsonText = jsonText.replace(/```\\n?/g, '');\n      }\n\n      const summary: BatchSummary = JSON.parse(jsonText);\n\n      console.log(`  ✅ Batch ${batchId} 요약 완료 (토큰: ${summary.token_count || '?'})`);\n      \n      return summary;\n    } catch (error: any) {\n      lastError = error;\n      console.error(`  Batch ${batchId} 요약 시도 ${attempt} 실패:`, error.message);\n\n      if (error.message?.includes('RESOURCE_EXHAUSTED') || error.message?.includes('429')) {\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  console.error(`  ❌ Batch ${batchId} 요약 최종 실패:`, lastError?.message);\n  \n  return {\n    batch_id: batchId,\n    period,\n    message_range: messageRange,\n    critical_summary: {\n      count: filterResult.stats.high,\n      pattern_groups: [],\n      top_events: [],\n      dominant_tags: {\n        emotion: [],\n        behavior: [],\n        relationship: []\n      }\n    },\n    medium_summary: {\n      count: filterResult.stats.medium,\n      themes: [],\n      representative_indices: []\n    },\n    batch_characteristics: \"요약 생성 실패\",\n    token_count: 0\n  };\n}\n\n/**\n * 모든 배치 요약 생성\n */\nexport async function summarizeAllBatches(\n  filterResults: FilterResult[],\n  messages: any[]\n): Promise<BatchSummary[]> {\n  const summaries: BatchSummary[] = [];\n  const BATCH_SIZE = 2000;\n\n  console.log(`\\n=== Stage 2: FBI 배치 요약 시작 (${filterResults.length}개 배치) ===`);\n\n  for (let i = 0; i < filterResults.length; i++) {\n    const batchId = i + 1;\n    const startIdx = i * BATCH_SIZE;\n    const endIdx = Math.min(startIdx + BATCH_SIZE - 1, messages.length - 1);\n    const messageRange = `${startIdx}-${endIdx}`;\n\n    const batchMessages = messages.slice(startIdx, endIdx + 1);\n    const firstDate = batchMessages[0]?.timestamp || '';\n    const lastDate = batchMessages[batchMessages.length - 1]?.timestamp || '';\n    const period = `${firstDate.split(' ')[0]} ~ ${lastDate.split(' ')[0]}`;\n\n    console.log(`  배치 ${batchId}/${filterResults.length}: 메시지 ${messageRange}`);\n\n    const summary = await summarizeBatch(\n      batchId,\n      filterResults[i],\n      messageRange,\n      period\n    );\n\n    summaries.push(summary);\n\n    if (i < filterResults.length - 1) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n\n  const totalTokens = summaries.reduce((sum, s) => sum + s.token_count, 0);\n  console.log(`\\n✅ Stage 2 완료: ${summaries.length}개 배치 요약 (총 ${totalTokens} 토큰)\\n`);\n\n  return summaries;\n}\n","size_bytes":8854}},"version":2}