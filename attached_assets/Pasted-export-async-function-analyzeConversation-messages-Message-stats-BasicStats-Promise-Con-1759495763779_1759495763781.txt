export async function analyzeConversation(
  messages: Message[],
  stats: BasicStats
): Promise<ConversationAnalysis> {
  
  // ===== STEP 1: AI - 정보 찾기만 =====
  const extractionResponse = await anthropic.messages.create({
    model: DEFAULT_MODEL_STR,
    max_tokens: 3000,
    system: `당신은 정보 추출 전문가입니다. 대화에서 다음 정보만 찾아서 나열하세요:
    1. 상대방이 명시적으로 "좋아한다"고 말한 것들
    2. 상대방이 명시적으로 "싫어한다"고 말한 것들  
    3. 날짜가 언급된 약속이나 이벤트
    4. "사랑해", "보고싶어", "고마워" 등 애정 표현 문장들
    
    해석하지 말고, 찾은 내용만 JSON으로 출력하세요.`,
    messages: [{
      role: 'user',
      content: `대화 샘플:\n${messages.slice(-200).map(m => 
        `${m.participant}: ${m.content}`).join('\n')}`
    }]
  });
  
  const rawExtraction = parseJSON(extractionResponse);
  
  // ===== STEP 2: 코드 - 계산 & 가공 =====
  const processedData = processConversationData(messages, rawExtraction);
  
  // ===== STEP 3: AI - 심층 분석만 =====
  const analysisResponse = await anthropic.messages.create({
    model: DEFAULT_MODEL_STR,
    max_tokens: 3000,
    system: `당신은 관계 심리 전문가입니다. 주어진 통계 데이터만을 바탕으로 
    두 사람의 소통 스타일, 관계 역학, 숨겨진 패턴을 분석하세요.
    
    **중요: 대화 원문을 보지 말고, 제공된 통계 데이터만 분석하세요.**`,
    messages: [{
      role: 'user',
      content: `${userName}과 ${partnerName}의 대화 통계:
      
${JSON.stringify(processedData, null, 2)}

이 데이터를 바탕으로 다음을 분석해주세요:
1. 소통 스타일 (경청형/주도형)
2. 관계 역학 (주도권, 친밀도 추이)
3. 특이 패턴 (반복 주제, 회피 주제)

JSON 형식으로 응답하세요.`
    }]
  });
  
  const deepAnalysis = parseJSON(analysisResponse);
  
  // ===== STEP 4: AI - 글쓰기만 =====
  const reportResponse = await anthropic.messages.create({
    model: DEFAULT_MODEL_STR,
    max_tokens: 2000,
    system: `당신은 Maltcha의 AI 비서 'Tea'입니다. 
    분석 결과를 따뜻하고 친근하게 전달하는 것이 당신의 역할입니다.`,
    messages: [{
      role: 'user',
      content: `다음 데이터와 분석 결과를 바탕으로, ${userName}님을 위한 
4개의 인사이트를 작성해주세요:

**통계 데이터:**
${JSON.stringify(processedData, null, 2)}

**심층 분석:**
${JSON.stringify(deepAnalysis, null, 2)}

JSON 배열 형식으로, 각 인사이트는 title과 description을 포함하세요.
예: [{"title": "...", "description": "..."}]`
    }]
  });
  
  const insights = parseJSON(reportResponse);
  
  return {
    sentimentScore: processedData.tikitakaScore,
    insights: insights,
    stage1Data: processedData, // Step 2 결과
    stage2Data: deepAnalysis,  // Step 3 결과
  };
}

// JSON 파싱 헬퍼 함수
function parseJSON(response: any): any {
  const text = response.content[0].type === 'text' 
    ? response.content[0].text 
    : '{}';
    
  try {
    const jsonMatch = text.match(/\{[\s\S]*\}|\[[\s\S]*\]/);
    return JSON.parse(jsonMatch ? jsonMatch[0] : text);
  } catch {
    return {};
  }
}